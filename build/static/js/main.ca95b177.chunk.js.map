{"version":3,"sources":["components/sign-in/logo.png","components/sign-in/LoginClarification.js","components/sign-in/ResetPasswordModalComponent.js","components/dentist/module/dentist-date-picker.js","components/dentist/module/dentist-navigationbar.js","components/dentist/module/dentist-header.js","components/dentist/module/dentist-week-all.js","components/dentist/module/dentist-appointment-modal.js","components/dentist/page/DentistPageComponent.js","components/dentist/module/dentist-appointment-modal-day-all.js","components/dentist/module/dentist-day-all.js","components/secretary/module/secretary-date-picker.js","components/secretary/module/secretary-navigationbar.js","components/secretary/module/secretary-add-appointment-modal-form-step1.js","components/secretary/module/secretary-add-appointment-modal-form-step2.js","components/secretary/module/secretary-add-appointment-modal-form.js","components/secretary/module/secretary-add-appointment-modal.js","components/secretary/module/secretary-header.js","components/secretary/module/secretary-edit-appointment-modal-form-step1.js","components/secretary/module/secretary-edit-appointment-modal-form-step2.js","components/secretary/module/secretary-edit-appointment-modal-form.js","components/secretary/module/secretary-edit-appointment-modal.js","components/secretary/module/secretary-week-all.js","components/secretary/module/secretary-edit-appointment-modal-day-all.js","components/secretary/module/secretary-day-all.js","components/secretary/module/secretary-available-add-appointment-modal-step1.js","components/secretary/module/secretary-available-add-appointment-modal-form.js","components/secretary/module/secretary-available-add-appoinment-modal.js","components/secretary/module/secretary-availabledate-modal.js","components/secretary/module/secretary-availabilty.js","components/secretary/module/secretary-week-all-one-doc.js","components/secretary/module/secretary-day-all-one-doc.js","components/secretary/pages/secretary-view.js","components/admin/module/logo.js","components/admin/module/admin-sidebar.js","components/admin/module/admin-dentist-table.js","components/admin/module/admin-procedure-table.js","components/admin/module/admin-table.js","components/admin/module/admin-create-modal.js","components/admin/module/admin-create-schedule-modal.js","components/admin/module/admin-add-dentist-modal.js","components/admin/module/admin-add-procedure-modal.js","components/admin/module/admin-reset-secretary-modal.js","components/admin/module/admin-reset-password-modal.js","components/admin/module/admin-free-memory-modal.js","components/admin/module/admin-edit-procedure-modal.js","components/admin/module/admin-delete-procedure-modal.js","components/admin/module/admin-edit-dentist-modal.js","components/admin/module/admin-delete-dentist-modal.js","components/admin/module/admin-edit-schedule-modal.js","components/admin/module/admin-view-schedule-modal.js","components/admin/module/admin-add-unavailable-modal.js","components/admin/module/admin-delete-unavailable-modal.js","components/admin/module/admin-delete-schedule-modal.js","components/admin/pages/admin.js","components/sign-in/LoginComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LoginClarification","props","onClickConfirmButton","bind","onChangeAdminPassword","onAdminValidation","closeModal","state","open","username","password","confirmPassword","adminPassword","this","setState","e","target","value","user","length","toast","type","title","description","icon","axios","post","then","res","data","message","console","log","creds","newPassword","catch","error","status","code","className","id","onClick","Modal","centered","Header","style","color","Content","name","placeholder","onChange","Component","ResetPasswordModalComponent","onChangeUserName","onChangePassword","onChangeConfirmPassword","onClickForgotButton","paddingBottom","textDecoration","backgroundColor","data-tooltip","data-position","left","display","Picker","handleChangeDate","date","disableSunday","moment","day","handleOnToday","handleOnPrev","handleOnNext","class","selected","toDate","onSelect","filterDate","data-title","data-content","data-variation","fontWeight","marginLeft","data-inverted","SecretaryNavigationbar","onToday","onPrev","onNext","onChangeDate","get","window","location","href","newDate","Date","parse","formattedDate","format","height","fontSize","logout","SecretaryHeader","hello","today","startOfWeek","endOfWeek","days","daysParent","weekUnparsed","newArray","dated","dateded","i","push","Table","Cell","formatted","celled","textAlign","compact","Body","Row","children","week_all","appointments","weeks","week","handleWeekAppointmentUpdate","fullWidth","TableRow","fixed","map","index","slot","weekAppointments","key","appointment","DentistPageComponent","onWeek","dayStart","startOf","dayEnd","endOf","numdays","unparsed","clone","add","onChangeFilter","onChangeView","prev_date","subtract","next_date","toString","handleDayAppointmentUpdate","handleWeekAvailable","doctors","dayAppointments","view","filter","weekAvailable","doctorID","response","appID","_id","doctor","currView","text","Dropdown","selection","options","position","content","filters","viewer","weekLength","margin","overflowY","fluid","defaultValue","addProcStep1","continue","preventDefault","nextStep","cancel","setOpen","disableNonMid","time","minute","values","onchangeDate","onchangeTime","handleTime","handleDate","Form","Input","required","label","control","DatePicker","minDate","Field","showTimeSelect","showTimeSelectOnly","timeIntervals","dateFormat","minTime","maxTime","setHours","addProcStep2","procedure","procedures","multiple","processname","lastname","firstname","handleChange","handleDoctorChange","handleProcessChange","Popup","trigger","autoComplete","TextArea","addProcMainForm","prevStep","step","Step","Group","active","AddModal","handleValidation","trim","patientcontact","formIsValid","isBefore","isSame","match","undefined","checkData","dateInput","timeInput","handleClose","setTimeout","animation","input","handleSubmit","notes","Array","isArray","process","handletime","button","button2","Button","onClose","onOpen","as","onSubmit","Actions","editProcStep1","onChangeTime","currentProcs","currentDocs","EditProcMainForm","EditModal","handleChangeInEdit","procs","docs","el","app_id","setOpen2","secondopen","appointmentID","handleDocWeekAppointmentUpdate","deleteAppointment","button3","Icon","Card","closeIcon","size","handleDayDocAppointmentUpdate","join","day_all","Name","addAvailProcStep1","disabled","addAvailProcMainForm","AddAvailableModal","available","SecretaryAvailabilityModal","handleShowDimmer","activeDimmer","handleHideDimmer","availSlots","row","setClose","handleAvailabilityTime","appDate","displayDate","Dimmer","inverted","maxHeight","avail","available2","available1","timeSlot1","backgroundColor2","timeSlot2","SecretaryAvailability","availability","week_all_doc","doc","day_all_doc","Secretary","weekAppointmentsDoc","dayAppointmentsDoc","Logo","Image","src","AdminSidebar","handleItem","handleModal","handleTable","activeItem","no_padding","padding","item_styling","icon_styling","marginRight","Menu","secondary","vertical","width","border","boxShadow","Item","horizontalalign","Segment","basic","circular","handleItemClick","corner","React","AdminDentistTable","handleUpdateTable","handleStatus","datakey","dentists","sortable","singleLine","selectable","HeaderCell","lastLogin","handleUpdateScheduleTable","handleUpdateUnavailableTable","handleUpdateModalUsername","AdminProcedureTable","negative","AdminTable","table","activeTable","handleUpdateDentistTable","handleUpdateProcedureTable","AdminCreateModal","handleOpen","activeModal","column_style","segment_style","Grid","columns","Column","AdminCreateScheduleModal","event","start_add","end_add","day_array","mon","tue","wed","thu","fri","sat","break_array","start","end","daily","custom","repeat","defaultTime","handleRepeat","prevState","handleDaily","handleCustom","handleDays","classList","contains","empty_time","too_short","invalid_time_interval","invalid_time","getMinutes","check","resetState","second_schedule","repeat_buttons","checkbox_style","first_session_style","setMinutes","placeholderText","handleStartAdd","customInput","iconPosition","handleEndAdd","toggle","Divider","horizontal","Checkbox","checked","htmlFor","handleStart","handleEnd","labelPosition","AdminAddDentistModal","checkfirst","checklast","AdminAddProcedureModal","AdminResetSecretaryModal","currentPassword","confirmNewPassword","handleNewPasswordValidation","AdminResetPasswordModal","AdminFreeMemoryModal","handleDeleteOld","AdminEditProcedureModal","procedureID","oldprocedure","Object","Message","AdminDeleteProcedureModal","handleDelete","procedurename","AdminEditDentistModal","AdminDeleteDentistModal","AdminEditScheduleModal","schedule","breaktime","toLowerCase","AdminViewScheduleModal","schedule_table","table_buttons","add_button","table_celled","unavailable","range","unavailableDateID","scrolling","striped","AdminAddUnavailableModal","empty_date","invalid_date","startDate","endDate","setDate","getDate","floated","AdminDeleteUnavailableModal","unavailabledateid","doctorid","AdminDeleteScheduleModal","sched_time","add_time","Admin","handleShowScheduleDimmer","activeScheduleDimmer","handleHideScheduleDimmer","handleShowEditDentistDimmer","activeEditDentistDimmer","handleHideEditDentistDimmer","dentist","sched","editSchedule","docSched","editBreaktime","breakTime","LoginComponent","redirecToPage","history","redirectToDentist","redirectToSecretary","redirectToAdmin","getSession","loginStyles","path","component","Dentist","maxWidth","marginTop","alt","App","exact","Boolean","hostname","routing","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ca95b177.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.275c7690.png\";","import React, { Component } from 'react';\r\nimport {Modal, Icon, Popup, Button,  Form, Input} from 'semantic-ui-react'\r\nimport axios from 'axios';\r\nimport { SemanticToastContainer, toast } from 'react-semantic-toasts';\r\nimport 'react-semantic-toasts/styles/react-semantic-alert.css';\r\n\r\nclass LoginClarification extends Component {\r\n\r\n    constructor (props){\r\n        super(props);\r\n\r\n        this.onClickConfirmButton = this.onClickConfirmButton.bind(this);\r\n        this.onChangeAdminPassword = this.onChangeAdminPassword.bind(this);\r\n        this.onAdminValidation = this.onAdminValidation.bind(this);\r\n        this.closeModal = this.closeModal.bind(this);\r\n        this.state={\r\n            open: false,\r\n            username: '',\r\n            password: '',\r\n            confirmPassword: '',\r\n            adminPassword:''\r\n\r\n        }\r\n\r\n    }\r\n\r\n    closeModal(){\r\n        this.setState({\r\n            open: !this.state.open\r\n        })\r\n    }\r\n\r\n    onChangeAdminPassword(e){\r\n        this.setState({\r\n            adminPassword: e.target.value\r\n        });\r\n    }\r\n\r\n    onClickConfirmButton (){\r\n\r\n        this.state.username = this.props.username;\r\n        this.state.password = this.props.password;\r\n        this.state.confirmPassword = this.props.confirmPassword;\r\n\r\n\r\n        const user ={\r\n            username: this.state.username\r\n        }\r\n\r\n        if(this.state.username.length===0||this.state.password.length===0||this.state.confirmPassword===0){\r\n\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Please fill up all input fields.</p>,\r\n                icon: \"cancel\",\r\n              });\r\n        }\r\n        else\r\n          \r\n        axios.post('admin/validateUsername', user).then(res=>{\r\n           // alert('res: '+ res.data.message);\r\n            if (res.data.message===true){\r\n\r\n                if (this.state.password===this.state.confirmPassword){\r\n\r\n                    if (this.state.password.length>=10&&this.state.password.length<=32){\r\n                        this.setState({\r\n                            open: !this.state.open\r\n                        })\r\n                    }\r\n                    else{\r\n                        toast({\r\n                            type: \"error\",\r\n                            title: \"Error\",\r\n                            description: <p>Password should contain 10 to 32 alphanumeric characters</p>,\r\n                            icon: \"cancel\",\r\n                          });\r\n\r\n                          console.log(this.props.username +\" \"+ this.props.password+\" \"+ this.props.confirmPassword);\r\n                       // alert('Password should contain 10 to 32 alphanumeric characters');\r\n                    }\r\n                }\r\n                else{\r\n                    toast({\r\n                        type: \"error\",\r\n                        title: \"Error\",\r\n                        description: <p>Passwords do not match.</p>,\r\n                        icon: \"cancel\",\r\n                      });\r\n                    \r\n                }\r\n                \r\n               // alert(this.props.username +\" \"+ this.props.password+\" \"+ this.props.confirmPassword);\r\n\r\n            }\r\n            else{\r\n\r\n                toast({\r\n                    type: \"error\",\r\n                    title: \"Error\",\r\n                    description: <p>Username is not found.</p>,\r\n                    icon: \"cancel\",\r\n                  });\r\n               // alert('Not found');\r\n            }\r\n            \r\n        })\r\n\r\n\r\n        \r\n        \r\n    }\r\n\r\n    onAdminValidation(){\r\n\r\n\r\n        const creds ={\r\n            newPassword:this.state.adminPassword\r\n        }\r\n        axios.post('admin/checkCurrentAdminPassword', creds).then\r\n        (res=>{\r\n\r\n\r\n            if (res.data ===true){\r\n\r\n                const user ={\r\n                    username:this.state.username,\r\n                    newPassword:this.state.password\r\n                }\r\n                axios.post('admin/updateAccountPassword', user).then(res=>{\r\n                  //  alert(\"CHANGED: \", res.message);\r\n                  console.log(res.data.message);\r\n                  this.setState({\r\n                    open: !this.state.open\r\n                })\r\n\r\n                this.props.open = false;\r\n\r\n                }).catch((error)=>{\r\n                        //alert(\"Error: \"+ error);\r\n                        console.log(\"Error Status:\"+error.status);\r\n                        console.log(\"Error Code: \"+error.code);\r\n                 });\r\n            }\r\n            else{\r\n                toast({\r\n                    type: \"error\",\r\n                    title: \"Error\",\r\n                    description: <p>Incorrect admin password. Please try again.</p>,\r\n                    icon: \"cancel\",\r\n                  });\r\n\r\n            }\r\n               \r\n           \r\n            \r\n        \r\n        }).catch((error)=>{\r\n           // alert(\"Error: \"+ error);\r\n            console.log(\"Error Status:\"+error.status);\r\n            console.log(\"Error Code: \"+error.code);\r\n        });\r\n\r\n       // alert('passed through');\r\n        \r\n    }\r\n\r\n\r\n    render (){\r\n        let open\r\n        return(\r\n            <div>\r\n                <div className=\"ui right aligned floated labeled icon green button\" id=\"reset-button\" onClick = {this.onClickConfirmButton}>\r\n                            CONFIRM\r\n                            <i className=\"checkmark icon\"></i>\r\n                        </div>\r\n\r\n                 <Modal id=\"login-clarification-modal\" open={this.state.open}centered>\r\n                    <Modal.Header>\r\n                    <div className=\"header\"><i className=\"edit icon\" style={{color: \"white\"}}></i>&nbsp;&nbsp;Reset Password</div>\r\n                    </Modal.Header>\r\n\r\n                 <Modal.Content>\r\n                <div className=\"header\"><i className=\"edit icon\" style={{color: \"white\"}}></i>&nbsp;&nbsp;Reset Password</div>\r\n                    <div className=\"content\">\r\n                        <div className=\"ui form\">\r\n                         <div className=\"required field\" id=\"admin-input-field\">\r\n                            <label>Please input admin password</label>\r\n                            <input type=\"password\" name=\"admin\" id=\"admin-input\" placeholder=\"Admin Password\"value={this.state.adminPassword} onChange={this.onChangeAdminPassword}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"actions\">\r\n                    <div className=\"ui right aligned floated labeled icon green button\" id=\"reset-button-admin\" onClick = {this.onAdminValidation}>\r\n                        CONFIRM\r\n                        <i className=\"checkmark icon\"></i>\r\n                    </div>\r\n                    <div className=\"ui right labeled icon cancel button\" onClick = {this.closeModal}>\r\n                        CANCEL\r\n                        <i className=\"cancel icon\"></i>\r\n                    </div>\r\n                </div>\r\n            \r\n                </Modal.Content>\r\n               \r\n            </Modal>\r\n\r\n\r\n            </div>\r\n           \r\n\r\n            \r\n      \r\n       \r\n       \r\n        );\r\n    }\r\n}\r\n\r\nexport default LoginClarification;","import axios from 'axios';\r\nimport React, { Component } from 'react';\r\nimport {Modal, Icon, Popup, Button,  Form, Input} from 'semantic-ui-react'\r\nimport LoginClarification from '../sign-in/LoginClarification';\r\n//import Logo from './logo.png';\r\n//import Modal from 'react-modal';\r\n//import './loginCSS.css';\r\nimport loginConfirmation from '../sign-in/LoginClarification'\r\n\r\nclass ResetPasswordModalComponent extends Component{\r\n\r\n\r\n    constructor (props){\r\n        super(props);\r\n\r\n        this.onChangeUserName = this.onChangeUserName.bind(this);\r\n        this.onChangePassword = this.onChangePassword.bind(this);\r\n        this.onChangeConfirmPassword = this.onChangeConfirmPassword.bind(this);\r\n        this.onClickForgotButton = this.onClickForgotButton.bind(this);\r\n        this.state={\r\n            open: false,\r\n            username: '',\r\n            password: '',\r\n            confirmPassword: ''\r\n        }\r\n    }\r\n  \r\n\r\n    onChangeUserName(e){\r\n        this.setState({\r\n            username: e.target.value\r\n        });\r\n    }\r\n\r\n    onChangePassword(e){\r\n        this.setState({\r\n            password: e.target.value\r\n        });\r\n    }\r\n\r\n    onChangeConfirmPassword(e){\r\n        this.setState({\r\n            confirmPassword: e.target.value\r\n        });\r\n    }\r\n\r\n\r\n    onClickForgotButton (){\r\n\r\n\r\n        this.setState({\r\n            open: !this.state.open\r\n        });\r\n\r\n\r\n        \r\n    }\r\n\r\n    onSubmitNewPassword(){\r\n\r\n       \r\n        \r\n    }\r\n\r\n    render (){\r\n        let open      \r\n        return(\r\n\r\n            <div>\r\n                <div className=\"ui button\" id=\"forgot\" style={{paddingBottom: \"15px\", textDecoration: \"underline\", backgroundColor: \"transparent\"}}onClick = {this.onClickForgotButton}>Forgot password?</div>\r\n                <Modal id=\"rest-password-modal\" open={this.state.open} centered>\r\n                <Modal.Header>\r\n                <i className=\"edit icon\" style={{color: \"white\"}}></i>&nbsp;&nbsp;Reset Password\r\n                </Modal.Header>\r\n\r\n                <Modal.Content>\r\n                    <div className=\"content\">\r\n                        <div className=\"ui form\">\r\n                            <div className=\"required field\" id=\"reset-username-field\">\r\n                                <label>Username</label>\r\n                                <input type=\"text\" name=\"username\" id=\"reset-username\" placeholder=\"Username\" value={this.state.username} onChange ={this.onChangeUserName}/>\r\n                            </div>\r\n                            <div className=\"required field\" id=\"reset-password-field\">\r\n                                <label>Password</label>\r\n                                    <div data-tooltip=\"Password should contain 10 to 32 alphanumeric characters\" data-position=\"right center\">\r\n                                        <input type=\"password\" name=\"password\" id=\"reset-password\" placeholder=\"Password\" value={this.state.password} onChange={this.onChangePassword}/>\r\n                                    </div>\r\n                            </div>\r\n                            <div className=\"required field\" id=\"reset-confirm-password-field\">\r\n                                <label>Confirm Password</label>\r\n                                    <div data-tooltip=\"Password should contain 10 to 32 alphanumeric characters\" data-position=\"right center\">\r\n                                        <input type=\"password\" name=\"confirmPassword\" id=\"reset-confirm-password\" placeholder=\"Password\" value={this.state.confirmPassword} onChange={this.onChangeConfirmPassword}/>\r\n                                    </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"actions\">\r\n                        <div style ={{left: \"50px\", display: \"inline-block\"}}>\r\n                        <LoginClarification username = {this.state.username} password ={this.state.password} confirmPassword = {this.state.confirmPassword}></LoginClarification>\r\n                        </div>\r\n                        \r\n                        <div className=\"ui right labeled icon cancel button\" onClick = {this.onClickForgotButton} >\r\n                            CANCEL\r\n                            <i className=\"cancel icon\"></i>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                </Modal.Content>\r\n            </Modal>\r\n            \r\n            </div>\r\n            \r\n          \r\n\r\n        );\r\n    }\r\n\r\n}\r\nexport default ResetPasswordModalComponent;","import React, {Component} from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport moment from 'moment';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {faCalendar} from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\n\r\nimport '../dentist_css/pickerStyle.scss'\r\nimport \"react-datepicker/dist/react-datepicker.css\"\r\n\r\nexport default class Picker extends Component {\r\n    \r\n\r\n    handleChangeDate=(date)=>{\r\n        this.props.handleChangeDate(date)\r\n    }\r\n\r\n    disableSunday=(date)=>{\r\n        return moment(date).day() !== 0;\r\n    }\r\n \r\n    render(){\r\n         const{handleOnToday, handleOnPrev, handleOnNext, date, handleChangeDate} = this.props\r\n        return(\r\n            <div class=\"item\">\r\n                <div className=\"picker\">\r\n                    {/* <FontAwesomeIcon icon={faCalendar}  className=\"calendarIcon\"/> */}\r\n                    <DatePicker id=\"datepicker-secretary\"\r\n                        //Fixed for error when intially clicking a date on secretary-header (change selected to moment)\r\n                        selected={moment(date).toDate()}\r\n                        onChange={handleChangeDate}\r\n                        onSelect={handleChangeDate}\r\n                        filterDate={this.disableSunday}\r\n                        \r\n                    />\r\n                </div> \r\n                <div className=\"today\" class=\"ui basic button with tooltip\" data-title=\"Today (SPACEBAR)\"\r\n                    data-content=\"Moves focus date to today\" data-variation=\"basic\" data-position=\"bottom center\"\r\n                    id=\"today\" onClick={handleOnToday} style={{fontWeight:\"bolder\", marginLeft: 30+'px'}}>\r\n                    TODAY\r\n                </div>\r\n                <div class=\"ui icon basic buttons\" style={{marginLeft: 30+'px'}}>\r\n                    <div class=\"ui button with tooltip\" data-title=\"Previous (←)\"\r\n                        data-content=\"Moves focused date to yesterday\" data-position=\"bottom center\" data-inverted=\"\"\r\n                        data-variation=\"basic\" id=\"prev-button\" onClick={handleOnPrev}>\r\n                        <i class=\"angle left icon\"></i>\r\n                    </div>\r\n                    <div class=\"ui button with tooltip\" data-title=\"Next (→)\" data-content=\"Moves focused date to tomorrow\"\r\n                        data-position=\"bottom center\" data-inverted=\"\" data-variation=\"basic\" id=\"next-button\" onClick={handleOnNext}>\r\n                        <i class=\"angle right icon\"></i>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\n","import React, {Component} from 'react';\r\nimport Picker from './dentist-date-picker'\r\nimport {Dropdown, Table} from 'semantic-ui-react'\r\nimport moment from 'moment'\r\nimport axios from 'axios';\r\n\r\n\r\nexport default class SecretaryNavigationbar extends Component{\r\n    handleOnToday =()=>{\r\n        this.props.onToday()\r\n    }\r\n    handleOnPrev =()=>{\r\n        this.props.onPrev()\r\n    }\r\n    handleOnNext =()=>{\r\n        this.props.onNext()\r\n    }\r\n\r\n    handleChangeDate=(date)=>{\r\n        this.props.onChangeDate(date)\r\n    }\r\n\r\n    logout(){\r\n        axios.get('/logout').then(console.log('Logout Successfully'));\r\n        window.location.href =\"/\";\r\n    }\r\n\r\n\r\n    render(){\r\n\r\n        let newDate = Date.parse(this.props.date)\r\n        let formattedDate = moment(newDate).format(\"MMMM D, YYYY\")\r\n\r\n        \r\n        return(\r\n            <div class=\"ui top fixed sticky borderless menu\" id=\"secretary-navigation-bar\" style={{height:65+\"px\"}}>\r\n            <div class=\"item\" id=\"secretary-picker-container\">\r\n                <Picker id=\"secretary-picker\"\r\n                    handleChangeDate ={this.handleChangeDate}\r\n                    handleOnToday ={this.handleOnToday}\r\n                    handleOnPrev={this.handleOnPrev}\r\n                    handleOnNext={this.handleOnNext}\r\n                    date={this.props.date}\r\n\r\n                />\r\n            </div>\r\n            <div class=\"item\" id=\"secretary-date-text-container\">\r\n            <span style={{fontSize:20+'px'}} id=\"secretary-date-text\">{formattedDate}</span>\r\n            </div>\r\n            <div class=\"right borderless menu\" id=\"secretary-rightside\">\r\n                <div class=\"item\" id=\"secretary-logout-container\" onClick={() => this.logout()}>\r\n                    <i id=\"logoutButton\" class=\"large sign out icon link\"></i>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        )\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport {Table} from 'semantic-ui-react'\r\nimport moment from 'moment'\r\n\r\nimport '../dentist_css/dentist-view.css'\r\n\r\nexport default class SecretaryHeader extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state={\r\n            today:this.props.date,\r\n            startOfWeek: this.props.startOfWeek,\r\n            endOfWeek: this.props.endOfWeek,\r\n            days:this.props.daysParent,\r\n            weekUnparsed:this.props.weekUnparsed\r\n\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n    componentDidMount(){\r\n        let newArray=[]\r\n        let backgroundColor ='red'\r\n        let dated=Date.parse(this.state.today)\r\n        let dateded =moment(dated).format(\"MMMM D, YYYY\")\r\n\r\n        for(let i =0; i < this.state.days.length; i++){\r\n            if(this.state.days[i] == dateded){\r\n                newArray.push(<Table.Cell onClick={()=>this.props.onChangeDate(this.state.weekUnparsed[i])} style={{backgroundColor}}>{this.state.days[i]}</Table.Cell>)\r\n            }\r\n            else{\r\n                // newArray.push(<Table.Cell onClick={()=>this.props.onChangeDate(this.state.weekUnparsed[i])} >{this.state.days[i]}</Table.Cell>)\r\n                newArray.push(<Table.Cell onClick={this.props.onChangeDate} >{this.state.days[i]}</Table.Cell>)\r\n            }\r\n        }\r\n        this.setState({\r\n            days:this.state.days,\r\n            weekUnparsed:this.state.weekUnparsed\r\n            \r\n        })\r\n\r\n\r\n\r\n\r\n        \r\n    }\r\n\r\n    componentDidUpdate(){\r\n        if(this.props.date !== this.state.today){   \r\n            let newArray=[]\r\n            let backgroundColor ='red'\r\n            let dated=Date.parse(this.state.today)\r\n            let dateded =moment(dated).format(\"MMMM D, YYYY\")\r\n\r\n            for(let i =0; i < this.state.days.length; i++){\r\n                if(this.state.days[i] == dateded){\r\n                    newArray.push(<Table.Cell onClick={()=>this.props.onChangeDate(this.state.weekUnparsed[i])} style={{backgroundColor}}>{this.state.days[i]}</Table.Cell>)\r\n                }\r\n                else{\r\n                    newArray.push(<Table.Cell onClick={()=>this.props.onChangeDate(this.state.weekUnparsed[i])} >{this.state.days[i]}</Table.Cell>)\r\n                }\r\n            }\r\n            this.setState({\r\n                today: this.props.date,\r\n                startOfWeek: this.props.startOfWeek,\r\n                endOfWeek: this.props.endOfWeek,\r\n                days:this.props.daysParent,\r\n                weekUnparsed:this.props.weekUnparsed,\r\n                \r\n                \r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    hello =(date)=>{\r\n        console.log(date)\r\n        this.setState({\r\n            today: date\r\n        })\r\n    }\r\n\r\n    render(){\r\n        const newArray =[]\r\n        let backgroundColor ='red'\r\n        let newDate=Date.parse(this.state.today)\r\n        let formatted =moment(newDate).format(\"MMMM D, YYYY\")\r\n\r\n        newArray.push(<Table.Cell id='secretary-add-appointment'>\r\n                        </Table.Cell>)\r\n        for(let i =0; i < this.state.days.length; i++){\r\n            if(this.state.days[i] == formatted){\r\n                newArray.push(<Table.Cell id=\"sec-header-child\" onClick={()=>this.props.onChangeDate(this.state.weekUnparsed[i])} style={{backgroundColor}}>{this.state.days[i]}</Table.Cell>)\r\n            }\r\n            else{\r\n                newArray.push(<Table.Cell id=\"sec-header-child\" onClick={()=>this.props.onChangeDate(this.state.weekUnparsed[i])} >{this.state.days[i]}</Table.Cell>)\r\n            }\r\n        }\r\n\r\n        return(\r\n            <Table id=\"SECHEADER\" celled textAlign='center' style={{height:70+'px'}} compact>\r\n                <Table.Body>\r\n                    <Table.Row children={newArray}/>\r\n                    \r\n                </Table.Body>\r\n            </Table>\r\n        )\r\n    }\r\n}","import Axios from 'axios';\r\nimport React, {Component} from 'react';\r\nimport {Tab, Table, TableRow} from 'semantic-ui-react';\r\nimport AppointmentCard from './dentist-appointment-modal'\r\n\r\n/* CSS FILES */\r\nimport '../dentist_css/dentist-view.css'\r\n\r\nclass week_all extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state={\r\n            appointments:this.props.appointments,\r\n            weeks: this.props.week,\r\n        }\r\n\r\n    }\r\n    \r\n\r\n    // componentDidMount(){\r\n    //    const week = {\r\n    //        weeks: this.state.weeks\r\n    //    }\r\n    //     Axios.post('http://localhost:3000/secretary/week_all', week).then(res =>{\r\n    //         return this.setState({\r\n    //             appointments: res.data.data.data\r\n    //         })\r\n            \r\n    //     })\r\n        \r\n    // }\r\n\r\n    componentDidUpdate(){\r\n        if(this.props.week != this.state.weeks){\r\n            console.log(\"Hello\")\r\n            this.props.handleWeekAppointmentUpdate()\r\n            this.setState({\r\n                weeks: this.props.week\r\n            })\r\n        }\r\n    }\r\n    render(){\r\n        console.log(\"prop: \")\r\n        console.log(this.props.week)\r\n        console.log(\"state: \")\r\n        console.log(this.state.weeks)\r\n       return(\r\n            <>\r\n                <Table id=\"table-header-title\" compact>\r\n                    <Table.Header fullWidth>\r\n                        <TableRow textAlign='center'>\r\n                            <Table.Cell>Weekly Appointments</Table.Cell>\r\n                        </TableRow>\r\n                    </Table.Header>\r\n                </Table>\r\n                <Table id='week_all' celled fixed textAlign='center' compact>\r\n                    <Table.Body>\r\n                    {\r\n                        this.props.appointments.map(({slot, weekAppointments}, index)=>{\r\n                            return(\r\n                            <Table.Row key={index} name={'week-all-row-'+index}>\r\n                                <Table.Cell id=\"week-all-time-cell\">{slot}</Table.Cell>\r\n                                {   \r\n                                    weekAppointments.map(({appointments}, index)=>{\r\n                                        return( <Table.Cell id={'week-all-table-cell'} name={'week-all-td-'+index}>\r\n                                                        {\r\n                                                           appointments.map((appointment)=>\r\n                                                                      {/*}  <AppointmentCard id={\"secretary-appointment-card-\" + appointment._id}\r\n                                                                            appointment={appointment}\r\n                                                                            handleWeekAppointmentUpdate={this.props.handleWeekAppointmentUpdate}\r\n                                                        /> */}\r\n                                                            )\r\n                                                        }\r\n                \r\n                                            </Table.Cell>)\r\n                                  })\r\n                                }\r\n                            </Table.Row>\r\n                            )\r\n                        })\r\n                    }\r\n                    </Table.Body>\r\n                </Table>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default week_all\r\n","import React, {Component} from 'react';\r\nimport moment from 'moment';\r\nimport {Modal, Form, Button, Icon, Card} from 'semantic-ui-react'\r\nimport axios from 'axios'\r\nimport { SemanticToastContainer, toast } from 'react-semantic-toasts';\r\nimport 'react-semantic-toasts/styles/react-semantic-alert.css';\r\n//import EditProcMainForm from \"./secretary-edit-appointment-modal-form\"\r\n\r\n\r\n\r\n\r\n\r\nclass EditModal extends Component {\r\n    constructor(props){\r\n    \r\n      super(props);\r\n      \r\n      this.state ={\r\n            appointment: this.props.appointment,\r\n            app_id: this.props.appointment._id,\r\n            firstname: this.props.appointment.firstname,\r\n            lastname: this.props.appointment.lastname,\r\n            procedures: this.props.appointment.process,\r\n            notes: this.props.appointment.notes,\r\n            date: moment(this.props.appointment.date).toDate(),\r\n            doctors: this.props.appointment.doctor,\r\n            patientcontact: this.props.appointment.patientcontact,\r\n            time: moment(this.props.appointment.time, \"h:mm A\").toDate(),\r\n            currentProcs:[],\r\n            currentDocs:[],\r\n            procs:this.props.appointment.process,\r\n            docs:this.props.appointment.doctor,\r\n        open: false,\r\n        secondopen:false,\r\n        step: 1,\r\n      }\r\n      this.setOpen = this.setOpen.bind(this);\r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.handleDate = this.handleDate.bind(this);\r\n      this.handletime = this.handleDate.bind(this);\r\n      this.handleDoctorChange = this.handleDoctorChange.bind(this);\r\n    }\r\n\r\n    \r\n\r\n    componentDidMount(){\r\n\r\n      //Changes back the procedures and doctors to IDs rather than objects\r\n      this.setState({\r\n        procedures:[\r\n          this.state.procedures.map(procedure=>{\r\n            return procedure._id\r\n          })\r\n        ],\r\n        doctors:[\r\n          this.state.doctors.map(doctor=>{\r\n            return doctor._id\r\n          })\r\n        ],\r\n        currentProcs:[\r\n            this.state.procedures.map(procedure=>{\r\n                return procedure.processname\r\n              })\r\n        ],\r\n        currentDocs:[\r\n            this.state.doctors.map(doctor=>{\r\n                return  \"Dr. \"+ doctor.lastname\r\n              })\r\n        ],\r\n            procs:this.props.appointment.process,\r\n            docs:this.props.appointment.doctor,\r\n      })\r\n    }\r\n\r\n    componentDidUpdate(){\r\n      if(this.state.docs !== this.props.appointment.doctor || this.state.procs !== this.props.appointment.process){\r\n        this.handleChangeInEdit()\r\n      }\r\n    }\r\n    handleChangeInEdit=()=>{\r\n      this.setState({\r\n        procedures:[\r\n          this.props.appointment.process.map(procedure=>{\r\n            return procedure._id\r\n          })\r\n        ],\r\n        doctors:[\r\n          this.props.appointment.doctor.map(doctor=>{\r\n            return doctor._id\r\n          })\r\n        ],\r\n        currentProcs:[\r\n            this.props.appointment.process.map(procedure=>{\r\n                return procedure.processname\r\n              })\r\n        ],\r\n        currentDocs:[\r\n            this.props.appointment.doctor.map(doctor=>{\r\n                return  \"Dr. \"+ doctor.lastname\r\n              })\r\n        ],\r\n        procs: this.props.appointment.process,\r\n        docs: this.props.appointment.doctor\r\n      })\r\n    }\r\n\r\n    //function for opening and closing the modal\r\n    handleClose=()=>{\r\n      this.setState({\r\n        appointment: this.props.appointment,\r\n        app_id: this.props.appointment._id,\r\n        firstname: this.props.appointment.firstname,\r\n        lastname: this.props.appointment.lastname,\r\n        procedures: this.props.appointment.process,\r\n        notes: this.props.appointment.notes,\r\n        date: moment(this.props.appointment.date).toDate(),\r\n        doctors: this.props.appointment.doctor,\r\n        patientcontact: this.props.appointment.patientcontact,\r\n        time: moment(this.props.appointment.time, \"h:mm A\").toDate(),\r\n        currentProcs:[],\r\n        currentDocs:[],\r\n        procs:this.props.appointment.process,\r\n        docs:this.props.appointment.doctor,\r\n        open: false,\r\n        step: 1,\r\n        })\r\n        this.handleChangeInEdit();\r\n        setTimeout(() => {\r\n          toast(\r\n              {\r\n                  description: <p>Appointment Creation cancelled</p>,\r\n                  icon: 'check',\r\n                  animation: 'slide up',\r\n                  time:1000,\r\n                  color: 'red'\r\n\r\n              },\r\n              () => console.log('toast closed'),\r\n          );\r\n      }, 1000)\r\n    }\r\n\r\n    setOpen2 =()=>{\r\n      this.setState({\r\n        secondopen: !this.state.secondopen\r\n      })\r\n    }\r\n    setOpen(){\r\n      if(moment(this.state.date).isSame(moment().toDate(), 'day') && moment(this.state.time).isBefore(moment().toDate())){\r\n        console.log(\"1\")\r\n        setTimeout(() => {\r\n          toast(\r\n              {\r\n                  description: <p>Cannot edit past dates</p>,\r\n                  icon: 'clock',\r\n                  animation: 'slide up',\r\n                  time:1000,\r\n                  color: 'red'\r\n  \r\n              },\r\n              () => console.log('toast closed')\r\n          );\r\n          }, 1000)\r\n        this.setState({\r\n            open:false\r\n        })\r\n      }\r\n      else if(moment(this.state.date).isBefore(moment().toDate(), 'day')){\r\n        console.log(\"2\")\r\n            setTimeout(() => {\r\n            toast(\r\n                {\r\n                    description: <p>Cannot edit past dates</p>,\r\n                    icon: 'clock',\r\n                    animation: 'slide up',\r\n                    time:1000,\r\n                    color: 'red'\r\n    \r\n                },\r\n                () => console.log('toast closed')\r\n            );\r\n            }, 1000)\r\n          this.setState({\r\n              open:false\r\n          })\r\n      }\r\n      \r\n      else{\r\n          this.setState({\r\n        open: !this.state.open,\r\n        step : 1\r\n            })\r\n        }\r\n    }\r\n\r\n    //Function for submitting values\r\n    handleChange = input => e =>{\r\n      this.setState({\r\n        [input]: e.target.value\r\n      })\r\n      console.log(e.target.value)\r\n    }\r\n    handleSubmit=e=>{\r\n      e.preventDefault()\r\n      const appointment = {\r\n        appointmentID: this.state.app_id,\r\n        firstname:this.state.firstname,\r\n        lastname:this.state.lastname,\r\n        patientcontact: this.state.patientcontact,\r\n        procedures: this.state.procedures,\r\n        notes:this.state.notes,\r\n        date:this.state.date,\r\n        time:this.state.time,\r\n        doctors:this.state.doctors,\r\n      }\r\n\r\n      axios.post('http://localhost:3000/secretary/edit', appointment).then(res => {\r\n        console.log(res.data)\r\n        this.props.handleWeekAppointmentUpdate();\r\n      });\r\n      setTimeout(() => {\r\n        toast(\r\n            {\r\n                description: <p>Appointment Created</p>,\r\n                icon: 'check',\r\n                animation: 'slide up',\r\n                time:1000,\r\n                color: 'green'\r\n\r\n            },\r\n            () => console.log('toast closed'),\r\n\r\n        );\r\n    }, 1000)\r\n    \r\n    this.setOpen();\r\n    this.setOpen2();\r\n    \r\n    } \r\n\r\n    deleteAppointment=()=>{\r\n      const appID = {\r\n        appointmentID : this.state.app_id\r\n      }\r\n      axios.post('/secretary/delete', appID).then(res=>{\r\n        console.log(res.data)\r\n        this.props.handleWeekAppointmentUpdate()\r\n      });\r\n      setTimeout(() => {\r\n        toast(\r\n            {\r\n                description: <p>Appointment Deleted</p>,\r\n                icon: 'check',\r\n                animation: 'slide up',\r\n                time:1000,\r\n                color: 'green'\r\n\r\n            },\r\n            () => console.log('toast closed'),\r\n        );\r\n    }, 1000)\r\n      this.setOpen();\r\n      this.setOpen2();\r\n      \r\n    }\r\n\r\n    //Datepicker change\r\n    handleDate(date){\r\n      this.setState({\r\n        date:date\r\n      })\r\n\r\n      console.log(date)\r\n     \r\n    }\r\n\r\n    handleDoctorChange =(e, {value}) => {\r\n        this.setState({doctors:value})\r\n        console.log(value)\r\n\r\n      }\r\n\r\n      handleProcessChange =(e, {value}) => {\r\n        this.setState({procedures:value})\r\n        console.log(value)\r\n\r\n      }\r\n\r\n    //Step changes in changing the prop\r\n    //Proceeds to next step\r\n    nextStep =()=>{\r\n      const {step} = this.state;\r\n      this.setState({\r\n          step: step+1\r\n      });\r\n    }\r\n\r\n    //Proceeds to previous step\r\n    prevStep =()=>{\r\n        const {step} = this.state;\r\n        this.setState({\r\n            step: step-1\r\n        });\r\n    }\r\n    handleTime=(time)=>{\r\n      this.setState({\r\n        time:time\r\n      })\r\n      console.log(time)\r\n    }\r\n\r\n  \r\n    render(){\r\n      const {firstname, lastname, patientcontact, procedures, notes, date, time, doctors} = this.state;\r\n      const values = {firstname, lastname, patientcontact, procedures, notes, date, time, doctors}\r\n      let button;\r\n      let button2;\r\n      let button3;\r\n      if(this.state.step === 1){\r\n        button = <Button onClick={this.nextStep} type='button'>Next</Button>\r\n      } else{\r\n        button = <Button type=\"button\" color=\"green\" onClick={this.handleSubmit}>Submit</Button>\r\n        button2 = <Button onClick={this.prevStep}>Back</Button>\r\n        button3 = <Button>Delete</Button>\r\n      }\r\n\r\n      if(this.state.date === moment().toDate()){\r\n          console.log(\"I won't let you edit this\")\r\n      }\r\n      else{\r\n        return (\r\n            <>\r\n            <SemanticToastContainer position='top-center'></SemanticToastContainer>\r\n            <Modal\r\n                onClose={this.setOpen}\r\n                onOpen={this.setOpen}\r\n                open={this.state.open}\r\n                as={Form}\r\n                onSubmit={this.handleSubmit}\r\n                trigger={\r\n                    <Card> \r\n                    <Card.Header id={this.props.appointment.firstname+\"_\"+this.props.appointment.lastname}>\r\n                        {this.props.appointment.firstname+\" \"+this.props.appointment.lastname}\r\n                    </Card.Header>\r\n                </Card>\r\n                }\r\n            >\r\n            \r\n            <Modal.Content>\r\n                   {/*} <EditProcMainForm\r\n                        handleChange = {this.handleChange}\r\n                        handleDoctorChange = {this.handleDoctorChange}\r\n                        handleProcessChange = {this.handleProcessChange}\r\n                        handleDate = {this.handleDate}\r\n                        handleTime = {this.handleTime}\r\n                        setOpen = {this.setOpen}\r\n                        prevStep = {this.prevStep}\r\n                        nextStep = {this.nextStep}\r\n                        step = {this.state.step}\r\n                        values={values}\r\n\r\n            /> */}\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button onClick={this.handleClose}>Cancel</Button>\r\n                {button2}\r\n                {button3}\r\n                {button}\r\n                \r\n            </Modal.Actions>\r\n\r\n                <Modal\r\n                    closeIcon\r\n                    onClose={this.setOpen2}\r\n                    open={this.state.secondopen}\r\n                    size=\"small\"\r\n                    // as={Form}\r\n                    // // onSubmit={this.hello}\r\n                    // trigger={<Button>Delete</Button>}\r\n                >\r\n                    <Modal.Header as={'h2'}>\r\n                      <p>Confirm Delete</p>\r\n                    </Modal.Header>\r\n                    <Modal.Content>\r\n                      <p>  Are you sure you want to delete this appointment?</p>\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                        <Button onClick={this.setOpen2}>\r\n                            <Icon name=\"cancel\"/>\r\n                            Cancel\r\n                        </Button>\r\n                        <Button onClick={this.deleteAppointment} color=\"green\">\r\n                            <Icon name=\"check\"/>\r\n                            Confirm\r\n                        </Button>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n            </Modal>\r\n            </>\r\n            \r\n            \r\n        )\r\n        }\r\n    }\r\n  }\r\nexport default EditModal","import React, { Component } from 'react';\r\nimport Navbar from '../module/dentist-navigationbar'\r\n//import Logo from './logo.png';\r\n//import loginStyles from './loginCSS.css';\r\nimport axios from 'axios';\r\n//import Modal from 'react-modal';\r\nimport {Grid, Header, Dropdown} from \"semantic-ui-react\"\r\nimport moment from 'moment'\r\nimport { SemanticToastContainer} from 'react-semantic-toasts';\r\nimport DentistHeader from \"../module/dentist-header\"\r\nimport '../dentist_css/dentist-view.css'\r\nimport DentistTable from \"../module/dentist-week-all\"\r\nimport DayAll from \"../module/dentist-day-all\"\r\n\r\n\r\n\r\nclass DentistPageComponent extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        \r\n            let dayStart = moment(moment().toDate()).startOf('week')\r\n            let dayEnd = moment(moment().toDate()).endOf('week')\r\n            let numdays=[]\r\n            let unparsed=[]\r\n            \r\n            while(dayStart <= dayEnd){\r\n                unparsed.push(dayStart.toDate().toString())\r\n                let newDate=Date.parse(dayStart)\r\n                let formatted=moment(newDate).format(\"MMMM D, YYYY\")\r\n                numdays.push(formatted);\r\n                dayStart = dayStart.clone().add(1, 'd');\r\n            }\r\n\r\n        this.onChangeDate = this.onChangeDate.bind(this)\r\n        this.handleWeekAppointmentUpdate = this.handleWeekAppointmentUpdate.bind(this)\r\n        this.handleDayAppointmentUpdate = this.handleDayAppointmentUpdate.bind(this)\r\n        this.handleWeekAvailable = this.handleWeekAvailable.bind(this)\r\n\r\n\r\n            this.state = {\r\n                doctors:[],\r\n                weekAppointments:[],\r\n                dayAppointments:[],\r\n                view:'day',\r\n                filter:'appointments',\r\n                date: moment().toDate(), \r\n                startOfWeek: moment(moment().toDate()).startOf('week'),\r\n                endOfWeek: moment(moment().toDate()).endOf('week'),\r\n                days:numdays,\r\n                weekUnparsed:unparsed,\r\n                weekAvailable:[],\r\n                doctorID:''\r\n    \r\n            }\r\n\r\n        this.handleDayAppointmentUpdate()\r\n        this.handleWeekAppointmentUpdate()\r\n        this.handleWeekAvailable()\r\n        \r\n    }\r\n\r\n    componentDidMount(){\r\n        \r\n        axios.get('http://localhost:3000/dentist/getCurrentDentist')\r\n        .then(response => {\r\n            console.log(response.data);\r\n            this.setState({   \r\n                   \r\n                appID: response.data._id\r\n                \r\n            })\r\n\r\n            console.log(\"KEY: \"+this.state.appID);\r\n\r\n\r\n            const doctor ={\r\n                appID: this.state.appID\r\n            }\r\n    \r\n            console.log(doctor);\r\n    \r\n            axios.post('http://localhost:3000/dentist/getAppointmentByDoctor', doctor)\r\n            .then(response=>{\r\n                console.log(\"GOT APPOINTMENT: \"+response.data)\r\n                this.setState({\r\n                    appointments: response.data,\r\n                })\r\n            })\r\n            .catch((error)=>{\r\n                console.log(error)\r\n        })\r\n        })\r\n   \r\n           \r\n    }\r\n\r\n    onWeek=(date)=>{\r\n            \r\n        let dayStart = moment(date).startOf('week')\r\n        let dayEnd = moment(date).endOf('week')\r\n        let numdays=[]\r\n        let unparsed=[]\r\n        \r\n        while(dayStart <= dayEnd){\r\n            unparsed.push(dayStart.toDate())\r\n            let newDate=Date.parse(dayStart)\r\n            let formatted=moment(newDate).format(\"MMMM D, YYYY\")\r\n            numdays.push(formatted);\r\n            dayStart = dayStart.clone().add(1, 'd');\r\n        }\r\n\r\n        this.setState({\r\n            startOfWeek: dayStart,\r\n            endOfWeek: dayEnd,\r\n            days:numdays,\r\n            weekUnparsed:unparsed\r\n        })\r\n    \r\n        \r\n}\r\n\r\n    \r\n    //changes the current date\r\n    onChangeDate(date){\r\n        console.log('changing date to: ', date);\r\n        if(date == null){\r\n            this.setState({\r\n                date: moment().toDate()\r\n            });\r\n        }else{\r\n            this.onWeek(date)\r\n            this.setState({\r\n                date:date,\r\n            })\r\n            \r\n        }\r\n    }\r\n\r\n    onChangeFilter=(e, {name, value})=>{\r\n        console.log(\"Selecting Filter...\")\r\n        this.setState({\r\n            [name]:value\r\n        })\r\n    }\r\n\r\n    onChangeView=(e, {name, value})=>{\r\n        this.setState({\r\n          [name]:value\r\n        })\r\n        console.log(value)\r\n      }\r\n    onToday= () =>{\r\n        \r\n        console.log('Changing date to today');\r\n        this.setState({\r\n            date: moment().toDate()\r\n        })\r\n        this.onWeek(moment().toDate())\r\n        \r\n    }\r\n    onPrev=()=>{\r\n        \r\n        let prev_date = moment(this.state.date).clone().subtract(1, 'day').toDate()\r\n        console.log('change to: ', prev_date)\r\n        this.setState({\r\n            date: prev_date\r\n        })\r\n        this.onWeek(prev_date)\r\n        \r\n    }\r\n\r\n    onNext=()=>{\r\n        \r\n        let next_date = moment(this.state.date).clone().add(1, 'day').toDate()\r\n        console.log('change to: ', next_date)\r\n        this.setState({\r\n            date: next_date\r\n        })\r\n        this.onWeek(next_date)\r\n        \r\n    }\r\n\r\n\r\n    handleWeekAppointmentUpdate(){\r\n        console.log(\"Updating Week-all...\")\r\n\r\n        console.log(\"WEEK UNPARSED:  \"+ this.state.weekUnparsed);\r\n        const week = {\r\n            date: this.state.weekUnparsed\r\n        }\r\n        \r\n        axios.post('http://localhost:3000/dentist/weekly_view', week).then(res =>{\r\n\r\n            console.log('RES: '+res.data.data.data);\r\n            this.setState({\r\n                weekAppointments: res.data.data.data\r\n            })\r\n            console.log(\"Week-all Data: \")\r\n            console.log(\"CHECK: \"+res.data.data.data)\r\n        })\r\n   }\r\n\r\n   handleDayAppointmentUpdate(){\r\n       console.log(\"DayUpdate\")\r\n        const day = {\r\n            date: this.state.date\r\n        }\r\n        axios.post('http://localhost:3000/secretary/day_all', day).then(res =>{\r\n            \r\n            this.setState({\r\n                dayAppointments: res.data.data.data\r\n            })\r\n            console.log(\"Day-all Data\")\r\n            console.log(res.data.data.data)\r\n            \r\n        })\r\n        \r\n        \r\n     \r\n     }\r\n\r\n     handleWeekAvailable(){\r\n        console.log(\"Updating Availability...\")\r\n        const week = {\r\n            weeks: this.state.weekUnparsed\r\n        }\r\n        console.log(\"Current week\")\r\n        console.log(this.state.weekUnparsed)\r\n        axios.post(\"http://localhost:3000/secretary/availabilityAll\", week).then(res=>{\r\n            this.setState({\r\n                weekAvailable: res.data.data\r\n            })\r\n            console.log(\"WeekAvailable Data: \")\r\n            console.log(res.data.data)\r\n        })\r\n        \r\n       \r\n    }\r\n\r\n    render(){\r\n\r\n        const filter =[\r\n            {text:\"APPOINTMENTS\", key:\"appointments\", value:\"appointments\"},\r\n            {text:\"AVAILABILITY\", key:\"availability\", value:\"availability\"},\r\n            <Dropdown selection options={this.state.doctors} onChange={this.onChangeFilter} name='filter'>\r\n\r\n            </Dropdown>\r\n\r\n        ]\r\n\r\n        const viewer=[\r\n            {text:\"DAY\", key:\"day\", value:\"day\"},\r\n            {text:\"WEEK\", key:\"week\", value:\"week\"}\r\n        ]\r\n        \r\n        let currView;\r\n\r\n        console.log(\"Changing to week Appointment table...\")\r\n            currView = <DentistTable \r\n                            week={this.state.weekUnparsed}\r\n                            appointments={this.state.weekAppointments}\r\n                            handleWeekAppointmentUpdate={this.handleWeekAppointmentUpdate}\r\n                        >\r\n                        </DentistTable>\r\n\r\n\r\n\r\n\r\n        return(\r\n\r\n\r\n            <div >\r\n                <SemanticToastContainer position='top-center'></SemanticToastContainer>\r\n                <Header id='secretary_header_container' content={\r\n                    <Navbar id='secretary_navbar'\r\n                        // doctors={doctors}\r\n                        // views={views}\r\n                        onChangeDate={this.onChangeDate}\r\n                        onPrev={this.onPrev}\r\n                        onNext={this.onNext}\r\n                        onToday={this.onToday}\r\n                        onChangeView={this.onChangeView}\r\n                        date={this.state.date}\r\n                        filter={this.state.filter}\r\n                        filters={filter}\r\n                        viewer={viewer}\r\n                        doctors={this.state.doctors}\r\n                        onChangeFilter={this.onChangeFilter}\r\n                    />\r\n                }\r\n                    style={{height: 65+'px'}}/>\r\n                <DentistHeader id='secretary_dateHeader'\r\n                    date={this.state.date}\r\n                    onChangeDate={this.onChangeDate}\r\n                    startOfWeek={this.state.startOfWeek}\r\n                    endOfWeek={this.state.endOfWeek}\r\n                    daysParent={this.state.days}\r\n                    weekUnparsed={this.state.weekUnparsed}\r\n                    weekLength={this.state.days.length}\r\n                    handleWeekAppointmentUpdate={this.handleWeekAppointmentUpdate}\r\n                    handleDayAppointmentUpdate={this.handleDayAppointmentUpdate}\r\n                    handleWeekAvailable={this.handleWeekAvailable}\r\n\r\n                ></DentistHeader>\r\n                 <div style={{height: 840+'px', margin:0+'px', overflowY:\"auto\"}}>\r\n                {currView}\r\n                </div>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default DentistPageComponent;","import React, {Component} from 'react';\r\nimport moment from 'moment';\r\nimport {Modal, Form, Button, Icon, Card} from 'semantic-ui-react'\r\nimport axios from 'axios'\r\nimport { SemanticToastContainer, toast } from 'react-semantic-toasts';\r\nimport 'react-semantic-toasts/styles/react-semantic-alert.css';\r\n//import EditProcMainForm from \"./dentist-appointment-modal-form\"\r\nimport '../dentist_css/dentist-view.css'\r\n\r\n\r\n\r\n\r\n\r\nexport default class EditModal extends Component {\r\n    constructor(props){\r\n    \r\n      super(props);\r\n      \r\n      this.state ={\r\n          appointment: this.props.appointment,\r\n            app_id: this.props.appointment._id,\r\n            firstname: this.props.appointment.firstname,\r\n            lastname: this.props.appointment.lastname,\r\n            procedures: this.props.appointment.process,\r\n            notes: this.props.appointment.notes,\r\n            date: moment(this.props.appointment.date).toDate(),\r\n            doctors: this.props.appointment.doctor,\r\n            patientcontact: this.props.appointment.patientcontact,\r\n            time: moment(this.props.appointment.time, \"h:mm A\").toDate(),\r\n            currentProcs:[],\r\n            currentDocs:[],\r\n            procs:this.props.appointment.process,\r\n            docs:this.props.appointment.doctor,\r\n            error: {\r\n              firstname: false,\r\n              lastname: false,\r\n              username: false,\r\n              password: false,\r\n              patientcontact: false,\r\n              time: false,\r\n              date:false,\r\n              doctors: false,\r\n              procedures: false\r\n    \r\n          },\r\n        open: false,\r\n        secondopen:false,\r\n        step: 1,\r\n      }\r\n      this.setOpen = this.setOpen.bind(this);\r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.handleDate = this.handleDate.bind(this);\r\n      this.handletime = this.handleDate.bind(this);\r\n      this.handleDoctorChange = this.handleDoctorChange.bind(this);\r\n    }\r\n\r\n    \r\n\r\n    componentDidMount(){\r\n      //Changes back the procedures and doctors to IDs rather than objects\r\n      this.setState({\r\n        docs: this.state.doctors,\r\n        procs: this.state.procedures,\r\n        procedures:[\r\n          this.state.procedures.map(procedure=>{\r\n            return procedure._id\r\n          })\r\n        ],\r\n        doctors:[\r\n          this.state.doctors.map(doctor=>{\r\n            return doctor._id\r\n          })\r\n        ],\r\n        currentProcs:[\r\n            this.state.procedures.map(procedure=>{\r\n                return procedure.processname\r\n              })\r\n        ],\r\n        currentDocs:[\r\n            this.state.doctors.map(doctor=>{\r\n                return  \"Dr. \"+ doctor.lastname\r\n              })\r\n        ]\r\n      })\r\n\r\n      \r\n\r\n    }\r\n\r\n    componentDidUpdate(){\r\n      if(this.state.procs !== this.props.appointment.process){\r\n          this.setState({\r\n        procedures:[\r\n          this.props.appointment.process.map(procedure=>{\r\n            return procedure._id\r\n          })\r\n        ],\r\n        doctors:[\r\n          this.props.appointment.doctor.map(doctor=>{\r\n            return doctor._id\r\n          })\r\n        ],\r\n        currentProcs:[\r\n            this.props.appointment.process.map(procedure=>{\r\n                return procedure.processname\r\n              })\r\n        ],\r\n        currentDocs:[\r\n            this.props.appointment.doctor.map(doctor=>{\r\n                return  \"Dr. \"+ doctor.lastname\r\n              })\r\n        ],\r\n        procs: this.props.appointment.process,\r\n        docs: this.props.appointment.doctor\r\n\r\n      })\r\n      }\r\n      \r\n      \r\n    }\r\n\r\n\r\n    handleValidation=()=>{\r\n      const checkfirst = /^[a-z A-Z]+$/;\r\n      const checklast = /^[a-z A-Z.\\-_]+$/;\r\n      const checkcontact = /^[+-]?\\d{7,12}$/;\r\n\r\n      let firstname = this.state.firstname.trim();\r\n      let lastname = this.state.lastname.trim();\r\n      let patientcontact = this.state.patientcontact.trim();\r\n      let procedures = this.state.procedures.filter(function(el){return el;});\r\n      let date = this.state.date;\r\n      let time = this.state.time;\r\n      let doctors = this.state.doctors.filter(function(el){return el;});\r\n\r\n      let error = this.state.error;\r\n      let formIsValid = true;\r\n\r\n      console.log(\"Procedures num: \"+procedures.toString())\r\n      console.log(\"Doctors num: \"+doctors.toString())\r\n\r\n      if(moment(moment(time, \"h:mm A\").toDate()).isBefore(moment().toDate()) && moment(date).isSame(moment().toDate(), 'day')){\r\n          error['time']= true;\r\n          toast({\r\n            type: \"error\",\r\n            title: \"Error\",\r\n            description: <p>Please input valid time</p>,\r\n            icon: \"cancel\",\r\n          });\r\n          formIsValid = false;\r\n      }\r\n      if(firstname === \"\"|| !firstname.match(checkfirst)){\r\n        error['firstname']= true;\r\n        toast({\r\n          type: \"error\",\r\n          title: \"Error\",\r\n          description: <p>Please input a valid firstname</p>,\r\n          icon: \"cancel\",\r\n        });\r\n        formIsValid = false;\r\n\r\n      } else if( firstname.length < 2){\r\n        error['firstname'] = true;\r\n        toast({\r\n          type: \"error\",\r\n          title: \"Error\",\r\n          description: <p>Firstname is too short</p>,\r\n          icon: \"cancel\",\r\n        });\r\n        formIsValid = false;\r\n      }\r\n      if(lastname ===  \"\"|| !lastname.match(checklast)){\r\n        error[\"lastname\"] = true;\r\n        toast({\r\n          type: \"error\",\r\n          title: \"Error\",\r\n          description: <p>Please input a valid lastname</p>,\r\n          icon: \"cancel\",\r\n        });\r\n        formIsValid = false;\r\n      } else if(lastname.length < 2){\r\n        error[\"lastname\"] = true;\r\n        toast({\r\n            type: \"error\",\r\n            title: \"Error\",\r\n            description: <p>Lastname is too short</p>,\r\n            icon: \"cancel\",\r\n        });\r\n        formIsValid = false;\r\n      }\r\n\r\n      if(patientcontact === \"\" || !patientcontact.match(checkcontact)){\r\n        error['patientcontact']= true;\r\n        toast({\r\n          type: \"error\",\r\n          title: \"Error\",\r\n          description: <p>Please input a valid contact number</p>,\r\n          icon: \"cancel\",\r\n        });\r\n        formIsValid = false;\r\n      }\r\n\r\n      if(procedures.length < 1 || procedures === null){\r\n        error['procedures']= true;\r\n        toast({\r\n          type: \"error\",\r\n          title: \"Error\",\r\n          description: <p>Must have at least 1 procedure</p>,\r\n          icon: \"cancel\",\r\n        });\r\n        formIsValid = false;\r\n      }\r\n\r\n      if(doctors.length < 1 || doctors === null){\r\n        error['doctors']= true;\r\n        toast({\r\n          type: \"error\",\r\n          title: \"Error\",\r\n          description: <p>Must have at least 1 doctor</p>,\r\n          icon: \"cancel\",\r\n        });\r\n        formIsValid = false;\r\n      }\r\n\r\n      \r\n      \r\n        return formIsValid\r\n\r\n\r\n    } \r\n\r\n    handleChangeInEdit=()=>{\r\n      this.setState({\r\n        procedures:[\r\n          this.props.appointment.process.map(procedure=>{\r\n            return procedure._id\r\n          })\r\n        ],\r\n        doctors:[\r\n          this.props.appointment.doctor.map(doctor=>{\r\n            return doctor._id\r\n          })\r\n        ],\r\n        currentProcs:[\r\n            this.props.appointment.process.map(procedure=>{\r\n                return procedure.processname\r\n              })\r\n        ],\r\n        currentDocs:[\r\n            this.props.appointment.doctor.map(doctor=>{\r\n                return  \"Dr. \"+ doctor.lastname\r\n              })\r\n        ],\r\n        procs: this.props.appointment.process,\r\n        docs: this.props.appointment.doctor\r\n\r\n      })\r\n    }\r\n\r\n\r\n    //function for opening and closing the modal\r\n    handleClose=()=>{\r\n      this.setState({\r\n            appointment: this.props.appointment,\r\n            app_id: this.props.appointment._id,\r\n            firstname: this.props.appointment.firstname,\r\n            lastname: this.props.appointment.lastname,\r\n            procedures: this.props.appointment.process,\r\n            notes: this.props.appointment.notes,\r\n            date: moment(this.props.appointment.date).toDate(),\r\n            doctors: this.props.appointment.doctor,\r\n            patientcontact: this.props.appointment.patientcontact,\r\n            time: moment(this.props.appointment.time, \"h:mm A\").toDate(),\r\n            currentProcs:[],\r\n            currentDocs:[],\r\n            procs:this.props.appointment.process,\r\n            docs:this.props.appointment.doctor,\r\n            open: false,\r\n            step: 1,\r\n      })\r\n      this.handleChangeInEdit();\r\n      setTimeout(() => {\r\n        toast(\r\n            {\r\n                description: <p>Appointment Creation cancelled</p>,\r\n                icon: 'check',\r\n                animation: 'slide up',\r\n                time:1000,\r\n                color: 'red'\r\n\r\n            },\r\n            () => console.log('toast closed'),\r\n        );\r\n    }, 1000)\r\n    }\r\n\r\n    \r\n\r\n    setOpen2 =()=>{\r\n      this.setState({\r\n        secondopen: !this.state.secondopen\r\n      })\r\n    }\r\n\r\n\r\n    setOpen(){\r\n\r\n      if(moment(this.state.date).isSame(moment().toDate(), 'day') && moment(this.state.time).isBefore(moment().toDate())){\r\n        console.log(\"1\")\r\n        setTimeout(() => {\r\n          toast(\r\n              {\r\n                  description: <p>Cannot edit past dates</p>,\r\n                  icon: 'clock',\r\n                  animation: 'slide up',\r\n                  time:1000,\r\n                  color: 'red'\r\n  \r\n              },\r\n              () => console.log('toast closed')\r\n          );\r\n          }, 1000)\r\n        this.setState({\r\n            open:false\r\n        })\r\n      }\r\n      else if(moment(this.state.date).isBefore(moment().toDate(), 'day')){\r\n        console.log(\"2\")\r\n            setTimeout(() => {\r\n            toast(\r\n                {\r\n                    description: <p>Cannot edit past dates</p>,\r\n                    icon: 'clock',\r\n                    animation: 'slide up',\r\n                    time:1000,\r\n                    color: 'red'\r\n    \r\n                },\r\n                () => console.log('toast closed')\r\n            );\r\n            }, 1000)\r\n          this.setState({\r\n              open:false\r\n          })\r\n      }\r\n      \r\n      else{\r\n          this.setState({\r\n        open: !this.state.open,\r\n        step : 1\r\n            })\r\n        }\r\n      \r\n    }\r\n\r\n    //Function for submitting values\r\n    handleChange = input => e =>{\r\n      this.setState({\r\n        [input]: e.target.value\r\n      })\r\n      console.log(e.target.value)\r\n    }\r\n    handleSubmit=(e)=>{\r\n      \r\n      e.preventDefault()\r\n      if(this.handleValidation()){\r\n          const appointment = {\r\n          appointmentID: this.state.app_id,\r\n          firstname:this.state.firstname,\r\n          lastname:this.state.lastname,\r\n          patientcontact: this.state.patientcontact,\r\n          procedures: this.state.procedures,\r\n          notes:this.state.notes,\r\n          date:this.state.date,\r\n          time:this.state.time,\r\n          doctors:this.state.doctors,\r\n        }\r\n\r\n        axios.post('http://localhost:3000/secretary/edit', appointment).then(res => {\r\n          console.log(res.data)\r\n          this.props.handleDayAppointmentUpdate()\r\n        \r\n        });\r\n        setTimeout(() => {\r\n          toast(\r\n              {\r\n                  description: <p>Appointment Updated</p>,\r\n                  icon: 'check',\r\n                  animation: 'slide up',\r\n                  time:1000,\r\n                  color: 'green'\r\n\r\n              },\r\n              () => console.log('toast closed'),\r\n          );\r\n      }, 1000)\r\n        this.setOpen();\r\n    }else{\r\n      toast({\r\n        type: 'error',\r\n        title: 'Error',\r\n        description: <p>Invalid Appointment</p>,\r\n        icon: \"cancel\"\r\n      })\r\n    }\r\n      \r\n    }\r\n    \r\n    deleteAppointment=()=>{\r\n      console.log(\"Deleting...\")\r\n      const appID = {\r\n        appointmentID : this.state.app_id\r\n      }\r\n      axios.post('/secretary/delete', appID).then(res=>{\r\n        console.log(res.data)\r\n        this.props.handleDayAppointmentUpdate()\r\n      });\r\n      setTimeout(() => {\r\n        toast(\r\n            {\r\n                description: <p>Appointment Deleted</p>,\r\n                icon: 'check',\r\n                animation: 'slide up',\r\n                time:1000,\r\n                color: 'green'\r\n\r\n            },\r\n            () => console.log('toast closed'),\r\n        );\r\n    }, 1000)\r\n      this.setOpen();\r\n      this.setOpen2();\r\n      \r\n    }\r\n\r\n    //Datepicker change\r\n    handleDate(date){\r\n      this.setState({\r\n        date:date\r\n      })\r\n\r\n      console.log(date)\r\n     \r\n    }\r\n\r\n    handleDoctorChange =(e, {value}) => {\r\n        this.setState({doctors:value})\r\n        console.log(value)\r\n\r\n      }\r\n\r\n      handleProcessChange =(e, {value}) => {\r\n        this.setState({procedures:value})\r\n        console.log(value)\r\n\r\n      }\r\n\r\n    //Step changes in changing the prop\r\n    //Proceeds to next step\r\n    nextStep =()=>{\r\n      const {step} = this.state;\r\n      this.setState({\r\n          step: step+1\r\n      });\r\n    }\r\n\r\n    //Proceeds to previous step\r\n    prevStep =()=>{\r\n        const {step} = this.state;\r\n        this.setState({\r\n            step: step-1\r\n        });\r\n    }\r\n    handleTime=(time)=>{\r\n      this.setState({\r\n        time:time\r\n      })\r\n      console.log(time)\r\n    }\r\n\r\n  \r\n    render(){\r\n      const {firstname, lastname, patientcontact, procedures, notes, date, time, doctors, error} = this.state;\r\n      const values = {firstname, lastname, patientcontact, procedures, notes, date, time, doctors, error}\r\n      let button;\r\n      let button2;\r\n      let button3;\r\n      if(this.state.step === 1){\r\n        button = <Button onClick={this.nextStep} type='button'>Next</Button>\r\n      } else{\r\n        button = <Button type=\"button\" color=\"green\" onClick={this.handleSubmit}>Submit</Button>\r\n        button2 = <Button onClick={this.prevStep}>Back</Button>\r\n        button3 = <Button onClick={this.setOpen2} color=\"red\"><Icon name=\"trash\"/>Delete</Button>\r\n      }\r\n\r\n        return (\r\n            <>\r\n            <SemanticToastContainer position='top-center'></SemanticToastContainer>\r\n            <Modal\r\n                onClose={this.setOpen}\r\n                onOpen={this.setOpen}\r\n                open={this.state.open}\r\n                as={Form}\r\n                // onSubmit={this.handleSubmit}\r\n                trigger={\r\n                    <Card fluid id=\"secretary-card-day\"> \r\n                        <Card.Header>\r\n                            {this.props.appointment.firstname+\" \"+this.props.appointment.lastname}\r\n                        </Card.Header>\r\n                        <Card.Content>\r\n                            <span className=\"secretary-card-day-content\">🦷: {this.state.currentProcs.join(\", \")}</span><br/>\r\n                            <span className=\"secretary-card-day-content\">📱: {patientcontact}</span><br/>\r\n                            <span className=\"secretary-card-day-content\">👨‍⚕️: {this.state.currentDocs.join(\", \")}</span>\r\n                        </Card.Content>\r\n                    </Card>\r\n                }\r\n            >\r\n            \r\n            <Modal.Content>\r\n                  {/*}  <EditProcMainForm\r\n                        handleChange = {this.handleChange}\r\n                        handleDoctorChange = {this.handleDoctorChange}\r\n                        handleProcessChange = {this.handleProcessChange}\r\n                        handleDate = {this.handleDate}\r\n                        handleTime = {this.handleTime}\r\n                        setOpen = {this.setOpen}\r\n                        prevStep = {this.prevStep}\r\n                        nextStep = {this.nextStep}\r\n                        step = {this.state.step}\r\n                        values={values}\r\n\r\n            />*/}\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button onClick={this.handleClose}>Cancel</Button>\r\n                {button2}\r\n                {button3}\r\n                {button}\r\n\r\n                \r\n            </Modal.Actions>\r\n\r\n              <Modal\r\n                    closeIcon\r\n                    onClose={this.setOpen2}\r\n                    open={this.state.secondopen}\r\n                    size=\"small\"\r\n                    // as={Form}\r\n                    // // onSubmit={this.hello}\r\n                    // trigger={<Button>Delete</Button>}\r\n                >\r\n                    <Modal.Header as={'h2'}>\r\n                      <p>Confirm Delete</p>\r\n                    </Modal.Header>\r\n                    <Modal.Content>\r\n                      <p>  Are you sure you want to delete this appointment?</p>\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                        <Button onClick={this.setOpen2}>\r\n                            <Icon name=\"cancel\"/>\r\n                            Cancel\r\n                        </Button>\r\n                        <Button onClick={this.deleteAppointment} color=\"green\">\r\n                            <Icon name=\"check\"/>\r\n                            Confirm\r\n                        </Button>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n            </Modal>\r\n            </>\r\n            \r\n            \r\n        )\r\n     }\r\n  }","import Axios from 'axios';\r\nimport React, {Component} from 'react';\r\nimport {Tab, Table} from 'semantic-ui-react';\r\nimport AppointmentCard from './dentist-appointment-modal-day-all.js'\r\nimport moment from 'moment'\r\nimport '../dentist_css/dentist-view.css'    \r\n\r\nclass day_all extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state={\r\n            appointments:this.props.appointments,\r\n            day: this.props.day,\r\n        }\r\n\r\n    }\r\n    \r\n    componentDidMount(){\r\n        console.log(\"Im in secretary-day-all componentDidMount\")\r\n        this.setState({\r\n            appointments:this.props.appointments\r\n        })\r\n    }\r\n\r\n\r\n    componentDidUpdate(){\r\n        if(this.props.day != this.state.day){\r\n            console.log(\"Date Changed\")\r\n            this.props.handleDayAppointmentUpdate()\r\n            this.setState({\r\n                    day: this.props.day,\r\n                })\r\n        }\r\n    }\r\n    render(){\r\n\r\n       return(\r\n           <>\r\n            <Table id=\"table-header-title\" compact>\r\n                    <Table.Header fullWidth>\r\n                        <Table.Row textAlign='center'>\r\n                            <Table.Cell>Daily Appointments</Table.Cell>\r\n                        </Table.Row>\r\n                    </Table.Header>\r\n                </Table>\r\n                <Table id='week_all' celled fixed textAlign='center' compact>\r\n                    <Table.Body>\r\n                    {\r\n                        this.props.appointments.map(({slot, appointments}, index)=>{\r\n                            return(\r\n                            <Table.Row key={index}>\r\n                                <Table.Cell id='day-all-time-cell'>{slot}</Table.Cell>\r\n                                {\r\n                                    <Table.Cell Name={\"day-all-table-cell\"+index} id={'day-all-table-cell'}>\r\n                                        <div id=\"day-all-div\">\r\n                                            {          \r\n                                                appointments.map((appointment)=>{\r\n                                                   /* return ( <AppointmentCard\r\n                                                        appointment={appointment}\r\n                                                        handleDayAppointmentUpdate={this.props.handleDayAppointmentUpdate}\r\n                                                            />)*/\r\n                                            })\r\n                                            }\r\n                                        </div>\r\n                                    </Table.Cell>\r\n                                                        \r\n                                }\r\n                            </Table.Row>\r\n                            )\r\n                        })\r\n                    }\r\n                            \r\n                    </Table.Body>\r\n                </Table>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default day_all\r\n","import React, {Component} from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport moment from 'moment';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {faCalendar} from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\n\r\nimport '../secretary_css/pickerStyle.scss'\r\nimport \"react-datepicker/dist/react-datepicker.css\"\r\n\r\nexport default class Picker extends Component {\r\n    \r\n\r\n    handleChangeDate=(date)=>{\r\n        this.props.handleChangeDate(date)\r\n    }\r\n\r\n    disableSunday=(date)=>{\r\n        return moment(date).day() !== 0;\r\n    }\r\n \r\n    render(){\r\n         const{handleOnToday, handleOnPrev, handleOnNext, date, handleChangeDate} = this.props\r\n        return(\r\n            <div class=\"item\">\r\n                <div className=\"picker\">\r\n                    {/* <FontAwesomeIcon icon={faCalendar}  className=\"calendarIcon\"/> */}\r\n                    <DatePicker id=\"datepicker-secretary\"\r\n                        //Fixed for error when intially clicking a date on secretary-header (change selected to moment)\r\n                        selected={moment(date).toDate()}\r\n                        onChange={handleChangeDate}\r\n                        onSelect={handleChangeDate}\r\n                        filterDate={this.disableSunday}\r\n                        \r\n                    />\r\n                </div> \r\n                <div className=\"today\" class=\"ui basic button with tooltip\" data-title=\"Today (SPACEBAR)\"\r\n                    data-content=\"Moves focus date to today\" data-variation=\"basic\" data-position=\"bottom center\"\r\n                    id=\"today\" onClick={handleOnToday} style={{fontWeight:\"bolder\", marginLeft: 30+'px'}}>\r\n                    TODAY\r\n                </div>\r\n                <div class=\"ui icon basic buttons\" style={{marginLeft: 30+'px'}}>\r\n                    <div class=\"ui button with tooltip\" data-title=\"Previous (←)\"\r\n                        data-content=\"Moves focused date to yesterday\" data-position=\"bottom center\" data-inverted=\"\"\r\n                        data-variation=\"basic\" id=\"prev-button\" onClick={handleOnPrev}>\r\n                        <i class=\"angle left icon\"></i>\r\n                    </div>\r\n                    <div class=\"ui button with tooltip\" data-title=\"Next (→)\" data-content=\"Moves focused date to tomorrow\"\r\n                        data-position=\"bottom center\" data-inverted=\"\" data-variation=\"basic\" id=\"next-button\" onClick={handleOnNext}>\r\n                        <i class=\"angle right icon\"></i>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\n","import React, {Component} from 'react';\r\nimport Picker from './secretary-date-picker'\r\nimport {Dropdown, Table} from 'semantic-ui-react'\r\nimport moment from 'moment'\r\n\r\nimport '../secretary_css/secretary-view.css'\r\n\r\nexport default class SecretaryNavigationbar extends Component{\r\n    handleOnToday =()=>{\r\n        this.props.onToday()\r\n    }\r\n    handleOnPrev =()=>{\r\n        this.props.onPrev()\r\n    }\r\n    handleOnNext =()=>{\r\n        this.props.onNext()\r\n    }\r\n\r\n    handleChangeDate=(date)=>{\r\n        this.props.onChangeDate(date)\r\n    }\r\n\r\n\r\n    render(){\r\n\r\n        let newDate = Date.parse(this.props.date)\r\n        let formattedDate = moment(newDate).format(\"MMMM D, YYYY\")\r\n\r\n        \r\n        return(\r\n            <div class=\"ui top fixed sticky borderless menu\" id=\"secretary-navigation-bar\" style={{height:65+\"px\"}}>\r\n            <div class=\"item\" id=\"secretary-picker-container\">\r\n                <Picker id=\"secretary-picker\"\r\n                    handleChangeDate ={this.handleChangeDate}\r\n                    handleOnToday ={this.handleOnToday}\r\n                    handleOnPrev={this.handleOnPrev}\r\n                    handleOnNext={this.handleOnNext}\r\n                    date={this.props.date}\r\n\r\n                />\r\n            </div>\r\n            <div class=\"item\" id=\"secretary-date-text-container\">\r\n            <span style={{fontSize:20+'px'}} id=\"secretary-date-text\">{formattedDate}</span>\r\n            </div>\r\n            <div class=\"right borderless menu\" id=\"secretary-rightside\">\r\n                <div class=\"item\" id=\"secretary-dropdown-view-container\">\r\n                    <Dropdown fluid selection \r\n                        placeholder=\"DAY\"\r\n                        name=\"view\"\r\n                        options={this.props.viewer} \r\n                        onChange={this.props.onChangeView}\r\n                        // defaultValue={this.props.viewer}\r\n                        id=\"secretary-dropdown-view\"\r\n                        >\r\n                    </Dropdown>\r\n                </div>\r\n                <div class=\"item\" id=\"secretary-dropdown-filter-container\">\r\n                    <Dropdown\r\n                        selection\r\n                        placeholder=\"filter\"\r\n                        id=\"secretary-dropdown-filter\"\r\n                        defaultValue={this.props.filter}\r\n                        options={this.props.filters}\r\n                        onChange={this.props.onChangeFilter}\r\n                        name=\"filter\"\r\n                    >\r\n\r\n                    </Dropdown>\r\n                </div>\r\n                <div class=\"item\" id=\"secretary-info-container\">\r\n                    <i id=\"shortcutsInfo\" class=\"large info circle icon\"></i>\r\n                </div>\r\n                <div class=\"item\" id=\"secretary-logout-container\">\r\n                    <i id=\"logoutButton\" class=\"large sign out icon link\"></i>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        )\r\n    }\r\n}","/**\r\n *  Description: Contains the first two steps in creating an Appointment.\r\n *  \r\n *  Includes: Date Picking, Time Picking, Next Button, Cancel Button\r\n * \r\n * \r\n */\r\nimport React, {Component, useState} from 'react';\r\nimport moment from 'moment';\r\nimport { Popup, Form, Input } from 'semantic-ui-react'\r\nimport DatePicker from 'react-datepicker';\r\n\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\"\r\nimport \"../secretary_css/addProcStep1.scss\"\r\n\r\nclass addProcStep1 extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            date: this.props.values.date,\r\n            time: moment(this.props.values.time, \"h:mm aa\").toDate()\r\n        }\r\n\r\n        this.onchangeDate = this.onchangeDate.bind(this)\r\n        this.onchangeTime = this.onchangeTime.bind(this)\r\n    } \r\n\r\n    onchangeDate(date){\r\n      this.setState({\r\n        date:date\r\n      })\r\n    }\r\n    onchangeTime(time){\r\n        this.setState({\r\n            time:time\r\n        })\r\n        this.props.handleTime(time)\r\n    }\r\n\r\n\r\n    \r\n    //Continues to step 2\r\n    continue = e =>{\r\n        e.preventDefault()\r\n        this.props.nextStep()\r\n    }\r\n    cancel = e =>{\r\n        e.preventDefault()\r\n        this.props.setOpen()\r\n    }\r\n\r\n    //DISABLES SUNDAYS\r\n    disableSunday=(date)=>{\r\n        return moment(date).day() !== 0;\r\n    }\r\n    disableNonMid=(time)=>{\r\n        return moment(time).minute() === 30 && moment(time).minute() ===0\r\n    }\r\n\r\n\r\n    \r\n  \r\n    render(){\r\n        const {handleDate} = this.props\r\n                                \r\n        return(\r\n\r\n            <div>\r\n                <Form>\r\n                    <Form.Input required\r\n                    label = 'Date'\r\n                    className = \"addProcStep1Date\"\r\n                    id = \"add-appointment-datepicker\"\r\n                    control={DatePicker}\r\n                        selected={this.state.date}\r\n                        onChange={this.onchangeDate}\r\n                        onSelect={handleDate}\r\n                        minDate={moment().toDate()}\r\n                        filterDate={this.disableSunday}\r\n                        \r\n                        >\r\n                    </Form.Input>\r\n                    <Form.Field required id='time-field-secretary'>\r\n                        <label>Time</label>\r\n                                <Form.Input\r\n                                error = {this.props.values.error.time}\r\n                                placeholder = \"Time\"\r\n                                className = \"addProcStep1Time\"\r\n                                id= \"add-appointment-time-picker\"\r\n                                control={DatePicker}\r\n                                    showTimeSelect\r\n                                    showTimeSelectOnly\r\n                                    selected={this.state.time}\r\n                                    timeIntervals={30}\r\n                                    dateFormat=\"h:mm aa\"\r\n                                    onChange={this.onchangeTime}\r\n                                    minTime={moment(\"8:00 AM\", \"h:mm aa\").toDate()}\r\n                                    maxTime={moment().toDate().setHours(18)}\r\n                                    filterDate={this.disableNonMid}\r\n                                />\r\n\r\n                        \r\n                        \r\n                    </Form.Field>\r\n                    {/* <Form.Input required\r\n                        label = \"Time\"\r\n                        className = \"addProcStep1Time\"\r\n                        control={DatePicker}\r\n                            showTimeSelect\r\n                            showTimeSelectOnly\r\n                            selected={this.state.time}\r\n                            timeIntervals={30}\r\n                            dateFormat=\"h:mm aa\"\r\n                            onChange={this.onchangeTime}\r\n                            minTime={moment().toDate().setHours(7)}\r\n                            maxTime={moment().toDate().setHours(18)}>\r\n                    </Form.Input> */}\r\n                        \r\n                </Form>\r\n                \r\n               \r\n            </div>\r\n        )\r\n    }\r\n  }\r\nexport default addProcStep1","/**\r\n *  Description: Contains the first two steps in creating an Appointment.\r\n *  \r\n *  Includes: Date Picking, Time Picking, Next Button, Cancel Button\r\n * \r\n * \r\n */\r\nimport React, {Component, useState} from 'react';\r\nimport moment from 'moment';\r\nimport { Input, Form, Popup, Dropdown} from 'semantic-ui-react'\r\nimport axios from 'axios'\r\n\r\n\r\nclass addProcStep2 extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        this.state = {\r\n            procedure:'',\r\n            procedures:[],\r\n            doctors:[],\r\n            doctor:[],\r\n            value:[],\r\n            multiple: true\r\n        }\r\n    }\r\n\r\n\r\n    \r\n    componentDidMount(){\r\n        axios.get('http://localhost:3000/secretary/getProcess')\r\n            .then(response => {\r\n                if(response.data.length > 0){\r\n                    this.setState({\r\n                        procedures: [\r\n                            ...response.data.map(procedure =>{\r\n                                return{\r\n                                    key: procedure._id,\r\n                                    text: procedure.processname,\r\n                                    value: procedure._id\r\n                                }\r\n                            })\r\n                        ],\r\n                        // procedures: response.data.map(procedure => procedure.processname),\r\n                        procedure: response.data[0].processname, \r\n\r\n                    })\r\n                }\r\n            })\r\n\r\n        axios.get('http://localhost:3000/secretary/getDoctors')\r\n            .then(response => {\r\n                if(response.data.length > 0){\r\n                    this.setState({   \r\n                        doctors: [\r\n                            ...response.data.map(doctor =>{\r\n                                return{\r\n                                    key: doctor._id,\r\n                                    text: \"DR. \"+doctor.lastname,\r\n                                    value: doctor._id\r\n                                }\r\n                            })\r\n                        ],\r\n                        doctor: response.data[0].firstname\r\n                    })\r\n                }\r\n            })\r\n\r\n\r\n    }\r\n\r\n    \r\n    render(){\r\n        const {values, handleChange, handleDoctorChange, handleProcessChange} = this.props\r\n\r\n        if(values.doctor.length != 0){\r\n            const doctor = [values.doctor]\r\n        return(\r\n            <>\r\n                <Form.Field required id=\"firstname-field-secretary\">\r\n                    <label>First Name</label>\r\n                    <Popup\r\n                        trigger={\r\n                            <Input\r\n                            error={values.error.firstname}\r\n                            onChange = {handleChange('firstname')}\r\n                            placeholder=\"First Name\"\r\n                            autoComplete=\"false\"\r\n                            name=\"firstname\"\r\n                            id= \"processFirstName\"\r\n                            />  \r\n                        }\r\n                        content=\"Name should contain at least 2 characters\"\r\n                        position=\"right center\"\r\n                    />\r\n                </Form.Field>\r\n\r\n                <Form.Field required id=\"lastname-field-secretary\">\r\n                    <label>Last Name</label>\r\n                    <Popup\r\n                        trigger={\r\n                            <Input\r\n                            error={values.error.lastname}\r\n                            onChange = {handleChange('lastname')}\r\n                            placeholder=\"Last Name\"\r\n                            autoComplete=\"false\"\r\n                            name=\"lastname\"\r\n                            id= \"processLasttName\"\r\n                            />  \r\n                        }\r\n                        content=\"Name should contain at least 2 characters\"\r\n                        position=\"right center\"\r\n                    />\r\n                </Form.Field>\r\n\r\n                <Form.Field required id=\"patientcontact-field-secretary\">\r\n                    <label>Contact Number</label>\r\n                    <Popup\r\n                        trigger={\r\n                            <Input\r\n                            error={values.error.lastname}\r\n                            onChange = {handleChange('patientcontact')}\r\n                            placeholder=\"Contact Number\"\r\n                            autoComplete=\"false\"\r\n                            name=\"patientcontact\"\r\n                            id= \"processPatientContact\"\r\n                            />  \r\n                        }\r\n                        content=\"Contact Number should be valid\"\r\n                        position=\"right center\"\r\n                    />\r\n                </Form.Field>\r\n\r\n                <Form.Field required id=\"procedures-field-secretary\">\r\n                    <label>Procedure/s</label>\r\n                    <Popup\r\n                        trigger={\r\n                            <Dropdown\r\n                            error={values.error.procedures}\r\n                            onChange={handleProcessChange}\r\n                            placeholder='Procedure/s'\r\n                            autoComplete=\"false\"\r\n                            options={this.state.procedures}\r\n                            selection fluid multiple\r\n                            id= \"processDropProc\"\r\n                            />  \r\n                        }\r\n                        content=\"Must have at least 1 procedure\"\r\n                        position=\"right center\"\r\n                    />\r\n                </Form.Field>\r\n                \r\n                <Form.TextArea required\r\n                    placeholder='Notes'\r\n                    onChange = {handleChange('notes')}\r\n                    label=\"notes\"\r\n                    name=\"notes\"\r\n                    id= \"processNotes\"\r\n                />\r\n\r\n                <Form.Field required id=\"doctors-field-secretary\">\r\n                    <label>Doctor/s</label>\r\n                    <Popup\r\n                        trigger={\r\n                            <Dropdown\r\n                            error={values.error.doctors}\r\n                            onChange={handleDoctorChange}\r\n                            placeholder='Doctor/s'\r\n                            autoComplete=\"false\"\r\n                            options={this.state.doctors}\r\n                            selection fluid multiple\r\n                            id= \"processDropDoctor\"\r\n                            defaultValue={doctor}\r\n                            />  \r\n                        }\r\n                        content=\"Must have at least 1 doctor\"\r\n                        position=\"right center\"\r\n                    />\r\n                </Form.Field>\r\n\r\n                \r\n            </>\r\n        )\r\n        }\r\n        else{\r\n            return(\r\n                <>\r\n                    <Form.Field required id=\"firstname-field-secretary\">\r\n                        <label>First Name</label>\r\n                        <Popup\r\n                            trigger={\r\n                                <Input\r\n                                error={values.error.firstname}\r\n                                onChange = {handleChange('firstname')}\r\n                                placeholder=\"First Name\"\r\n                                autoComplete=\"false\"\r\n                                name=\"firstname\"\r\n                                id= \"processFirstName\"\r\n                                />  \r\n                            }\r\n                            content=\"Name should contain at least 2 characters\"\r\n                            position=\"right center\"\r\n                        />\r\n                    </Form.Field>\r\n    \r\n                    <Form.Field required id=\"lastname-field-secretary\">\r\n                        <label>Last Name</label>\r\n                        <Popup\r\n                            trigger={\r\n                                <Input\r\n                                error={values.error.lastname}\r\n                                onChange = {handleChange('lastname')}\r\n                                placeholder=\"Last Name\"\r\n                                autoComplete=\"false\"\r\n                                name=\"lastname\"\r\n                                id= \"processLasttName\"\r\n                                />  \r\n                            }\r\n                            content=\"Name should contain at least 2 characters\"\r\n                            position=\"right center\"\r\n                        />\r\n                    </Form.Field>\r\n    \r\n                    <Form.Field required id=\"patientcontact-field-secretary\">\r\n                        <label>Contact Number</label>\r\n                        <Popup\r\n                            trigger={\r\n                                <Input\r\n                                error={values.error.lastname}\r\n                                onChange = {handleChange('patientcontact')}\r\n                                placeholder=\"Contact Number\"\r\n                                autoComplete=\"false\"\r\n                                name=\"patientcontact\"\r\n                                id= \"processPatientContact\"\r\n                                />  \r\n                            }\r\n                            content=\"Contact Number should be valid\"\r\n                            position=\"right center\"\r\n                        />\r\n                    </Form.Field>\r\n    \r\n                    <Form.Field required id=\"procedures-field-secretary\">\r\n                        <label>Procedure/s</label>\r\n                        <Popup\r\n                            trigger={\r\n                                <Dropdown\r\n                                error={values.error.procedures}\r\n                                onChange={handleProcessChange}\r\n                                placeholder='Procedure/s'\r\n                                autoComplete=\"false\"\r\n                                options={this.state.procedures}\r\n                                selection fluid multiple\r\n                                id= \"processDropProc\"\r\n                                />  \r\n                            }\r\n                            content=\"Must have at least 1 procedure\"\r\n                            position=\"right center\"\r\n                        />\r\n                    </Form.Field>\r\n                    \r\n                    <Form.TextArea required\r\n                        placeholder='Notes'\r\n                        onChange = {handleChange('notes')}\r\n                        label=\"notes\"\r\n                        name=\"notes\"\r\n                        id= \"processNotes\"\r\n                    />\r\n    \r\n                    <Form.Field required id=\"doctors-field-secretary\">\r\n                        <label>Doctor/s</label>\r\n                        <Popup\r\n                            trigger={\r\n                                <Dropdown\r\n                                error={values.error.doctors}\r\n                                onChange={handleDoctorChange}\r\n                                placeholder='Doctor/s'\r\n                                autoComplete=\"false\"\r\n                                options={this.state.doctors}\r\n                                selection fluid multiple\r\n                                id= \"processDropDoctor\"\r\n                                />  \r\n                            }\r\n                            content=\"Must have at least 1 doctor\"\r\n                            position=\"right center\"\r\n                        />\r\n                    </Form.Field>\r\n    \r\n                    \r\n                </>\r\n            )\r\n        }\r\n        \r\n    }\r\n}\r\nexport default addProcStep2","import React, {Component} from 'react';\r\nimport { Step } from 'semantic-ui-react'\r\n\r\n\r\nimport AddProcStep1 from \"./secretary-add-appointment-modal-form-step1\";\r\nimport AddProcStep2 from \"./secretary-add-appointment-modal-form-step2\";\r\n\r\n\r\n\r\nimport \"../secretary_css/pickerStyle.scss\"\r\nimport \"react-datepicker/dist/react-datepicker.css\"\r\n\r\n\r\nclass addProcMainForm extends Component {\r\n\r\n  \r\n    render(){\r\n        \r\n        const {values, handleChange, handleDate, setOpen, nextStep, prevStep, handleTime, handleDoctorChange, handleProcessChange} = this.props\r\n\r\n        switch(this.props.step){\r\n            case 1:\r\n                return(\r\n                <div>    \r\n                    <div class=\"header\">\r\n                        <Step.Group fluid>\r\n                            <Step active>\r\n                                <i className=\"calendar icon\"></i>\r\n                                <div className=\"content\">\r\n                                    <div className=\"title\">Date</div>\r\n                                </div>\r\n                            </Step>\r\n                            <Step>\r\n                                <i className=\"address card icon\"></i>\r\n                                <div className=\"content\">\r\n                                    <div className=\"title\">Appointment</div>\r\n                                </div>\r\n                            </Step>\r\n                        </Step.Group>\r\n                    </div>\r\n                        <AddProcStep1 \r\n                            nextStep = {nextStep}\r\n                            handleChange={handleChange}\r\n                            handleDate={handleDate}\r\n                            values={values}\r\n                            setOpen={setOpen}\r\n                            handleTime={handleTime}\r\n                        >\r\n                        </AddProcStep1>\r\n                </div>\r\n                )\r\n            case 2:\r\n                return(\r\n                        <div>\r\n                            <div class=\"header\">\r\n                                <Step.Group fluid>\r\n                                    <Step onClick={prevStep}>\r\n                                        <i className=\"calendar icon\"></i>\r\n                                        <div className=\"content\">\r\n                                            <div className=\"title\">Date</div>\r\n                                        </div>\r\n                                    </Step>\r\n                                    <Step active>\r\n                                        <i className=\"address card icon\"></i>\r\n                                        <div className=\"content\">\r\n                                            <div className=\"title\">Appointment</div>\r\n                                        </div>\r\n                                    </Step>\r\n                                </Step.Group>\r\n                             </div>\r\n                        \r\n                            <AddProcStep2\r\n                                prevStep = {prevStep}\r\n                                handleChange={handleChange}\r\n                                setOpen={setOpen}\r\n                                handleTime={handleTime}\r\n                                handleDoctorChange={handleDoctorChange}\r\n                                handleProcessChange={handleProcessChange}\r\n                                values = {values}\r\n                            />\r\n                        </div> \r\n                    )\r\n        }\r\n    }\r\n  }\r\nexport default addProcMainForm","import React, {Component} from 'react';\r\nimport moment from 'moment';\r\nimport {Modal, Form, Button} from 'semantic-ui-react'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {faCalendar} from '@fortawesome/free-solid-svg-icons'\r\nimport axios from 'axios'\r\n\r\nimport { toast } from 'react-semantic-toasts';\r\nimport 'react-semantic-toasts/styles/react-semantic-alert.css';\r\n\r\n\r\n\r\nimport AddProcMainForm from \"./secretary-add-appointment-modal-form\"\r\n\r\n\r\n\r\n\r\n\r\nclass AddModal extends Component {\r\n    constructor(props){\r\n    \r\n      super(props);\r\n      \r\n      this.state ={\r\n        firstname:'',\r\n        lastname:'',\r\n        patientcontact:'',\r\n        procedures:[],\r\n        process:'',\r\n        notes:'',\r\n        date: moment().toDate(),\r\n        time: moment(\"8:00 AM\", \"h:mm aa\").toDate(),\r\n        doctor:'',\r\n        doctors:[],\r\n        open: false,\r\n        step: 1,\r\n        error: {\r\n          firstname: false,\r\n          lastname: false,\r\n          username: false,\r\n          password: false,\r\n          patientcontact: false,\r\n          time: false,\r\n          date:false,\r\n          doctors: false,\r\n          procedures: false\r\n\r\n      },\r\n      }\r\n      this.setOpen = this.setOpen.bind(this);\r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.handleDate = this.handleDate.bind(this);\r\n      this.handletime = this.handleDate.bind(this);\r\n      this.handleDoctorChange = this.handleDoctorChange.bind(this);\r\n    }\r\n\r\n    handleValidation=()=>{\r\n      const checkfirst = /^[a-z A-Z]+$/;\r\n      const checklast = /^[a-z A-Z.\\-_]+$/;\r\n      const checkcontact = /^[+-]?\\d{7,12}$/;\r\n\r\n      let firstname = this.state.firstname.trim();\r\n      let lastname = this.state.lastname.trim();\r\n      let patientcontact = this.state.patientcontact.trim();\r\n      let procedures = this.state.procedures;\r\n      let date = this.state.date;\r\n      let time = this.state.time;\r\n      let doctors = this.state.doctors;\r\n\r\n      let error = this.state.error;\r\n      let formIsValid = true;\r\n\r\n      if(moment(moment(time, \"h:mm A\").toDate()).isBefore(moment().toDate()) && moment(date).isSame(moment().toDate(), 'day')){\r\n          error['time']= true;\r\n          toast({\r\n            type: \"error\",\r\n            title: \"Error\",\r\n            description: <p>Please input valid time</p>,\r\n            icon: \"cancel\",\r\n          });\r\n          formIsValid = false;\r\n      }\r\n      if(firstname === \"\"|| !firstname.match(checkfirst)){\r\n        error['firstname']= true;\r\n        toast({\r\n          type: \"error\",\r\n          title: \"Error\",\r\n          description: <p>Please input a valid firstname</p>,\r\n          icon: \"cancel\",\r\n        });\r\n        formIsValid = false;\r\n\r\n      } else if( firstname.length < 2){\r\n        error['firstname'] = true;\r\n        toast({\r\n          type: \"error\",\r\n          title: \"Error\",\r\n          description: <p>Firstname is too short</p>,\r\n          icon: \"cancel\",\r\n        });\r\n        formIsValid = false;\r\n      }\r\n      if(lastname ===  \"\"|| !lastname.match(checklast)){\r\n        error[\"lastname\"] = true;\r\n        toast({\r\n          type: \"error\",\r\n          title: \"Error\",\r\n          description: <p>Please input a valid lastname</p>,\r\n          icon: \"cancel\",\r\n        });\r\n        formIsValid = false;\r\n      } else if(lastname.length < 2){\r\n        error[\"lastname\"] = true;\r\n        toast({\r\n            type: \"error\",\r\n            title: \"Error\",\r\n            description: <p>Lastname is too short</p>,\r\n            icon: \"cancel\",\r\n        });\r\n        formIsValid = false;\r\n      }\r\n\r\n      if(patientcontact === \"\" || !patientcontact.match(checkcontact)){\r\n        error['patientcontact']= true;\r\n        toast({\r\n          type: \"error\",\r\n          title: \"Error\",\r\n          description: <p>Please input a valid contact number</p>,\r\n          icon: \"cancel\",\r\n        });\r\n        formIsValid = false;\r\n      }\r\n\r\n      if(procedures.length < 1 || procedures === undefined){\r\n        error['procedures']= true;\r\n        toast({\r\n          type: \"error\",\r\n          title: \"Error\",\r\n          description: <p>Must have at least 1 procedure</p>,\r\n          icon: \"cancel\",\r\n        });\r\n        formIsValid = false;\r\n      }\r\n\r\n      if(doctors.length < 1 || doctors === undefined){\r\n        error['doctors']= true;\r\n        toast({\r\n          type: \"error\",\r\n          title: \"Error\",\r\n          description: <p>Must have at least 1 doctor</p>,\r\n          icon: \"cancel\",\r\n        });\r\n        formIsValid = false;\r\n      }\r\n\r\n      if(formIsValid){\r\n        let checkData = {\r\n          dateInput: date.toString(),\r\n          timeInput: time.toString(),\r\n          doctors: doctors\r\n        }\r\n\r\n      axios.post(\"/secretary/check_app_exists\", checkData, function(data){\r\n          \r\n          if(data === true){\r\n            error['doctors']= true;\r\n            toast({\r\n              type: \"error\",\r\n              title: \"Error\",\r\n              description: <p>Doctor is already booked on this date and time</p>,\r\n              icon: \"cancel\",\r\n            });\r\n            formIsValid = false;\r\n          } else{\r\n            formIsValid = true;\r\n          }\r\n        })\r\n\r\n        return formIsValid;\r\n\r\n      }\r\n\r\n\r\n\r\n    }\r\n\r\n    \r\n\r\n    \r\n\r\n    //function for opening and closing the modal\r\n    handleClose=()=>{\r\n      this.setState({\r\n        open: false,\r\n        step : 1\r\n      })\r\n      setTimeout(() => {\r\n        toast(\r\n            {\r\n                description: <p>Appointment Creation cancelled</p>,\r\n                icon: 'check',\r\n                animation: 'slide up',\r\n                time:1000,\r\n                color: 'red'\r\n\r\n            },\r\n            () => console.log('toast closed'),\r\n        );\r\n    }, 1000)\r\n    }\r\n    setOpen(){\r\n      this.setState({\r\n        open: !this.state.open,\r\n        step : 1\r\n      })\r\n      \r\n    }\r\n\r\n    //Function for submitting values\r\n    handleChange = input => e =>{\r\n      this.setState({\r\n        [input]: e.target.value\r\n      })\r\n      console.log(e.target.value)\r\n    }\r\n    handleSubmit=e=>{\r\n        e.preventDefault()\r\n        if(this.handleValidation()){\r\n          const appointment = {\r\n            firstname:this.state.firstname,\r\n            lastname:this.state.lastname,\r\n            patientcontact: this.state.patientcontact,\r\n            procedures: this.state.procedures,\r\n            notes:this.state.notes,\r\n            date:this.state.date,\r\n            time:this.state.time,\r\n            doctors:this.state.doctors,\r\n          }\r\n          if(Array.isArray(this.state.procedures[0])){\r\n            appointment.procedures = this.state.procedures[0]\r\n          }\r\n          if(Array.isArray(this.state.doctors[0])){\r\n            appointment.doctors = this.state.doctors[0]\r\n          }\r\n  \r\n          axios.post('http://localhost:3000/secretary/create', appointment).then(res =>{\r\n            if(res.data.message == true){\r\n              setTimeout(() => {\r\n                toast(\r\n                    {\r\n                        description: <p>Appointment Created</p>,\r\n                        icon: 'check',\r\n                        animation: 'slide up',\r\n                        time:1000,\r\n                        color: 'green'\r\n      \r\n                    },\r\n                );\r\n              }, 1000)\r\n              this.setOpen();\r\n              this.props.handleWeekAppointmentUpdate()\r\n              this.props.handleDayAppointmentUpdate()\r\n              this.props.handleWeekAvailable()\r\n            } else {\r\n              toast({\r\n                type: 'error',\r\n                title: 'Error',\r\n                description: <p>Invalid Appointment</p>,\r\n                icon: \"cancel\"\r\n              })\r\n            }\r\n          });\r\n        }\r\n      \r\n    } \r\n\r\n    //Datepicker change\r\n    handleDate(date){\r\n      this.setState({\r\n        date:date\r\n      })\r\n\r\n      console.log(date)\r\n     \r\n    }\r\n\r\n    handleDoctorChange =(e, {value}) => {\r\n        this.setState({doctors:value})\r\n        console.log(value)\r\n\r\n      }\r\n\r\n      handleProcessChange =(e, {value}) => {\r\n        this.setState({procedures:value})\r\n        console.log(value)\r\n\r\n      }\r\n\r\n    //Step changes in changing the prop\r\n    //Proceeds to next step\r\n    nextStep =()=>{\r\n      const {step} = this.state;\r\n      this.setState({\r\n          step: step+1\r\n      });\r\n    }\r\n\r\n    //Proceeds to previous step\r\n    prevStep =()=>{\r\n        const {step} = this.state;\r\n        this.setState({\r\n            step: step-1\r\n        });\r\n    }\r\n    handleTime=(time)=>{\r\n      this.setState({\r\n        time:time\r\n      })\r\n      console.log(time)\r\n    }\r\n  \r\n    render(){\r\n      const {firstname, lastname, patientcontact, process, notes, date, time, doctors, doctor, error} = this.state;\r\n      const values = {firstname, lastname, patientcontact, process, notes, date, time, doctors, doctor, error}\r\n      let button;\r\n      let button2;\r\n      if(this.state.step === 1){\r\n        button = <Button onClick={this.nextStep} type='button'>Next</Button>\r\n      } else{\r\n        button = <Button type=\"button\" color=\"green\" onClick={this.handleSubmit}>Submit</Button>\r\n        button2 = <Button onClick={this.prevStep}>Back</Button>\r\n      }\r\n      return (\r\n        <>\r\n          <Modal\r\n            onClose={this.setOpen}\r\n            onOpen={this.setOpen}\r\n            open={this.state.open}\r\n            as={Form}\r\n            onSubmit={this.handleSubmit}\r\n            trigger={\r\n            <div className=\"circular ui pink icon button with tooltip\" data-title=\"Add (ENTER)\" data-content=\"Adds an appointment\" data-variation=\"basic\" data-position=\"bottom center\" id=\"add-button\">\r\n            <i className=\"large plus icon\"></i>\r\n            </div>}\r\n          >\r\n          \r\n          <Modal.Content>\r\n                  <AddProcMainForm\r\n                    handleChange = {this.handleChange}\r\n                    handleDoctorChange = {this.handleDoctorChange}\r\n                    handleProcessChange = {this.handleProcessChange}\r\n                    handleDate = {this.handleDate}\r\n                    handleTime = {this.handleTime}\r\n                    setOpen = {this.setOpen}\r\n                    prevStep = {this.prevStep}\r\n                    nextStep = {this.nextStep}\r\n                    step = {this.state.step}\r\n                    values = {values}\r\n\r\n                  />\r\n          </Modal.Content>\r\n          <Modal.Actions>\r\n            <Button onClick={this.handleClose}>Cancel</Button>\r\n            {button2}\r\n            {button}\r\n            \r\n          </Modal.Actions>\r\n          </Modal>\r\n        </>\r\n        \r\n        \r\n      )\r\n    }\r\n  }\r\nexport default AddModal","import React, {Component} from 'react';\r\nimport {Table} from 'semantic-ui-react'\r\nimport moment from 'moment'\r\nimport AddAppointment from './secretary-add-appointment-modal'\r\n\r\nimport '../secretary_css/secretary-view.css'\r\n\r\nexport default class SecretaryHeader extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state={\r\n            today:this.props.date,\r\n            startOfWeek: this.props.startOfWeek,\r\n            endOfWeek: this.props.endOfWeek,\r\n            days:this.props.daysParent,\r\n            weekUnparsed:this.props.weekUnparsed\r\n\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n    componentDidMount(){\r\n        let newArray=[]\r\n        let backgroundColor ='red'\r\n        let dated=Date.parse(this.state.today)\r\n        let dateded =moment(dated).format(\"MMMM D, YYYY\")\r\n\r\n        newArray.push(<Table.Cell><AddAppointment></AddAppointment></Table.Cell>)\r\n        for(let i =0; i < this.state.days.length; i++){\r\n            if(this.state.days[i] == dateded){\r\n                newArray.push(<Table.Cell onClick={()=>this.props.onChangeDate(this.state.weekUnparsed[i])} style={{backgroundColor}}>{this.state.days[i]}</Table.Cell>)\r\n            }\r\n            else{\r\n                // newArray.push(<Table.Cell onClick={()=>this.props.onChangeDate(this.state.weekUnparsed[i])} >{this.state.days[i]}</Table.Cell>)\r\n                newArray.push(<Table.Cell onClick={this.props.onChangeDate} >{this.state.days[i]}</Table.Cell>)\r\n            }\r\n        }\r\n        this.setState({\r\n            days:this.state.days,\r\n            weekUnparsed:this.state.weekUnparsed\r\n            \r\n        })\r\n\r\n\r\n\r\n\r\n        \r\n    }\r\n\r\n    componentDidUpdate(){\r\n        if(this.props.date !== this.state.today){   \r\n            let newArray=[]\r\n            let backgroundColor ='red'\r\n            let dated=Date.parse(this.state.today)\r\n            let dateded =moment(dated).format(\"MMMM D, YYYY\")\r\n\r\n            newArray.push(<Table.Cell><AddAppointment></AddAppointment></Table.Cell>)\r\n            for(let i =0; i < this.state.days.length; i++){\r\n                if(this.state.days[i] == dateded){\r\n                    newArray.push(<Table.Cell onClick={()=>this.props.onChangeDate(this.state.weekUnparsed[i])} style={{backgroundColor}}>{this.state.days[i]}</Table.Cell>)\r\n                }\r\n                else{\r\n                    newArray.push(<Table.Cell onClick={()=>this.props.onChangeDate(this.state.weekUnparsed[i])} >{this.state.days[i]}</Table.Cell>)\r\n                }\r\n            }\r\n            this.setState({\r\n                today: this.props.date,\r\n                startOfWeek: this.props.startOfWeek,\r\n                endOfWeek: this.props.endOfWeek,\r\n                days:this.props.daysParent,\r\n                weekUnparsed:this.props.weekUnparsed,\r\n                \r\n                \r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    hello =(date)=>{\r\n        console.log(date)\r\n        this.setState({\r\n            today: date\r\n        })\r\n    }\r\n\r\n    render(){\r\n        const newArray =[]\r\n        let backgroundColor ='red'\r\n        let newDate=Date.parse(this.state.today)\r\n        let formatted =moment(newDate).format(\"MMMM D, YYYY\")\r\n\r\n        newArray.push(<Table.Cell id='secretary-add-appointment'>\r\n                            <AddAppointment\r\n                                handleWeekAppointmentUpdate={this.props.handleWeekAppointmentUpdate}\r\n                                handleDayAppointmentUpdate={this.props.handleDayAppointmentUpdate}\r\n                                handleWeekAvailable={this.props.handleWeekAvailable}\r\n                            >\r\n                                \r\n                            </AddAppointment>\r\n                        </Table.Cell>)\r\n        for(let i =0; i < this.state.days.length; i++){\r\n            if(this.state.days[i] == formatted){\r\n                newArray.push(<Table.Cell id=\"sec-header-child\" onClick={()=>this.props.onChangeDate(this.state.weekUnparsed[i])} style={{backgroundColor}}>{this.state.days[i]}</Table.Cell>)\r\n            }\r\n            else{\r\n                newArray.push(<Table.Cell id=\"sec-header-child\" onClick={()=>this.props.onChangeDate(this.state.weekUnparsed[i])} >{this.state.days[i]}</Table.Cell>)\r\n            }\r\n        }\r\n\r\n        return(\r\n            <Table id=\"SECHEADER\" celled textAlign='center' style={{height:70+'px'}} compact>\r\n                <Table.Body>\r\n                    <Table.Row children={newArray}/>\r\n                    \r\n                </Table.Body>\r\n            </Table>\r\n        )\r\n    }\r\n}","/**\r\n *  Description: Contains the first two steps in creating an Appointment.\r\n *  \r\n *  Includes: Date Picking, Time Picking, Next Button, Cancel Button\r\n * \r\n * \r\n */\r\nimport React, {Component, useState} from 'react';\r\nimport moment from 'moment';\r\nimport { Button, Header, Image, Modal, Form, Select, Dropdown } from 'semantic-ui-react'\r\nimport DatePicker from 'react-datepicker';\r\n\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\"\r\nimport \"../secretary_css/addProcStep1.scss\"\r\nimport '../secretary_css/secretary-view.css'\r\n\r\nclass editProcStep1 extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            date: this.props.values.date,\r\n            time: this.props.values.time\r\n        }\r\n\r\n        this.onchangeDate = this.onchangeDate.bind(this)\r\n        this.onChangeTime = this.onChangeTime.bind(this)\r\n    } \r\n\r\n    onchangeDate(date){\r\n      this.setState({\r\n        date:date\r\n      })\r\n    }\r\n\r\n    onChangeTime=(time)=>{\r\n        this.setState({\r\n            time:time\r\n        })\r\n        this.props.handleTime(time)\r\n    }\r\n    \r\n    //Continues to step 2\r\n    continue = e =>{\r\n        e.preventDefault()\r\n        this.props.nextStep()\r\n    }\r\n    cancel = e =>{\r\n        e.preventDefault()\r\n        this.props.setOpen()\r\n    }\r\n\r\n    \r\n  \r\n    render(){\r\n        const {handleDate} = this.props\r\n       \r\n        return(\r\n\r\n            <div>\r\n                <Form>\r\n                    <Form.Input required\r\n                    label = 'Date'\r\n                    className = \"editProcStep1Date\"\r\n                    id=\"editProcStep1Date-secretary\"\r\n                    control={DatePicker}\r\n                        selected={this.state.date}\r\n                        onChange={this.onchangeDate}\r\n                        onSelect={handleDate}\r\n                        minDate={this.state.date}\r\n                        \r\n                        >\r\n                    </Form.Input>\r\n                    {/* <Dropdown\r\n                    fluid\r\n                    selection\r\n                    name='time'\r\n                    selected={this.state.time}\r\n                    placeholder=\"Select Timeslot\" options={timeSlotsArray}\r\n                    onChange={handleTime}/> */}\r\n                    <Form.Input required\r\n                        label = \"Time\"\r\n                        className = \"editProcStep1Time\"\r\n                        id=\"editProcStep1Time-secretary\"\r\n                        control={DatePicker}\r\n                            showTimeSelect\r\n                            showTimeSelectOnly\r\n                            selected={this.state.time}\r\n                            timeIntervals={30}\r\n                            dateFormat=\"h:mm aa\"\r\n                            onChange={this.onChangeTime}\r\n                            minTime={moment().toDate().setHours(9)}\r\n                            maxTime={moment().toDate().setHours(18)}>\r\n                    </Form.Input>\r\n                </Form>\r\n                \r\n               \r\n            </div>\r\n        )\r\n    }\r\n  }\r\nexport default editProcStep1","/**\r\n *  Description: Contains the first two steps in creating an Appointment.\r\n *  \r\n *  Includes: Date Picking, Time Picking, Next Button, Cancel Button\r\n * \r\n * \r\n */\r\nimport React, {Component, useState} from 'react';\r\nimport { Input, Form, Popup, Dropdown} from 'semantic-ui-react'   \r\nimport axios from 'axios'\r\n\r\nclass addProcStep2 extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        this.state = {\r\n            procedures:[],\r\n            doctors:[],\r\n            value:[],\r\n            currentProcs: this.props.values.procedures[0],\r\n            currentDocs:this.props.values.doctors[0],\r\n            multiple: true\r\n        }\r\n    }\r\n\r\n\r\n    \r\n    componentDidMount(){\r\n        \r\n        axios.get('http://localhost:3000/secretary/getProcess')\r\n            .then(response => {\r\n                if(response.data.length > 0){\r\n                    this.setState({\r\n                        procedures: [\r\n                            ...response.data.map(procedure =>{\r\n                                return{\r\n                                    text: procedure.processname,\r\n                                    value: procedure._id\r\n                                }\r\n                            })\r\n                        ],\r\n                    })\r\n                }\r\n            })\r\n        \r\n        axios.get('http://localhost:3000/secretary/getDoctors')\r\n            .then(response => {\r\n                if(response.data.length > 0){\r\n                    this.setState({   \r\n                        doctors: [\r\n                            ...response.data.map(doctor =>{\r\n                                return{\r\n                                    text: \"Dr.\" + doctor.lastname,\r\n                                    value: doctor._id\r\n                                }\r\n                            })\r\n                        ],\r\n                    })\r\n                }\r\n            })\r\n    }\r\n\r\n\r\n    \r\n    render(){\r\n        const {values, handleChange, handleDoctorChange, handleProcessChange} = this.props\r\n        return(\r\n            <Form>\r\n                <Form.Field required id=\"firstname-field-secretary\">\r\n                    <label>First Name</label>\r\n                    <Popup\r\n                        trigger={\r\n                            <Input\r\n                            error={values.error.firstname}\r\n                            onChange = {handleChange('firstname')}\r\n                            placeholder=\"First Name\"\r\n                            autoComplete=\"false\"\r\n                            name=\"firstname\"\r\n                            id= \"processFirstName\"\r\n                            value={this.props.values.firstname}\r\n                            />  \r\n                        }\r\n                        content=\"Name should contain at least 2 characters\"\r\n                        position=\"right center\"\r\n                    />\r\n                </Form.Field>\r\n                <Form.Field required id=\"lastname-field-secretary\">\r\n                    <label>Last Name</label>\r\n                    <Popup\r\n                        trigger={\r\n                            <Input\r\n                            error={values.error.lastname}\r\n                            onChange = {handleChange('lastname')}\r\n                            placeholder=\"Last Name\"\r\n                            autoComplete=\"false\"\r\n                            name=\"lastname\"\r\n                            id= \"processLasttName\"\r\n                            value={this.props.values.lastname}\r\n                            />  \r\n                        }\r\n                        content=\"Name should contain at least 2 characters\"\r\n                        position=\"right center\"\r\n                    />\r\n                </Form.Field>\r\n                <Form.Field required id=\"patientcontact-field-secretary\">\r\n                    <label>Contact Number</label>\r\n                    <Popup\r\n                        trigger={\r\n                            <Input\r\n                            error={values.error.lastname}\r\n                            onChange = {handleChange('patientcontact')}\r\n                            placeholder=\"Contact Number\"\r\n                            autoComplete=\"false\"\r\n                            name=\"patientcontact\"\r\n                            id= \"processPatientContact\"\r\n                            value={this.props.values.patientcontact}\r\n                            />  \r\n                        }\r\n                        content=\"Contact Number should be valid\"\r\n                        position=\"right center\"\r\n                    />\r\n                </Form.Field>\r\n                <Form.Field required id=\"procedures-field-secretary\">\r\n                    <label>Procedure/s</label>\r\n                    <Popup\r\n                        trigger={\r\n                            <Dropdown\r\n                            error={values.error.procedures}\r\n                            onChange={handleProcessChange}\r\n                            defaultValue={this.state.currentProcs}\r\n                            placeholder='Procedure/s'\r\n                            autoComplete=\"false\"\r\n                            options={this.state.procedures}\r\n                            selection fluid multiple\r\n                            id= \"processDropProc\"\r\n                            />  \r\n                        }\r\n                        content=\"Must have at least 1 procedure\"\r\n                        position=\"right center\"\r\n                    />\r\n                </Form.Field>\r\n                <Form.TextArea required\r\n                    placeholder='Notes'\r\n                    onChange = {handleChange('notes')}\r\n                    label=\"notes\"\r\n                    name=\"notes\"\r\n                    id= \"processNotes\"\r\n                    value={this.props.values.notes}\r\n                />\r\n                <Form.Field required id=\"doctors-field-secretary\">\r\n                    <label>Doctor/s</label>\r\n                    <Popup\r\n                        trigger={\r\n                            <Dropdown\r\n                            error={values.error.doctors}\r\n                            onChange={handleDoctorChange}\r\n                            placeholder='Doctor/s'\r\n                            options={this.state.doctors}\r\n                            defaultValue={this.state.currentDocs}\r\n                            selection fluid multiple\r\n                            id= \"processDropDoctor\"\r\n                            />  \r\n                        }\r\n                        content=\"Must have at least 1 doctor\"\r\n                        position=\"right center\"\r\n                    />\r\n                </Form.Field>\r\n\r\n                \r\n            </Form>\r\n        )\r\n    }\r\n}\r\nexport default addProcStep2","import React, {Component} from 'react';\r\nimport { Step } from 'semantic-ui-react'\r\n\r\n\r\nimport EditProcStep1 from \"./secretary-edit-appointment-modal-form-step1\";\r\nimport EditProcStep2 from \"./secretary-edit-appointment-modal-form-step2\";\r\n\r\n\r\n\r\nimport \"../secretary_css/pickerStyle.scss\"\r\nimport \"react-datepicker/dist/react-datepicker.css\"\r\n\r\n\r\nclass EditProcMainForm extends Component {\r\n\r\n  \r\n    render(){\r\n        \r\n        const {values, handleChange, handleDate, setOpen, nextStep, prevStep, handleTime, handleDoctorChange, handleProcessChange} = this.props\r\n\r\n        switch(this.props.step){\r\n            case 1:\r\n                return(\r\n                <div>    \r\n                    <div class=\"header\">\r\n                        <Step.Group fluid>\r\n                            <Step active>\r\n                                <i className=\"calendar icon\"></i>\r\n                                <div className=\"content\">\r\n                                    <div className=\"title\">Date</div>\r\n                                </div>\r\n                            </Step>\r\n                            <Step>\r\n                                <i className=\"address card icon\"></i>\r\n                                <div className=\"content\">\r\n                                    <div className=\"title\">Appointment</div>\r\n                                </div>\r\n                            </Step>\r\n                        </Step.Group>\r\n                    </div>\r\n                        <EditProcStep1 \r\n                            nextStep = {nextStep}\r\n                            handleChange={handleChange}\r\n                            handleDate={handleDate}\r\n                            values={values}\r\n                            setOpen={setOpen}\r\n                            handleTime={handleTime}\r\n                            \r\n                        >\r\n                        </EditProcStep1>\r\n                </div>\r\n                )\r\n            case 2:\r\n                return(\r\n                        <div>\r\n                            <div class=\"header\">\r\n                                <Step.Group fluid>\r\n                                    <Step onClick={prevStep}>\r\n                                        <i className=\"calendar icon\"></i>\r\n                                        <div className=\"content\">\r\n                                            <div className=\"title\">Date</div>\r\n                                        </div>\r\n                                    </Step>\r\n                                    <Step active>\r\n                                        <i className=\"address card icon\"></i>\r\n                                        <div className=\"content\">\r\n                                            <div className=\"title\">Appointment</div>\r\n                                        </div>\r\n                                    </Step>\r\n                                </Step.Group>\r\n                             </div>\r\n                        \r\n                            <EditProcStep2\r\n                                prevStep = {prevStep}\r\n                                handleChange={handleChange}\r\n                                setOpen={setOpen}\r\n                                handleTime={handleTime}\r\n                                handleDoctorChange={handleDoctorChange}\r\n                                handleProcessChange={handleProcessChange}\r\n                                values={values}\r\n                            />\r\n                        </div> \r\n                    )\r\n        }\r\n    }\r\n  }\r\nexport default EditProcMainForm","import React, {Component} from 'react';\r\nimport moment from 'moment';\r\nimport {Modal, Form, Button, Icon, Card} from 'semantic-ui-react'\r\nimport axios from 'axios'\r\nimport { SemanticToastContainer, toast } from 'react-semantic-toasts';\r\nimport 'react-semantic-toasts/styles/react-semantic-alert.css';\r\n\r\n\r\n\r\n\r\nimport EditProcMainForm from \"./secretary-edit-appointment-modal-form\"\r\n\r\n\r\n\r\n\r\n\r\nclass EditModal extends Component {\r\n    constructor(props){\r\n    \r\n      super(props);\r\n      \r\n      this.state ={\r\n            appointment: this.props.appointment,\r\n            app_id: this.props.appointment._id,\r\n            firstname: this.props.appointment.firstname,\r\n            lastname: this.props.appointment.lastname,\r\n            procedures: this.props.appointment.process,\r\n            notes: this.props.appointment.notes,\r\n            date: moment(this.props.appointment.date).toDate(),\r\n            doctors: this.props.appointment.doctor,\r\n            patientcontact: this.props.appointment.patientcontact,\r\n            time: moment(this.props.appointment.time, \"h:mm A\").toDate(),\r\n            currentProcs:[],\r\n            currentDocs:[],\r\n            procs:this.props.appointment.process,\r\n            docs:this.props.appointment.doctor,\r\n            error: {\r\n              firstname: false,\r\n              lastname: false,\r\n              username: false,\r\n              password: false,\r\n              patientcontact: false,\r\n              time: false,\r\n              date:false,\r\n              doctors: false,\r\n              procedures: false\r\n    \r\n          },\r\n        open: false,\r\n        secondopen:false,\r\n        step: 1,\r\n      }\r\n      this.setOpen = this.setOpen.bind(this);\r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.handleDate = this.handleDate.bind(this);\r\n      this.handletime = this.handleDate.bind(this);\r\n      this.handleDoctorChange = this.handleDoctorChange.bind(this);\r\n    }\r\n\r\n    \r\n\r\n    componentDidMount(){\r\n\r\n      //Changes back the procedures and doctors to IDs rather than objects\r\n      this.setState({\r\n        procedures:[\r\n          this.state.procedures.map(procedure=>{\r\n            return procedure._id\r\n          })\r\n        ],\r\n        doctors:[\r\n          this.state.doctors.map(doctor=>{\r\n            return doctor._id\r\n          })\r\n        ],\r\n        currentProcs:[\r\n            this.state.procedures.map(procedure=>{\r\n                return procedure.processname\r\n              })\r\n        ],\r\n        currentDocs:[\r\n            this.state.doctors.map(doctor=>{\r\n                return  \"Dr. \"+ doctor.lastname\r\n              })\r\n        ],\r\n            procs:this.props.appointment.process,\r\n            docs:this.props.appointment.doctor,\r\n      })\r\n    }\r\n\r\n    componentDidUpdate(){\r\n      if(this.state.docs !== this.props.appointment.doctor || this.state.procs !== this.props.appointment.process){\r\n        this.handleChangeInEdit()\r\n      }\r\n    }\r\n    handleChangeInEdit=()=>{\r\n      this.setState({\r\n        procedures:[\r\n          this.props.appointment.process.map(procedure=>{\r\n            return procedure._id\r\n          })\r\n        ],\r\n        doctors:[\r\n          this.props.appointment.doctor.map(doctor=>{\r\n            return doctor._id\r\n          })\r\n        ],\r\n        currentProcs:[\r\n            this.props.appointment.process.map(procedure=>{\r\n                return procedure.processname\r\n              })\r\n        ],\r\n        currentDocs:[\r\n            this.props.appointment.doctor.map(doctor=>{\r\n                return  \"Dr. \"+ doctor.lastname\r\n              })\r\n        ],\r\n        procs: this.props.appointment.process,\r\n        docs: this.props.appointment.doctor\r\n      })\r\n    }\r\n    handleValidation=()=>{\r\n      const checkfirst = /^[a-z A-Z]+$/;\r\n      const checklast = /^[a-z A-Z.\\-_]+$/;\r\n      const checkcontact = /^[+-]?\\d{7,12}$/;\r\n\r\n      let firstname = this.state.firstname.trim();\r\n      let lastname = this.state.lastname.trim();\r\n      let patientcontact = this.state.patientcontact.trim();\r\n      let procedures = this.state.procedures.filter(function(el){return el;});\r\n      let date = this.state.date;\r\n      let time = this.state.time;\r\n      let doctors = this.state.doctors.filter(function(el){return el;});\r\n\r\n      let error = this.state.error;\r\n      let formIsValid = true;\r\n\r\n      console.log(\"Procedures num: \"+procedures.toString())\r\n      console.log(\"Doctors num: \"+doctors.toString())\r\n\r\n      if(moment(moment(time, \"h:mm A\").toDate()).isBefore(moment().toDate()) && moment(date).isSame(moment().toDate(), 'day')){\r\n          error['time']= true;\r\n          toast({\r\n            type: \"error\",\r\n            title: \"Error\",\r\n            description: <p>Please input valid time</p>,\r\n            icon: \"cancel\",\r\n          });\r\n          formIsValid = false;\r\n      }\r\n      if(firstname === \"\"|| !firstname.match(checkfirst)){\r\n        error['firstname']= true;\r\n        toast({\r\n          type: \"error\",\r\n          title: \"Error\",\r\n          description: <p>Please input a valid firstname</p>,\r\n          icon: \"cancel\",\r\n        });\r\n        formIsValid = false;\r\n\r\n      } else if( firstname.length < 2){\r\n        error['firstname'] = true;\r\n        toast({\r\n          type: \"error\",\r\n          title: \"Error\",\r\n          description: <p>Firstname is too short</p>,\r\n          icon: \"cancel\",\r\n        });\r\n        formIsValid = false;\r\n      }\r\n      if(lastname ===  \"\"|| !lastname.match(checklast)){\r\n        error[\"lastname\"] = true;\r\n        toast({\r\n          type: \"error\",\r\n          title: \"Error\",\r\n          description: <p>Please input a valid lastname</p>,\r\n          icon: \"cancel\",\r\n        });\r\n        formIsValid = false;\r\n      } else if(lastname.length < 2){\r\n        error[\"lastname\"] = true;\r\n        toast({\r\n            type: \"error\",\r\n            title: \"Error\",\r\n            description: <p>Lastname is too short</p>,\r\n            icon: \"cancel\",\r\n        });\r\n        formIsValid = false;\r\n      }\r\n\r\n      if(patientcontact === \"\" || !patientcontact.match(checkcontact)){\r\n        error['patientcontact']= true;\r\n        toast({\r\n          type: \"error\",\r\n          title: \"Error\",\r\n          description: <p>Please input a valid contact number</p>,\r\n          icon: \"cancel\",\r\n        });\r\n        formIsValid = false;\r\n      }\r\n\r\n      if(procedures.length < 1 || procedures === null){\r\n        error['procedures']= true;\r\n        toast({\r\n          type: \"error\",\r\n          title: \"Error\",\r\n          description: <p>Must have at least 1 procedure</p>,\r\n          icon: \"cancel\",\r\n        });\r\n        formIsValid = false;\r\n      }\r\n\r\n      if(doctors.length < 1 || doctors === null){\r\n        error['doctors']= true;\r\n        toast({\r\n          type: \"error\",\r\n          title: \"Error\",\r\n          description: <p>Must have at least 1 doctor</p>,\r\n          icon: \"cancel\",\r\n        });\r\n        formIsValid = false;\r\n      }\r\n\r\n      \r\n      \r\n        return formIsValid\r\n\r\n\r\n    } \r\n\r\n    //function for opening and closing the modal\r\n    handleClose=()=>{\r\n      this.setState({\r\n        appointment: this.props.appointment,\r\n        app_id: this.props.appointment._id,\r\n        firstname: this.props.appointment.firstname,\r\n        lastname: this.props.appointment.lastname,\r\n        procedures: this.props.appointment.process,\r\n        notes: this.props.appointment.notes,\r\n        date: moment(this.props.appointment.date).toDate(),\r\n        doctors: this.props.appointment.doctor,\r\n        patientcontact: this.props.appointment.patientcontact,\r\n        time: moment(this.props.appointment.time, \"h:mm A\").toDate(),\r\n        currentProcs:[],\r\n        currentDocs:[],\r\n        procs:this.props.appointment.process,\r\n        docs:this.props.appointment.doctor,\r\n        open: false,\r\n        step: 1,\r\n        })\r\n        this.handleChangeInEdit();\r\n        setTimeout(() => {\r\n          toast(\r\n              {\r\n                  description: <p>Appointment Creation cancelled</p>,\r\n                  icon: 'check',\r\n                  animation: 'slide up',\r\n                  time:1000,\r\n                  color: 'red'\r\n\r\n              },\r\n              () => console.log('toast closed'),\r\n          );\r\n      }, 1000)\r\n    }\r\n\r\n    setOpen2 =()=>{\r\n      this.setState({\r\n        secondopen: !this.state.secondopen\r\n      })\r\n    }\r\n    setOpen(){\r\n      if(moment(this.state.date).isSame(moment().toDate(), 'day') && moment(this.state.time).isBefore(moment().toDate())){\r\n        console.log(\"1\")\r\n        setTimeout(() => {\r\n          toast(\r\n              {\r\n                  description: <p>Cannot edit past dates</p>,\r\n                  icon: 'clock',\r\n                  animation: 'slide up',\r\n                  time:1000,\r\n                  color: 'red'\r\n  \r\n              },\r\n              () => console.log('toast closed')\r\n          );\r\n          }, 1000)\r\n        this.setState({\r\n            open:false\r\n        })\r\n      }\r\n      else if(moment(this.state.date).isBefore(moment().toDate(), 'day')){\r\n        console.log(\"2\")\r\n            setTimeout(() => {\r\n            toast(\r\n                {\r\n                    description: <p>Cannot edit past dates</p>,\r\n                    icon: 'clock',\r\n                    animation: 'slide up',\r\n                    time:1000,\r\n                    color: 'red'\r\n    \r\n                },\r\n                () => console.log('toast closed')\r\n            );\r\n            }, 1000)\r\n          this.setState({\r\n              open:false\r\n          })\r\n      }\r\n      \r\n      else{\r\n          this.setState({\r\n        open: !this.state.open,\r\n        step : 1\r\n            })\r\n        }\r\n    }\r\n\r\n    //Function for submitting values\r\n    handleChange = input => e =>{\r\n      this.setState({\r\n        [input]: e.target.value\r\n      })\r\n      console.log(e.target.value)\r\n    }\r\n    handleSubmit=e=>{\r\n      e.preventDefault()\r\n      const appointment = {\r\n        appointmentID: this.state.app_id,\r\n        firstname:this.state.firstname,\r\n        lastname:this.state.lastname,\r\n        patientcontact: this.state.patientcontact,\r\n        procedures: this.state.procedures,\r\n        notes:this.state.notes,\r\n        date:this.state.date,\r\n        time:this.state.time,\r\n        doctors:this.state.doctors,\r\n      }\r\n      if(Array.isArray(this.state.procedures[0])){\r\n        appointment.procedures = this.state.procedures[0]\r\n      }\r\n      if(Array.isArray(this.state.doctors[0])){\r\n        appointment.doctors = this.state.doctors[0]\r\n      }\r\n\r\n      axios.post('http://localhost:3000/secretary/edit', appointment).then(res => {\r\n        console.log(res.data)\r\n        this.props.handleWeekAppointmentUpdate();\r\n        this.props.handleDocWeekAppointmentUpdate();\r\n      });\r\n      setTimeout(() => {\r\n        toast(\r\n            {\r\n                description: <p>Appointment Created</p>,\r\n                icon: 'check',\r\n                animation: 'slide up',\r\n                time:1000,\r\n                color: 'green'\r\n\r\n            },\r\n            () => console.log('toast closed'),\r\n\r\n        );\r\n    }, 1000)\r\n    \r\n    this.setOpen();\r\n    this.setOpen2();\r\n    \r\n    } \r\n\r\n    deleteAppointment=()=>{\r\n      const appID = {\r\n        appointmentID : this.state.app_id\r\n      }\r\n      axios.post('/secretary/delete', appID).then(res=>{\r\n        console.log(res.data)\r\n        this.props.handleWeekAppointmentUpdate()\r\n      });\r\n      setTimeout(() => {\r\n        toast(\r\n            {\r\n                description: <p>Appointment Deleted</p>,\r\n                icon: 'check',\r\n                animation: 'slide up',\r\n                time:1000,\r\n                color: 'green'\r\n\r\n            },\r\n            () => console.log('toast closed'),\r\n        );\r\n    }, 1000)\r\n      this.setOpen();\r\n      this.setOpen2();\r\n      \r\n    }\r\n\r\n    //Datepicker change\r\n    handleDate(date){\r\n      this.setState({\r\n        date:date\r\n      })\r\n\r\n      console.log(date)\r\n     \r\n    }\r\n\r\n    handleDoctorChange =(e, {value}) => {\r\n        this.setState({doctors:value})\r\n        console.log(value)\r\n\r\n      }\r\n\r\n      handleProcessChange =(e, {value}) => {\r\n        this.setState({procedures:value})\r\n        console.log(value)\r\n\r\n      }\r\n\r\n    //Step changes in changing the prop\r\n    //Proceeds to next step\r\n    nextStep =()=>{\r\n      const {step} = this.state;\r\n      this.setState({\r\n          step: step+1\r\n      });\r\n    }\r\n\r\n    //Proceeds to previous step\r\n    prevStep =()=>{\r\n        const {step} = this.state;\r\n        this.setState({\r\n            step: step-1\r\n        });\r\n    }\r\n    handleTime=(time)=>{\r\n      this.setState({\r\n        time:time\r\n      })\r\n      console.log(time)\r\n    }\r\n\r\n  \r\n    render(){\r\n      const {firstname, lastname, patientcontact, procedures, notes, date, time, doctors, error} = this.state;\r\n      const values = {firstname, lastname, patientcontact, procedures, notes, date, time, doctors, error}\r\n      let button;\r\n      let button2;\r\n      let button3;\r\n      if(this.state.step === 1){\r\n        button = <Button onClick={this.nextStep} type='button'>Next</Button>\r\n      } else{\r\n        button = <Button type=\"button\" color=\"green\" onClick={this.handleSubmit}>Submit</Button>\r\n        button2 = <Button onClick={this.prevStep}>Back</Button>\r\n        button3 = <Button onClick={this.setOpen2} color=\"red\"><Icon name=\"trash\"/>Delete</Button>\r\n      }\r\n\r\n      if(this.state.date === moment().toDate()){\r\n          console.log(\"I won't let you edit this\")\r\n      }\r\n      else{\r\n        return (\r\n            <>\r\n            <SemanticToastContainer position='top-center'></SemanticToastContainer>\r\n            <Modal\r\n                onClose={this.setOpen}\r\n                onOpen={this.setOpen}\r\n                open={this.state.open}\r\n                as={Form}\r\n                // onSubmit={this.handleSubmit}\r\n                trigger={\r\n                    <Card> \r\n                    <Card.Header id={this.props.appointment.firstname+\"_\"+this.props.appointment.lastname}>\r\n                        {this.props.appointment.firstname+\" \"+this.props.appointment.lastname}\r\n                    </Card.Header>\r\n                </Card>\r\n                }\r\n            >\r\n            \r\n            <Modal.Content>\r\n                    <EditProcMainForm\r\n                        handleChange = {this.handleChange}\r\n                        handleDoctorChange = {this.handleDoctorChange}\r\n                        handleProcessChange = {this.handleProcessChange}\r\n                        handleDate = {this.handleDate}\r\n                        handleTime = {this.handleTime}\r\n                        setOpen = {this.setOpen}\r\n                        prevStep = {this.prevStep}\r\n                        nextStep = {this.nextStep}\r\n                        step = {this.state.step}\r\n                        values={values}\r\n\r\n                    />\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button onClick={this.handleClose}>Cancel</Button>\r\n                {button2}\r\n                {button3}\r\n                {button}\r\n                \r\n            </Modal.Actions>\r\n\r\n                <Modal\r\n                    closeIcon\r\n                    onClose={this.setOpen2}\r\n                    open={this.state.secondopen}\r\n                    size=\"small\"\r\n                    // as={Form}\r\n                    // // onSubmit={this.hello}\r\n                    // trigger={<Button>Delete</Button>}\r\n                >\r\n                    <Modal.Header as={'h2'}>\r\n                      <p>Confirm Delete</p>\r\n                    </Modal.Header>\r\n                    <Modal.Content>\r\n                      <p>  Are you sure you want to delete this appointment?</p>\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                        <Button onClick={this.setOpen2}>\r\n                            <Icon name=\"cancel\"/>\r\n                            Cancel\r\n                        </Button>\r\n                        <Button onClick={this.deleteAppointment} color=\"green\">\r\n                            <Icon name=\"check\"/>\r\n                            Confirm\r\n                        </Button>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n            </Modal>\r\n            </>\r\n            \r\n            \r\n        )\r\n        }\r\n    }\r\n  }\r\nexport default EditModal","import Axios from 'axios';\r\nimport React, {Component} from 'react';\r\nimport {Tab, Table, TableRow} from 'semantic-ui-react';\r\nimport AppointmentCard from './secretary-edit-appointment-modal'\r\n\r\n/* CSS FILES */\r\nimport '../secretary_css/secretary-view.css'\r\n\r\nclass week_all extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state={\r\n            appointments:this.props.appointments,\r\n            weeks: this.props.week,\r\n        }\r\n\r\n    }\r\n    \r\n\r\n    // componentDidMount(){\r\n    //    const week = {\r\n    //        weeks: this.state.weeks\r\n    //    }\r\n    //     Axios.post('http://localhost:3000/secretary/week_all', week).then(res =>{\r\n    //         return this.setState({\r\n    //             appointments: res.data.data.data\r\n    //         })\r\n            \r\n    //     })\r\n        \r\n    // }\r\n\r\n    componentDidUpdate(){\r\n        if(this.props.week != this.state.weeks){\r\n            console.log(\"Hello\")\r\n            this.props.handleWeekAppointmentUpdate()\r\n            this.setState({\r\n                weeks: this.props.week\r\n            })\r\n        }\r\n    }\r\n    render(){\r\n        console.log(\"prop: \")\r\n        console.log(this.props.week)\r\n        console.log(\"state: \")\r\n        console.log(this.state.weeks)\r\n       return(\r\n            <>\r\n                <Table id=\"table-header-title\" compact>\r\n                    <Table.Header fullWidth>\r\n                        <TableRow textAlign='center'>\r\n                            <Table.Cell>Weekly Appointments</Table.Cell>\r\n                        </TableRow>\r\n                    </Table.Header>\r\n                </Table>\r\n                <Table id='week_all' celled fixed textAlign='center' compact>\r\n                    <Table.Body>\r\n                    {\r\n                        this.props.appointments.map(({slot, weekAppointments}, index)=>{\r\n                            return(\r\n                            <Table.Row key={index} name={'week-all-row-'+index}>\r\n                                <Table.Cell id=\"week-all-time-cell\">{slot}</Table.Cell>\r\n                                {   \r\n                                    weekAppointments.map(({appointments}, index)=>{\r\n                                        return( <Table.Cell id={'week-all-table-cell'} name={'week-all-td-'+index}>\r\n                                                        {\r\n                                                           appointments.map((appointment)=>\r\n                                                                        <AppointmentCard id={\"secretary-appointment-card-\" + appointment._id}\r\n                                                                            appointment={appointment}\r\n                                                                            handleWeekAppointmentUpdate={this.props.handleWeekAppointmentUpdate}\r\n                                                                            handleDocWeekAppointmentUpdate={this.props.handleDocWeekAppointmentUpdate}\r\n                                                                        />\r\n                                                            )\r\n                                                        }\r\n                \r\n                                            </Table.Cell>)\r\n                                  })\r\n                                }\r\n                            </Table.Row>\r\n                            )\r\n                        })\r\n                    }\r\n                    </Table.Body>\r\n                </Table>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default week_all\r\n","import React, {Component} from 'react';\r\nimport moment from 'moment';\r\nimport {Modal, Form, Button, Icon, Card} from 'semantic-ui-react'\r\nimport axios from 'axios'\r\nimport { SemanticToastContainer, toast } from 'react-semantic-toasts';\r\nimport 'react-semantic-toasts/styles/react-semantic-alert.css';\r\nimport EditProcMainForm from \"./secretary-edit-appointment-modal-form\"\r\nimport '../secretary_css/secretary-view.css'\r\n\r\n\r\n\r\n\r\n\r\nexport default class EditModal extends Component {\r\n    constructor(props){\r\n    \r\n      super(props);\r\n      \r\n      this.state ={\r\n          appointment: this.props.appointment,\r\n            app_id: this.props.appointment._id,\r\n            firstname: this.props.appointment.firstname,\r\n            lastname: this.props.appointment.lastname,\r\n            procedures: this.props.appointment.process,\r\n            notes: this.props.appointment.notes,\r\n            date: moment(this.props.appointment.date).toDate(),\r\n            doctors: this.props.appointment.doctor,\r\n            patientcontact: this.props.appointment.patientcontact,\r\n            time: moment(this.props.appointment.time, \"h:mm A\").toDate(),\r\n            currentProcs:[],\r\n            currentDocs:[],\r\n            procs:this.props.appointment.process,\r\n            docs:this.props.appointment.doctor,\r\n            error: {\r\n              firstname: false,\r\n              lastname: false,\r\n              username: false,\r\n              password: false,\r\n              patientcontact: false,\r\n              time: false,\r\n              date:false,\r\n              doctors: false,\r\n              procedures: false\r\n    \r\n          },\r\n        open: false,\r\n        secondopen:false,\r\n        step: 1,\r\n      }\r\n      this.setOpen = this.setOpen.bind(this);\r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.handleDate = this.handleDate.bind(this);\r\n      this.handletime = this.handleDate.bind(this);\r\n      this.handleDoctorChange = this.handleDoctorChange.bind(this);\r\n    }\r\n\r\n    \r\n\r\n    componentDidMount(){\r\n      //Changes back the procedures and doctors to IDs rather than objects\r\n      this.setState({\r\n        docs: this.state.doctors,\r\n        procs: this.state.procedures,\r\n        procedures:[\r\n          this.state.procedures.map(procedure=>{\r\n            return procedure._id\r\n          })\r\n        ],\r\n        doctors:[\r\n          this.state.doctors.map(doctor=>{\r\n            return doctor._id\r\n          })\r\n        ],\r\n        currentProcs:[\r\n            this.state.procedures.map(procedure=>{\r\n                return procedure.processname\r\n              })\r\n        ],\r\n        currentDocs:[\r\n            this.state.doctors.map(doctor=>{\r\n                return  \"Dr. \"+ doctor.lastname\r\n              })\r\n        ]\r\n      })\r\n\r\n      \r\n\r\n    }\r\n\r\n    componentDidUpdate(){\r\n      if(this.state.procs !== this.props.appointment.process){\r\n          this.setState({\r\n        procedures:[\r\n          this.props.appointment.process.map(procedure=>{\r\n            return procedure._id\r\n          })\r\n        ],\r\n        doctors:[\r\n          this.props.appointment.doctor.map(doctor=>{\r\n            return doctor._id\r\n          })\r\n        ],\r\n        currentProcs:[\r\n            this.props.appointment.process.map(procedure=>{\r\n                return procedure.processname\r\n              })\r\n        ],\r\n        currentDocs:[\r\n            this.props.appointment.doctor.map(doctor=>{\r\n                return  \"Dr. \"+ doctor.lastname\r\n              })\r\n        ],\r\n        procs: this.props.appointment.process,\r\n        docs: this.props.appointment.doctor\r\n\r\n      })\r\n      }\r\n      \r\n      \r\n    }\r\n\r\n\r\n    handleValidation=()=>{\r\n      const checkfirst = /^[a-z A-Z]+$/;\r\n      const checklast = /^[a-z A-Z.\\-_]+$/;\r\n      const checkcontact = /^[+-]?\\d{7,12}$/;\r\n\r\n      let firstname = this.state.firstname.trim();\r\n      let lastname = this.state.lastname.trim();\r\n      let patientcontact = this.state.patientcontact.trim();\r\n      let procedures = this.state.procedures.filter(function(el){return el;});\r\n      let date = this.state.date;\r\n      let time = this.state.time;\r\n      let doctors = this.state.doctors.filter(function(el){return el;});\r\n\r\n      let error = this.state.error;\r\n      let formIsValid = true;\r\n\r\n      console.log(\"Procedures num: \"+procedures.toString())\r\n      console.log(\"Doctors num: \"+doctors.toString())\r\n\r\n      if(moment(moment(time, \"h:mm A\").toDate()).isBefore(moment().toDate()) && moment(date).isSame(moment().toDate(), 'day')){\r\n          error['time']= true;\r\n          toast({\r\n            type: \"error\",\r\n            title: \"Error\",\r\n            description: <p>Please input valid time</p>,\r\n            icon: \"cancel\",\r\n          });\r\n          formIsValid = false;\r\n      }\r\n      if(firstname === \"\"|| !firstname.match(checkfirst)){\r\n        error['firstname']= true;\r\n        toast({\r\n          type: \"error\",\r\n          title: \"Error\",\r\n          description: <p>Please input a valid firstname</p>,\r\n          icon: \"cancel\",\r\n        });\r\n        formIsValid = false;\r\n\r\n      } else if( firstname.length < 2){\r\n        error['firstname'] = true;\r\n        toast({\r\n          type: \"error\",\r\n          title: \"Error\",\r\n          description: <p>Firstname is too short</p>,\r\n          icon: \"cancel\",\r\n        });\r\n        formIsValid = false;\r\n      }\r\n      if(lastname ===  \"\"|| !lastname.match(checklast)){\r\n        error[\"lastname\"] = true;\r\n        toast({\r\n          type: \"error\",\r\n          title: \"Error\",\r\n          description: <p>Please input a valid lastname</p>,\r\n          icon: \"cancel\",\r\n        });\r\n        formIsValid = false;\r\n      } else if(lastname.length < 2){\r\n        error[\"lastname\"] = true;\r\n        toast({\r\n            type: \"error\",\r\n            title: \"Error\",\r\n            description: <p>Lastname is too short</p>,\r\n            icon: \"cancel\",\r\n        });\r\n        formIsValid = false;\r\n      }\r\n\r\n      if(patientcontact === \"\" || !patientcontact.match(checkcontact)){\r\n        error['patientcontact']= true;\r\n        toast({\r\n          type: \"error\",\r\n          title: \"Error\",\r\n          description: <p>Please input a valid contact number</p>,\r\n          icon: \"cancel\",\r\n        });\r\n        formIsValid = false;\r\n      }\r\n\r\n      if(procedures.length < 1 || procedures === null){\r\n        error['procedures']= true;\r\n        toast({\r\n          type: \"error\",\r\n          title: \"Error\",\r\n          description: <p>Must have at least 1 procedure</p>,\r\n          icon: \"cancel\",\r\n        });\r\n        formIsValid = false;\r\n      }\r\n\r\n      if(doctors.length < 1 || doctors === null){\r\n        error['doctors']= true;\r\n        toast({\r\n          type: \"error\",\r\n          title: \"Error\",\r\n          description: <p>Must have at least 1 doctor</p>,\r\n          icon: \"cancel\",\r\n        });\r\n        formIsValid = false;\r\n      }\r\n\r\n      \r\n      \r\n        return formIsValid\r\n\r\n\r\n    } \r\n\r\n    handleChangeInEdit=()=>{\r\n      this.setState({\r\n        procedures:[\r\n          this.props.appointment.process.map(procedure=>{\r\n            return procedure._id\r\n          })\r\n        ],\r\n        doctors:[\r\n          this.props.appointment.doctor.map(doctor=>{\r\n            return doctor._id\r\n          })\r\n        ],\r\n        currentProcs:[\r\n            this.props.appointment.process.map(procedure=>{\r\n                return procedure.processname\r\n              })\r\n        ],\r\n        currentDocs:[\r\n            this.props.appointment.doctor.map(doctor=>{\r\n                return  \"Dr. \"+ doctor.lastname\r\n              })\r\n        ],\r\n        procs: this.props.appointment.process,\r\n        docs: this.props.appointment.doctor\r\n\r\n      })\r\n    }\r\n\r\n\r\n    //function for opening and closing the modal\r\n    handleClose=()=>{\r\n      this.setState({\r\n            appointment: this.props.appointment,\r\n            app_id: this.props.appointment._id,\r\n            firstname: this.props.appointment.firstname,\r\n            lastname: this.props.appointment.lastname,\r\n            procedures: this.props.appointment.process,\r\n            notes: this.props.appointment.notes,\r\n            date: moment(this.props.appointment.date).toDate(),\r\n            doctors: this.props.appointment.doctor,\r\n            patientcontact: this.props.appointment.patientcontact,\r\n            time: moment(this.props.appointment.time, \"h:mm A\").toDate(),\r\n            currentProcs:[],\r\n            currentDocs:[],\r\n            procs:this.props.appointment.process,\r\n            docs:this.props.appointment.doctor,\r\n            open: false,\r\n            step: 1,\r\n      })\r\n      this.handleChangeInEdit();\r\n      setTimeout(() => {\r\n        toast(\r\n            {\r\n                description: <p>Appointment Creation cancelled</p>,\r\n                icon: 'check',\r\n                animation: 'slide up',\r\n                time:1000,\r\n                color: 'red'\r\n\r\n            },\r\n            () => console.log('toast closed'),\r\n        );\r\n    }, 1000)\r\n    }\r\n\r\n    \r\n\r\n    setOpen2 =()=>{\r\n      this.setState({\r\n        secondopen: !this.state.secondopen\r\n      })\r\n    }\r\n\r\n\r\n    setOpen(){\r\n\r\n      if(moment(this.state.date).isSame(moment().toDate(), 'day') && moment(this.state.time).isBefore(moment().toDate())){\r\n        console.log(\"1\")\r\n        setTimeout(() => {\r\n          toast(\r\n              {\r\n                  description: <p>Cannot edit past dates</p>,\r\n                  icon: 'clock',\r\n                  animation: 'slide up',\r\n                  time:1000,\r\n                  color: 'red'\r\n  \r\n              },\r\n              () => console.log('toast closed')\r\n          );\r\n          }, 1000)\r\n        this.setState({\r\n            open:false\r\n        })\r\n      }\r\n      else if(moment(this.state.date).isBefore(moment().toDate(), 'day')){\r\n        console.log(\"2\")\r\n            setTimeout(() => {\r\n            toast(\r\n                {\r\n                    description: <p>Cannot edit past dates</p>,\r\n                    icon: 'clock',\r\n                    animation: 'slide up',\r\n                    time:1000,\r\n                    color: 'red'\r\n    \r\n                },\r\n                () => console.log('toast closed')\r\n            );\r\n            }, 1000)\r\n          this.setState({\r\n              open:false\r\n          })\r\n      }\r\n      \r\n      else{\r\n          this.setState({\r\n        open: !this.state.open,\r\n        step : 1\r\n            })\r\n        }\r\n      \r\n    }\r\n\r\n    //Function for submitting values\r\n    handleChange = input => e =>{\r\n      this.setState({\r\n        [input]: e.target.value\r\n      })\r\n      console.log(e.target.value)\r\n    }\r\n    handleSubmit=(e)=>{\r\n\r\n      \r\n      \r\n      e.preventDefault()\r\n      if(this.handleValidation()){\r\n        \r\n          const appointment = {\r\n          appointmentID: this.state.app_id,\r\n          firstname:this.state.firstname,\r\n          lastname:this.state.lastname,\r\n          patientcontact: this.state.patientcontact,\r\n          procedures: this.state.procedures,\r\n          notes:this.state.notes,\r\n          date:this.state.date,\r\n          time:this.state.time,\r\n          doctors:this.state.doctors,\r\n        }\r\n        if(Array.isArray(this.state.procedures[0])){\r\n          appointment.procedures = this.state.procedures[0]\r\n        }\r\n        if(Array.isArray(this.state.doctors[0])){\r\n          appointment.doctors = this.state.doctors[0]\r\n        }\r\n\r\n        axios.post('http://localhost:3000/secretary/edit', appointment).then(res => {\r\n          console.log(res.data)\r\n          this.props.handleDayAppointmentUpdate()\r\n          this.props.handleDayDocAppointmentUpdate()\r\n\r\n        \r\n        });\r\n        setTimeout(() => {\r\n          toast(\r\n              {\r\n                  description: <p>Appointment Updated</p>,\r\n                  icon: 'check',\r\n                  animation: 'slide up',\r\n                  time:1000,\r\n                  color: 'green'\r\n\r\n              },\r\n              () => console.log('toast closed'),\r\n          );\r\n      }, 1000)\r\n        this.setOpen();\r\n    }else{\r\n      toast({\r\n        type: 'error',\r\n        title: 'Error',\r\n        description: <p>Invalid Appointment</p>,\r\n        icon: \"cancel\"\r\n      })\r\n    }\r\n      \r\n    }\r\n    \r\n    deleteAppointment=()=>{\r\n      console.log(\"Deleting...\")\r\n      const appID = {\r\n        appointmentID : this.state.app_id\r\n      }\r\n      axios.post('/secretary/delete', appID).then(res=>{\r\n        console.log(res.data)\r\n        this.props.handleDayAppointmentUpdate()\r\n      });\r\n      setTimeout(() => {\r\n        toast(\r\n            {\r\n                description: <p>Appointment Deleted</p>,\r\n                icon: 'check',\r\n                animation: 'slide up',\r\n                time:1000,\r\n                color: 'green'\r\n\r\n            },\r\n            () => console.log('toast closed'),\r\n        );\r\n    }, 1000)\r\n      this.setOpen();\r\n      this.setOpen2();\r\n      \r\n    }\r\n\r\n    //Datepicker change\r\n    handleDate(date){\r\n      this.setState({\r\n        date:date\r\n      })\r\n\r\n      console.log(date)\r\n     \r\n    }\r\n\r\n    handleDoctorChange =(e, {value}) => {\r\n        this.setState({doctors:value})\r\n        console.log(value)\r\n\r\n      }\r\n\r\n      handleProcessChange =(e, {value}) => {\r\n        this.setState({procedures:value})\r\n        console.log(value)\r\n\r\n      }\r\n\r\n    //Step changes in changing the prop\r\n    //Proceeds to next step\r\n    nextStep =()=>{\r\n      const {step} = this.state;\r\n      this.setState({\r\n          step: step+1\r\n      });\r\n    }\r\n\r\n    //Proceeds to previous step\r\n    prevStep =()=>{\r\n        const {step} = this.state;\r\n        this.setState({\r\n            step: step-1\r\n        });\r\n    }\r\n    handleTime=(time)=>{\r\n      this.setState({\r\n        time:time\r\n      })\r\n      console.log(time)\r\n    }\r\n\r\n  \r\n    render(){\r\n      const {firstname, lastname, patientcontact, procedures, notes, date, time, doctors, error} = this.state;\r\n      const values = {firstname, lastname, patientcontact, procedures, notes, date, time, doctors, error}\r\n      let button;\r\n      let button2;\r\n      let button3;\r\n      if(this.state.step === 1){\r\n        button = <Button onClick={this.nextStep} type='button'>Next</Button>\r\n      } else{\r\n        button = <Button type=\"button\" color=\"green\" onClick={this.handleSubmit}>Submit</Button>\r\n        button2 = <Button onClick={this.prevStep}>Back</Button>\r\n        button3 = <Button onClick={this.setOpen2} color=\"red\"><Icon name=\"trash\"/>Delete</Button>\r\n      }\r\n\r\n        return (\r\n            <>\r\n            <SemanticToastContainer position='top-center'></SemanticToastContainer>\r\n            <Modal\r\n                onClose={this.setOpen}\r\n                onOpen={this.setOpen}\r\n                open={this.state.open}\r\n                as={Form}\r\n                // onSubmit={this.handleSubmit}\r\n                trigger={\r\n                    <Card fluid id=\"secretary-card-day\"> \r\n                        <Card.Header>\r\n                            {this.props.appointment.firstname+\" \"+this.props.appointment.lastname}\r\n                        </Card.Header>\r\n                        <Card.Content>\r\n                            <span className=\"secretary-card-day-content\">🦷: {this.state.currentProcs.join(\", \")}</span><br/>\r\n                            <span className=\"secretary-card-day-content\">📱: {patientcontact}</span><br/>\r\n                            <span className=\"secretary-card-day-content\">👨‍⚕️: {this.state.currentDocs.join(\", \")}</span>\r\n                        </Card.Content>\r\n                    </Card>\r\n                }\r\n            >\r\n            \r\n            <Modal.Content>\r\n                    <EditProcMainForm\r\n                        handleChange = {this.handleChange}\r\n                        handleDoctorChange = {this.handleDoctorChange}\r\n                        handleProcessChange = {this.handleProcessChange}\r\n                        handleDate = {this.handleDate}\r\n                        handleTime = {this.handleTime}\r\n                        setOpen = {this.setOpen}\r\n                        prevStep = {this.prevStep}\r\n                        nextStep = {this.nextStep}\r\n                        step = {this.state.step}\r\n                        values={values}\r\n\r\n                    />\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button onClick={this.handleClose}>Cancel</Button>\r\n                {button2}\r\n                {button3}\r\n                {button}\r\n\r\n                \r\n            </Modal.Actions>\r\n\r\n              <Modal\r\n                    closeIcon\r\n                    onClose={this.setOpen2}\r\n                    open={this.state.secondopen}\r\n                    size=\"small\"\r\n                    // as={Form}\r\n                    // // onSubmit={this.hello}\r\n                    // trigger={<Button>Delete</Button>}\r\n                >\r\n                    <Modal.Header as={'h2'}>\r\n                      <p>Confirm Delete</p>\r\n                    </Modal.Header>\r\n                    <Modal.Content>\r\n                      <p>  Are you sure you want to delete this appointment?</p>\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                        <Button onClick={this.setOpen2}>\r\n                            <Icon name=\"cancel\"/>\r\n                            Cancel\r\n                        </Button>\r\n                        <Button onClick={this.deleteAppointment} color=\"green\">\r\n                            <Icon name=\"check\"/>\r\n                            Confirm\r\n                        </Button>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n            </Modal>\r\n            </>\r\n            \r\n            \r\n        )\r\n     }\r\n  }","import Axios from 'axios';\r\nimport React, {Component} from 'react';\r\nimport {Tab, Table} from 'semantic-ui-react';\r\nimport AppointmentCard from './secretary-edit-appointment-modal-day-all'\r\nimport moment from 'moment'\r\nimport '../secretary_css/secretary-view.css'    \r\n\r\nclass day_all extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state={\r\n            appointments:this.props.appointments,\r\n            day: this.props.day,\r\n        }\r\n\r\n    }\r\n    \r\n    componentDidMount(){\r\n        this.props.handleDayAppointmentUpdate()\r\n        console.log(\"Im in secretary-day-all componentDidMount\")\r\n        this.setState({\r\n            appointments:this.props.appointments\r\n        })\r\n    }\r\n\r\n\r\n    componentDidUpdate(){\r\n        if(this.props.day != this.state.day){\r\n            console.log(\"Date Changed\")\r\n            this.props.handleDayAppointmentUpdate()\r\n            this.setState({\r\n                    day: this.props.day,\r\n                })\r\n        }\r\n    }\r\n    render(){\r\n\r\n       return(\r\n           <>\r\n            <Table id=\"table-header-title\" compact>\r\n                    <Table.Header fullWidth>\r\n                        <Table.Row textAlign='center'>\r\n                            <Table.Cell>Daily Appointments</Table.Cell>\r\n                        </Table.Row>\r\n                    </Table.Header>\r\n                </Table>\r\n                <Table id='week_all' celled fixed textAlign='center' compact>\r\n                    <Table.Body>\r\n                    {\r\n                        this.props.appointments.map(({slot, appointments}, index)=>{\r\n                            return(\r\n                            <Table.Row key={index}>\r\n                                <Table.Cell id='day-all-time-cell'>{slot}</Table.Cell>\r\n                                {\r\n                                    <Table.Cell Name={\"day-all-table-cell\"+index} id={'day-all-table-cell'}>\r\n                                        <div id=\"day-all-div\">\r\n                                            {          \r\n                                                appointments.map((appointment)=>{\r\n                                                    return ( <AppointmentCard\r\n                                                        appointment={appointment}\r\n                                                        handleDayAppointmentUpdate={this.props.handleDayAppointmentUpdate}\r\n                                                        handleDayDocAppointmentUpdate = {this.props.handleDayDocAppointmentUpdate}\r\n                                                            />)\r\n                                            })\r\n                                            }\r\n                                        </div>\r\n                                    </Table.Cell>\r\n                                                        \r\n                                }\r\n                            </Table.Row>\r\n                            )\r\n                        })\r\n                    }\r\n                            \r\n                    </Table.Body>\r\n                </Table>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default day_all\r\n","/**\r\n *  Description: Contains the first two steps in creating an Appointment.\r\n *  \r\n *  Includes: Date Picking, Time Picking, Next Button, Cancel Button\r\n * \r\n * \r\n */\r\nimport React, {Component, useState} from 'react';\r\nimport moment from 'moment';\r\nimport { Popup, Form, Input } from 'semantic-ui-react'\r\nimport DatePicker from 'react-datepicker';\r\n\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\"\r\nimport \"../secretary_css/addProcStep1.scss\"\r\n\r\nclass addAvailProcStep1 extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            date: moment(this.props.values.date).toDate(),\r\n            time: moment(this.props.values.time, 'HH:mm').toDate()\r\n        }\r\n\r\n        this.onchangeDate = this.onchangeDate.bind(this)\r\n        this.onchangeTime = this.onchangeTime.bind(this)\r\n    } \r\n\r\n    onchangeDate(date){\r\n      this.setState({\r\n        date:date\r\n      })\r\n    }\r\n    onchangeTime(time){\r\n        this.setState({\r\n            time:time\r\n        })\r\n        this.props.handleTime(time)\r\n    }\r\n\r\n\r\n    \r\n    //Continues to step 2\r\n    continue = e =>{\r\n        e.preventDefault()\r\n        this.props.nextStep()\r\n    }\r\n    cancel = e =>{\r\n        e.preventDefault()\r\n        this.props.setOpen()\r\n    }\r\n\r\n    //DISABLES SUNDAYS\r\n    disableSunday=(date)=>{\r\n        return moment(date).day() !== 0;\r\n    }\r\n    disableNonMid=(time)=>{\r\n        return moment(time).minute() === 30 && moment(time).minute() ===0\r\n    }\r\n\r\n\r\n    \r\n  \r\n    render(){\r\n        const {handleDate} = this.props\r\n                                \r\n        return(\r\n\r\n            <div>\r\n                <Form>\r\n                    <Form.Input required\r\n                    label = 'Date'\r\n                    className = \"addProcStep1Date\"\r\n                    control={DatePicker}\r\n                    id=\"secretary-available-datepicker\"\r\n                        selected={this.state.date}\r\n                        // onChange={this.onchangeDate}\r\n                        // onSelect={handleDate}\r\n                        // minDate={moment().toDate()}\r\n                        // filterDate={this.disableSunday}\r\n                        disabled\r\n                        \r\n                        >\r\n                    </Form.Input>\r\n                    <Form.Field required id='time-field-secretary'>\r\n                        <label>Time</label>\r\n                                <Form.Input\r\n                                error = {this.props.values.error.time}\r\n                                placeholder = \"Time\"\r\n                                className = \"addProcStep1Time\"\r\n                                control={DatePicker}\r\n                                id=\"secretary-available-timepicker\"\r\n                                    showTimeSelect\r\n                                    showTimeSelectOnly\r\n                                    selected={this.state.time}\r\n                                    timeIntervals={30}\r\n                                    dateFormat=\"h:mm aa\"\r\n                                    onChange={this.onchangeTime}\r\n                                    minTime={moment(\"8:00 AM\", \"h:mm aa\").toDate()}\r\n                                    maxTime={moment().toDate().setHours(18)}\r\n                                    filterDate={this.disableNonMid}\r\n                                    disabled\r\n                                />\r\n\r\n                        \r\n                        \r\n                    </Form.Field>\r\n                        \r\n                </Form>\r\n                \r\n               \r\n            </div>\r\n        )\r\n    }\r\n  }\r\nexport default addAvailProcStep1","import React, {Component} from 'react';\r\nimport { Step } from 'semantic-ui-react'\r\n\r\n\r\nimport AddProcStep1 from \"./secretary-available-add-appointment-modal-step1\";\r\nimport AddProcStep2 from \"./secretary-add-appointment-modal-form-step2\";\r\n\r\n\r\n\r\nimport \"../secretary_css/pickerStyle.scss\"\r\nimport \"react-datepicker/dist/react-datepicker.css\"\r\n\r\n\r\nclass addAvailProcMainForm extends Component {\r\n\r\n  \r\n    render(){\r\n        \r\n        const {values, handleChange, handleDate, setOpen, nextStep, prevStep, handleTime, handleDoctorChange, handleProcessChange} = this.props\r\n\r\n        switch(this.props.step){\r\n            case 1:\r\n                return(\r\n                <div>    \r\n                    <div class=\"header\">\r\n                        <Step.Group fluid>\r\n                            <Step active>\r\n                                <i className=\"calendar icon\"></i>\r\n                                <div className=\"content\">\r\n                                    <div className=\"title\">Date</div>\r\n                                </div>\r\n                            </Step>\r\n                            <Step>\r\n                                <i className=\"address card icon\"></i>\r\n                                <div className=\"content\">\r\n                                    <div className=\"title\">Appointment</div>\r\n                                </div>\r\n                            </Step>\r\n                        </Step.Group>\r\n                    </div>\r\n                        <AddProcStep1 \r\n                            nextStep = {nextStep}\r\n                            handleChange={handleChange}\r\n                            handleDate={handleDate}\r\n                            values={values}\r\n                            setOpen={setOpen}\r\n                            handleTime={handleTime}\r\n                        >\r\n                        </AddProcStep1>\r\n                </div>\r\n                )\r\n            case 2:\r\n                return(\r\n                        <div>\r\n                            <div class=\"header\">\r\n                                <Step.Group fluid>\r\n                                    <Step onClick={prevStep}>\r\n                                        <i className=\"calendar icon\"></i>\r\n                                        <div className=\"content\">\r\n                                            <div className=\"title\">Date</div>\r\n                                        </div>\r\n                                    </Step>\r\n                                    <Step active>\r\n                                        <i className=\"address card icon\"></i>\r\n                                        <div className=\"content\">\r\n                                            <div className=\"title\">Appointment</div>\r\n                                        </div>\r\n                                    </Step>\r\n                                </Step.Group>\r\n                             </div>\r\n                        \r\n                            <AddProcStep2\r\n                                prevStep = {prevStep}\r\n                                handleChange={handleChange}\r\n                                setOpen={setOpen}\r\n                                handleTime={handleTime}\r\n                                handleDoctorChange={handleDoctorChange}\r\n                                handleProcessChange={handleProcessChange}\r\n                                values = {values}\r\n                            />\r\n                        </div> \r\n                    )\r\n        }\r\n    }\r\n  }\r\nexport default addAvailProcMainForm","import React, {Component} from 'react';\r\nimport moment from 'moment';\r\nimport {Modal, Form, Button} from 'semantic-ui-react'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {faCalendar} from '@fortawesome/free-solid-svg-icons'\r\nimport axios from 'axios'\r\n\r\nimport { toast } from 'react-semantic-toasts';\r\nimport 'react-semantic-toasts/styles/react-semantic-alert.css';\r\n\r\n\r\n\r\nimport AddProcMainForm from \"./secretary-available-add-appointment-modal-form\"\r\n\r\n\r\n\r\n\r\n\r\nclass AddAvailableModal extends Component {\r\n    constructor(props){\r\n    \r\n      super(props);\r\n      \r\n      this.state ={\r\n        firstname:'',\r\n        lastname:'',\r\n        patientcontact:'',\r\n        procedures:[],\r\n        notes:'',\r\n        date: moment().toDate(),\r\n        time: moment('8:00 AM', \"h:mm aa\").toDate(),\r\n        doctors:[],\r\n        doctor: '',\r\n        open: false,\r\n        step: 1,\r\n        error: {\r\n          firstname: false,\r\n          lastname: false,\r\n          username: false,\r\n          password: false,\r\n          patientcontact: false,\r\n          time: false,\r\n          date:false,\r\n          doctors: false,\r\n          procedures: false\r\n\r\n      },\r\n      }\r\n      this.setOpen = this.setOpen.bind(this);\r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.handleDate = this.handleDate.bind(this);\r\n      this.handletime = this.handleDate.bind(this);\r\n      this.handleDoctorChange = this.handleDoctorChange.bind(this);\r\n    }\r\n\r\n    handleValidation=()=>{\r\n      const checkfirst = /^[a-z A-Z]+$/;\r\n      const checklast = /^[a-z A-Z.\\-_]+$/;\r\n      const checkcontact = /^[+-]?\\d{7,12}$/;\r\n\r\n      let firstname = this.state.firstname.trim();\r\n      let lastname = this.state.lastname.trim();\r\n      let patientcontact = this.state.patientcontact.trim();\r\n      let procedures = this.state.procedures;\r\n      let date = this.state.date;\r\n      let time = this.state.time;\r\n      let doctors = this.state.doctors;\r\n\r\n      let error = this.state.error;\r\n      let formIsValid = true;\r\n\r\n      if(moment(moment(time, \"h:mm A\").toDate()).isBefore(moment().toDate()) && moment(date).isSame(moment().toDate(), 'day')){\r\n          error['time']= true;\r\n          toast({\r\n            type: \"error\",\r\n            title: \"Error\",\r\n            description: <p>Please input valid time</p>,\r\n            icon: \"cancel\",\r\n          });\r\n          formIsValid = false;\r\n      }\r\n      if(firstname === \"\"|| !firstname.match(checkfirst)){\r\n        error['firstname']= true;\r\n        toast({\r\n          type: \"error\",\r\n          title: \"Error\",\r\n          description: <p>Please input a valid firstname</p>,\r\n          icon: \"cancel\",\r\n        });\r\n        formIsValid = false;\r\n\r\n      } else if( firstname.length < 2){\r\n        error['firstname'] = true;\r\n        toast({\r\n          type: \"error\",\r\n          title: \"Error\",\r\n          description: <p>Firstname is too short</p>,\r\n          icon: \"cancel\",\r\n        });\r\n        formIsValid = false;\r\n      }\r\n      if(lastname ===  \"\"|| !lastname.match(checklast)){\r\n        error[\"lastname\"] = true;\r\n        toast({\r\n          type: \"error\",\r\n          title: \"Error\",\r\n          description: <p>Please input a valid lastname</p>,\r\n          icon: \"cancel\",\r\n        });\r\n        formIsValid = false;\r\n      } else if(lastname.length < 2){\r\n        error[\"lastname\"] = true;\r\n        toast({\r\n            type: \"error\",\r\n            title: \"Error\",\r\n            description: <p>Lastname is too short</p>,\r\n            icon: \"cancel\",\r\n        });\r\n        formIsValid = false;\r\n      }\r\n\r\n      if(patientcontact === \"\" || !patientcontact.match(checkcontact)){\r\n        error['patientcontact']= true;\r\n        toast({\r\n          type: \"error\",\r\n          title: \"Error\",\r\n          description: <p>Please input a valid contact number</p>,\r\n          icon: \"cancel\",\r\n        });\r\n        formIsValid = false;\r\n      }\r\n\r\n      if(procedures.length < 1 || procedures === undefined){\r\n        error['procedures']= true;\r\n        toast({\r\n          type: \"error\",\r\n          title: \"Error\",\r\n          description: <p>Must have at least 1 procedure</p>,\r\n          icon: \"cancel\",\r\n        });\r\n        formIsValid = false;\r\n      }\r\n\r\n      if(doctors.length < 1 || doctors === undefined){\r\n        error['doctors']= true;\r\n        toast({\r\n          type: \"error\",\r\n          title: \"Error\",\r\n          description: <p>Must have at least 1 doctor</p>,\r\n          icon: \"cancel\",\r\n        });\r\n        formIsValid = false;\r\n      }\r\n\r\n      if(formIsValid){\r\n        let checkData = {\r\n          dateInput: date.toString(),\r\n          timeInput: time.toString(),\r\n          doctors: doctors\r\n        }\r\n\r\n      axios.post(\"/secretary/check_app_exists\", checkData, function(data){\r\n          \r\n          if(data === true){\r\n            error['doctors']= true;\r\n            toast({\r\n              type: \"error\",\r\n              title: \"Error\",\r\n              description: <p>Doctor is already booked on this date and time</p>,\r\n              icon: \"cancel\",\r\n            });\r\n            formIsValid = false;\r\n          } else{\r\n            formIsValid = true;\r\n          }\r\n        })\r\n\r\n        return formIsValid;\r\n\r\n      }\r\n\r\n\r\n\r\n    }\r\n\r\n    \r\n\r\n    \r\n\r\n    //function for opening and closing the modal\r\n    handleClose=()=>{\r\n      this.setState({\r\n        open: false,\r\n      })\r\n    //   setTimeout(() => {\r\n    //     toast(\r\n    //         {\r\n    //             description: <p>Appointment Creation cancelled</p>,\r\n    //             icon: 'check',\r\n    //             animation: 'slide up',\r\n    //             time:1000,\r\n    //             color: 'red'\r\n\r\n    //         },\r\n    //         () => console.log('toast closed'),\r\n    //     );\r\n    // }, 1000)\r\n    }\r\n    setOpen(){\r\n      this.setState({\r\n        open: !this.state.open,\r\n        step : 1,\r\n        date : moment(moment(this.props.date).format(\"MMM DD YYYY\")).toDate(),\r\n        time : moment(this.props.time, 'h:mm aa').toDate(),\r\n        doctor: this.props.doctorID\r\n\r\n      })\r\n      console.log(moment(this.props.time, 'h:mm aa').toDate())\r\n\r\n    \r\n      // this.props.setClose()\r\n      \r\n    }\r\n\r\n    //Function for submitting values\r\n    handleChange = input => e =>{\r\n      this.setState({\r\n        [input]: e.target.value\r\n      })\r\n      console.log(e.target.value)\r\n    }\r\n    handleSubmit=e=>{\r\n        e.preventDefault()\r\n        if(this.handleValidation()){\r\n          const appointment = {\r\n            firstname:this.state.firstname,\r\n            lastname:this.state.lastname,\r\n            patientcontact: this.state.patientcontact,\r\n            procedures: this.state.procedures,\r\n            notes:this.state.notes,\r\n            date:this.state.date,\r\n            time:this.state.time,\r\n            doctors:this.state.doctors,\r\n          }\r\n          if(Array.isArray(this.state.doctors[0])){\r\n            appointment.doctors = this.state.doctors[0]\r\n          }\r\n  \r\n          axios.post('http://localhost:3000/secretary/create', appointment).then(res =>{\r\n            if(res.data.message == true){\r\n              setTimeout(() => {\r\n                toast(\r\n                    {\r\n                        description: <p>Appointment Created</p>,\r\n                        icon: 'check',\r\n                        animation: 'slide up',\r\n                        time:1000,\r\n                        color: 'green'\r\n      \r\n                    },\r\n                );\r\n              }, 1000)\r\n              this.handleClose();\r\n              this.props.handleWeekAppointmentUpdate()\r\n              this.props.handleDayAppointmentUpdate()\r\n              this.props.handleWeekAvailable()\r\n            } else {\r\n              toast({\r\n                type: 'error',\r\n                title: 'Error',\r\n                description: <p>Invalid Appointment</p>,\r\n                icon: \"cancel\"\r\n              })\r\n            }\r\n          });\r\n        }\r\n      \r\n    } \r\n\r\n    //Datepicker change\r\n    handleDate(date){\r\n      this.setState({\r\n        date:date\r\n      })\r\n\r\n      console.log(date)\r\n     \r\n    }\r\n\r\n    handleDoctorChange =(e, {value}) => {\r\n        this.setState({doctors:value})\r\n        console.log(value)\r\n\r\n      }\r\n\r\n      handleProcessChange =(e, {value}) => {\r\n        this.setState({procedures:value})\r\n        console.log(value)\r\n\r\n      }\r\n\r\n    //Step changes in changing the prop\r\n    //Proceeds to next step\r\n    nextStep =()=>{\r\n      const {step} = this.state;\r\n      this.setState({\r\n          step: step+1\r\n      });\r\n    }\r\n\r\n    //Proceeds to previous step\r\n    prevStep =()=>{\r\n        const {step} = this.state;\r\n        this.setState({\r\n            step: step-1\r\n        });\r\n    }\r\n    handleTime=(time)=>{\r\n      this.setState({\r\n        time:time\r\n      })\r\n      console.log(time)\r\n    }\r\n  \r\n    render(){\r\n      const {firstname, lastname, patientcontact, process, notes, date, time, doctors, doctor,  error} = this.state;\r\n      const values = {firstname, lastname, patientcontact, process, notes, date, time, doctors, doctor , error}\r\n      let button;\r\n      let button2;\r\n      if(this.state.step === 1){\r\n        button = <Button onClick={this.nextStep} type='button'>Next</Button>\r\n      } else{\r\n        button = <Button type=\"button\" color=\"green\" onClick={this.handleSubmit}>Submit</Button>\r\n        button2 = <Button onClick={this.prevStep}>Back</Button>\r\n      }\r\n      return (\r\n        <>\r\n          <Modal\r\n            onClose={this.handleClose}\r\n            onOpen={this.setOpen}\r\n            open={this.state.open}\r\n            as={Form}\r\n            trigger={\r\n            <div>\r\n              {this.props.available}\r\n            </div>}\r\n          >\r\n          \r\n          <Modal.Content>\r\n                  <AddProcMainForm\r\n                    handleChange = {this.handleChange}\r\n                    handleDoctorChange = {this.handleDoctorChange}\r\n                    handleProcessChange = {this.handleProcessChange}\r\n                    handleDate = {this.handleDate}\r\n                    handleTime = {this.handleTime}\r\n                    setOpen = {this.setOpen}\r\n                    prevStep = {this.prevStep}\r\n                    nextStep = {this.nextStep}\r\n                    step = {this.state.step}\r\n                    values = {values}\r\n\r\n                  />\r\n          </Modal.Content>\r\n          <Modal.Actions>\r\n            <Button onClick={this.handleClose}>Cancel</Button>\r\n            {button2}\r\n            {button}\r\n            \r\n          </Modal.Actions>\r\n          </Modal>\r\n        </>\r\n        \r\n        \r\n      )\r\n    }\r\n  }\r\nexport default AddAvailableModal","import React, {Component} from 'react';\r\nimport moment from 'moment';\r\nimport {Modal, Form, Button, Icon, Card, Table, Tab, Dimmer} from 'semantic-ui-react'\r\nimport axios from 'axios'\r\nimport { SemanticToastContainer, toast } from 'react-semantic-toasts';\r\nimport 'react-semantic-toasts/styles/react-semantic-alert.css';\r\nimport '../secretary_css/secretary-view.css'\r\n\r\nimport AvailableAddModal from './secretary-available-add-appoinment-modal'\r\n\r\nclass SecretaryAvailabilityModal extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            doctor:[],\r\n            open: false,\r\n            date:'',\r\n            availSlots: [],\r\n            activeDimmer:false,\r\n            row:[]\r\n        }\r\n\r\n        this.setOpen = this.setOpen.bind(this)\r\n        this.setClose = this.setClose.bind(this)\r\n        this.handleAvailabilityTime = this.handleAvailabilityTime.bind(this)\r\n    }\r\n\r\n    handleShowDimmer = () => this.setState({activeDimmer: true});\r\n    handleHideDimmer = () => this.setState({activeDimmer: false})\r\n\r\n    handleAvailabilityTime(){\r\n        console.log(\"Getting Availability time per doctor...\")\r\n        this.handleShowDimmer()\r\n        const data = {\r\n            date : this.props.appDate,\r\n            doctorID : this.props.doctorID\r\n        }\r\n        axios.post(\"http://localhost:3000/secretary/availabilityTime\", data).then(res=>{\r\n            this.setState({\r\n                availSlots : res.data.data,\r\n                doctor: res.data.data.doctor,\r\n                row: res.data.data.row\r\n            })\r\n            console.log(\"AvailabilityTime Data: \")\r\n            console.log(res.data.data)\r\n            this.handleHideDimmer()\r\n        })\r\n    }\r\n    setOpen(){\r\n        console.log(\"calling me\")\r\n        this.handleAvailabilityTime();\r\n        this.setState({\r\n            open:true\r\n        })\r\n    }\r\n    setClose(){\r\n        this.setState({\r\n            open:false\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n            \r\n            \r\n            <Modal\r\n                    closeIcon\r\n                    onClose={this.setClose}\r\n                    onOpen={this.setOpen}\r\n                    open={this.state.open}\r\n                    trigger={<Table.Cell id=\"secretary-available-table-cell\" className=\"secretary-available-table-cell\"\r\n                    >\r\n                        </Table.Cell>}\r\n                >\r\n                    \r\n                    <Modal.Header as={'h2'} id=\"secretary-available-date-modal-header\">\r\n                        <span>Dr.{this.state.doctor.firstname} {this.state.doctor.lastname} - {this.state.availSlots.displayDate}</span>\r\n                    </Modal.Header>\r\n                    <Modal.Content>\r\n                        <Dimmer\r\n                            active={this.state.activeDimmer}\r\n                            inverted\r\n                            id=\"list-dimmer\"\r\n                            style={{ maxHeight: \"100%\" }}\r\n                        >\r\n                            <div className=\"ui elastic huge green loader\"></div>\r\n                        </Dimmer>\r\n                            <Table id = \"secretary-available-modal-table\" compact celled fixed textAlign='center'>\r\n                                    <Table.Body>\r\n                                        <Table.Row>\r\n                                            <Table.Cell></Table.Cell>\r\n                                        </Table.Row>\r\n                                        {\r\n                                            this.state.row.map((avail)=>{\r\n                                                let backgroundColor=\"grey\"\r\n                                                let backgroundColor2=\"green\"\r\n                                                if(avail.available2 === 'undef' ){\r\n                                                    if(avail.available1 === 'unavailable'){\r\n                                                        return(\r\n                                                            <Table.Row>\r\n                                                            <Table.Cell>{avail.timeSlot1}</Table.Cell>\r\n                                                            <Table.Cell style={{backgroundColor}}>{avail.available1}</Table.Cell>\r\n                                                        </Table.Row>\r\n                                                        )\r\n                                                    }\r\n                                                    else{\r\n                                                        if(avail.available1 === 'available'){\r\n                                                            return(\r\n                                                                <Table.Row>\r\n                                                                    <Table.Cell>{avail.timeSlot1}</Table.Cell>\r\n                                                                    <Table.Cell style={{backgroundColor2}}><AvailableAddModal available={avail.available1} setClose={this.setClose} time={avail.timeSlot1} doctorID ={this.props.doctorID}\r\n                                                                                date={this.state.availSlots.date}\r\n                                                                                handleWeekAvailable={this.props.handleWeekAvailable}\r\n                                                                                handleDayAppointmentUpdate={this.props.handleDayAppointmentUpdate}\r\n                                                                                handleWeekAppointmentUpdate={this.props.handleWeekAppointmentUpdate}/></Table.Cell>\r\n                                                                </Table.Row>\r\n                                                            )\r\n                                                        }\r\n                                                        else{\r\n                                                            return(\r\n                                                                <Table.Row>\r\n                                                                    <Table.Cell>{avail.timeSlot1}</Table.Cell>\r\n                                                                    <Table.Cell style={{backgroundColor}}>{avail.available1}</Table.Cell>\r\n                                                                </Table.Row>\r\n                                                            )\r\n                                                            \r\n                                                        }\r\n                                                        \r\n                                                    }\r\n                                                    \r\n                                                }\r\n                                                else{\r\n                                                    if(avail.available1 === 'available' && avail.available2 === 'available'){\r\n                                                        return(\r\n                                                            <Table.Row>\r\n                                                            {\r\n                                                                        <>\r\n                                                                            <Table.Cell>{avail.timeSlot1}</Table.Cell>\r\n                                                                            <Table.Cell style={{backgroundColor2}}><AvailableAddModal available={avail.available1} setClose={this.setClose} time={avail.timeSlot1} doctorID ={this.props.doctorID}\r\n                                                                                        date={this.state.availSlots.date}\r\n                                                                                        handleWeekAvailable={this.props.handleWeekAvailable}\r\n                                                                                        handleDayAppointmentUpdate={this.props.handleDayAppointmentUpdate}\r\n                                                                                        handleWeekAppointmentUpdate={this.props.handleWeekAppointmentUpdate}/></Table.Cell>\r\n                                                                            <Table.Cell>{avail.timeSlot2}</Table.Cell>\r\n                                                                            <Table.Cell style={{backgroundColor2}}><AvailableAddModal available={avail.available2} setClose={this.setClose} time={avail.timeSlot2} doctorID ={this.props.doctorID}\r\n                                                                                        date={this.state.availSlots.date}\r\n                                                                                        handleWeekAvailable={this.props.handleWeekAvailable}\r\n                                                                                        handleDayAppointmentUpdate={this.props.handleDayAppointmentUpdate}\r\n                                                                                        handleWeekAppointmentUpdate={this.props.handleWeekAppointmentUpdate}/></Table.Cell>\r\n                                                                        </>\r\n                                                                    \r\n                                                            }\r\n                                                            </Table.Row>\r\n                                                        )\r\n\r\n                                                    }\r\n                                                    else if(avail.available1 === 'available' && avail.available2  === 'unavailable'){\r\n                                                        return(\r\n                                                        <Table.Row>\r\n                                                            {\r\n                                                                        <>\r\n                                                                            <Table.Cell>{avail.timeSlot1}</Table.Cell>\r\n                                                                            <Table.Cell style={{backgroundColor2}}><AvailableAddModal available={avail.available1} setClose={this.setClose} time={avail.timeSlot1} doctorID ={this.props.doctorID}\r\n                                                                                        date={this.state.availSlots.date}\r\n                                                                                        handleWeekAvailable={this.props.handleWeekAvailable}\r\n                                                                                        handleDayAppointmentUpdate={this.props.handleDayAppointmentUpdate}\r\n                                                                                        handleWeekAppointmentUpdate={this.props.handleWeekAppointmentUpdate}/></Table.Cell>\r\n                                                                            <Table.Cell>{avail.timeSlot2}</Table.Cell>\r\n                                                                            <Table.Cell style={{backgroundColor}}>{avail.available2}</Table.Cell>\r\n                                                                        </>\r\n                                                                    \r\n                                                            }\r\n                                                            </Table.Row>\r\n                                                        )\r\n                                                    }\r\n                                                    else if(avail.available1 === 'unavailable' && avail.available2  === 'available'){\r\n                                                        return(\r\n                                                            <Table.Row>\r\n                                                                {\r\n                                                                            <>\r\n                                                                                <Table.Cell>{avail.timeSlot1}</Table.Cell>\r\n                                                                                <Table.Cell style={{backgroundColor}}>{avail.available1}</Table.Cell>\r\n                                                                                <Table.Cell>{avail.timeSlot2}</Table.Cell>\r\n                                                                                <Table.Cell style={{backgroundColor2}}><AvailableAddModal available={avail.available2} setClose={this.setClose} time={avail.timeSlot2} doctorID ={this.props.doctorID}\r\n                                                                                        date={this.state.availSlots.date}\r\n                                                                                        handleWeekAvailable={this.props.handleWeekAvailable}\r\n                                                                                        handleDayAppointmentUpdate={this.props.handleDayAppointmentUpdate}\r\n                                                                                        handleWeekAppointmentUpdate={this.props.handleWeekAppointmentUpdate}/></Table.Cell>\r\n                                                                            </>\r\n                                                                        \r\n                                                                }\r\n                                                                </Table.Row>\r\n                                                            )\r\n                                                    }\r\n                                                    else{\r\n                                                        return(\r\n                                                            <Table.Row>\r\n                                                                {\r\n                                                                            <>\r\n                                                                                <Table.Cell>{avail.timeSlot1}</Table.Cell>\r\n                                                                                <Table.Cell style={{backgroundColor}}>{avail.available1}</Table.Cell>\r\n                                                                                <Table.Cell>{avail.timeSlot2}</Table.Cell>\r\n                                                                                <Table.Cell style={{backgroundColor2}}>{avail.available2}</Table.Cell>\r\n                                                                            </>\r\n                                                                        \r\n                                                                }\r\n                                                                </Table.Row>\r\n                                                            )\r\n\r\n                                                    }\r\n                                                    \r\n                                                }\r\n                                            })\r\n                                        }\r\n                                    </Table.Body>\r\n                            </Table>\r\n                    </Modal.Content>\r\n                </Modal>\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\nexport default SecretaryAvailabilityModal","import React, {Component} from 'react';\r\nimport moment from 'moment';\r\nimport {Modal, Form, Button, Icon, Card, Table, Tab, Dimmer} from 'semantic-ui-react'\r\nimport axios from 'axios'\r\nimport { SemanticToastContainer, toast } from 'react-semantic-toasts';\r\nimport 'react-semantic-toasts/styles/react-semantic-alert.css';\r\nimport SecretaryAvailabilityModal from './secretary-availabledate-modal'\r\nimport '../secretary_css/secretary-view.css'\r\n\r\n\r\nclass SecretaryAvailability extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            weekAvailable:[],\r\n            weeks:this.props.week,\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        \r\n        this.props.handleWeekAvailable();\r\n        \r\n    }\r\n\r\n    componentDidUpdate(){\r\n\r\n        if(this.props.week != this.state.weeks){\r\n            console.log(\"Updating week in Availability...\")\r\n            this.props.handleWeekAvailable();\r\n            this.setState({\r\n                weeks: this.props.week,\r\n                weekAvailable: this.props.weekAvailable.doctors,\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n                <Table id=\"week-available\" compact celled fixed textAlign='center'>\r\n                    <Table.Body>\r\n                        {\r\n                            this.props.weekAvailable.doctors.map(({availability, firstname, lastname, _id}, index)=>{\r\n                                return(\r\n                                    <Table.Row key={index}>\r\n                                        <Table.Cell id='week-availability-time-cell'>{firstname}, {lastname}</Table.Cell>\r\n                                        {\r\n                                            availability.map((available)=>{\r\n                                                if(available[1]=='unavailable' || moment(available[0]).days() == 0 || available[1]=='past'){\r\n                                                    let backgroundColor ='grey'\r\n                                                    return(\r\n                                                        <Table.Cell id=\"secretary-available-table-cell\" style={{backgroundColor}}>\r\n                                                        </Table.Cell>\r\n                                                    )\r\n                                                }else{\r\n\r\n                                                    \r\n                                                    return(\r\n                                                            \r\n                                                            <SecretaryAvailabilityModal doctorID = {_id} appDate = {available[0]}\r\n                                                                handleShowDimmer = {this.props.handleShowDimmer}\r\n                                                                handleHideDimmer = {this.props.handleHideDimmer}\r\n                                                                handleWeekAvailable={this.props.handleWeekAvailable}\r\n                                                                handleDayAppointmentUpdate={this.props.handleDayAppointmentUpdate}\r\n                                                                handleWeekAppointmentUpdate={this.props.handleWeekAppointmentUpdate}\r\n                                                            />\r\n                                                        \r\n                                                    )\r\n                                                }\r\n                                            })\r\n                                        }\r\n                                    </Table.Row>\r\n                                )\r\n                            })\r\n                        }\r\n                    </Table.Body>\r\n\r\n                </Table>\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\nexport default SecretaryAvailability","import Axios from 'axios';\r\nimport React, {Component} from 'react';\r\nimport {Tab, Table, TableRow} from 'semantic-ui-react';\r\nimport AppointmentCard from './secretary-edit-appointment-modal'\r\n\r\n/* CSS FILES */\r\nimport '../secretary_css/secretary-view.css'\r\n\r\nclass week_all_doc extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state={\r\n            appointments:this.props.appointments,\r\n            weeks: this.props.week,\r\n            doc: this.props.doc\r\n        }\r\n\r\n    }\r\n    \r\n\r\n    componentDidMount(){\r\n       this.props.handleDocWeekAppointmentUpdate()\r\n       \r\n        \r\n    }\r\n\r\n    componentDidUpdate(){\r\n        if(this.props.week != this.state.weeks){\r\n            console.log(\"Hello\")\r\n            this.props.handleDocWeekAppointmentUpdate()\r\n            this.setState({\r\n                weeks: this.props.week\r\n            })\r\n        }\r\n        else if(this.props.doc !== this.state.doc){\r\n            this.props.handleDocWeekAppointmentUpdate()\r\n            this.setState({\r\n                doc: this.props.doc \r\n            })\r\n        }\r\n    }\r\n    render(){\r\n        console.log(\"prop: \")\r\n        console.log(this.props.appointments)\r\n\r\n       return(\r\n            <>\r\n                <Table id=\"table-header-title\" compact>\r\n                    <Table.Header fullWidth>\r\n                        <TableRow textAlign='center'>\r\n                            <Table.Cell>Weekly Appointments</Table.Cell>\r\n                        </TableRow>\r\n                    </Table.Header>\r\n                </Table>\r\n                <Table id='week_all' celled fixed textAlign='center' compact>\r\n                    <Table.Body>\r\n                    {\r\n                        this.props.appointments.map(({slot, weekAppointments}, index)=>{\r\n                            return(\r\n                            <Table.Row key={index} name={'week-all-row-'+index}>\r\n                                <Table.Cell id=\"week-all-time-cell\">{slot}</Table.Cell>\r\n                                {   \r\n                                    weekAppointments.map(({appointments}, index)=>{\r\n                                        return( <Table.Cell id={'week-all-table-cell'} name={'week-all-td-'+index}>\r\n                                                        {\r\n                                                           appointments.map((appointment)=>\r\n                                                                        <AppointmentCard id={\"secretary-appointment-card-\" + appointment._id}\r\n                                                                            appointment={appointment}\r\n                                                                            handleWeekAppointmentUpdate={this.props.handleWeekAppointmentUpdate}\r\n                                                                            handleDocWeekAppointmentUpdate={this.props.handleDocWeekAppointmentUpdate}\r\n                                                                        />\r\n                                                            )\r\n                                                        }\r\n                \r\n                                            </Table.Cell>)\r\n                                  })\r\n                                }\r\n                            </Table.Row>\r\n                            )\r\n                        })\r\n                    }\r\n                    </Table.Body>\r\n                </Table>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default week_all_doc\r\n","import Axios from 'axios';\r\nimport React, {Component} from 'react';\r\nimport {Tab, Table} from 'semantic-ui-react';\r\nimport AppointmentCard from './secretary-edit-appointment-modal-day-all'\r\nimport moment from 'moment'\r\nimport '../secretary_css/secretary-view.css'    \r\n\r\nclass day_all_doc extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state={\r\n            appointments:this.props.appointments,\r\n            day: this.props.day,\r\n            doc: this.props.doc\r\n        }\r\n\r\n    }\r\n    \r\n    componentDidMount(){\r\n        this.props.handleDayDocAppointmentUpdate()\r\n        console.log(\"Im in secretary-day-all-doc\")\r\n        this.setState({\r\n            appointments:this.props.appointments\r\n        })\r\n    }\r\n\r\n\r\n    componentDidUpdate(){\r\n        if(this.props.day != this.state.day){\r\n            console.log(\"Date Changed\")\r\n            this.props.handleDayDocAppointmentUpdate()\r\n            this.setState({\r\n                    day: this.props.day,\r\n                })\r\n        }\r\n        else if(this.props.doc !== this.state.doc){\r\n            this.props.handleDayDocAppointmentUpdate()\r\n            this.setState({\r\n                doc: this.props.doc \r\n            })\r\n        }\r\n    }\r\n    render(){\r\n        console.log(\"prop: \")\r\n        console.log(this.props.appointments)\r\n\r\n       return(\r\n           <>\r\n            <Table id=\"table-header-title\" compact>\r\n                    <Table.Header fullWidth>\r\n                        <Table.Row textAlign='center'>\r\n                            <Table.Cell>Daily Appointments</Table.Cell>\r\n                        </Table.Row>\r\n                    </Table.Header>\r\n                </Table>\r\n                <Table id='week_all' celled fixed textAlign='center' compact>\r\n                    <Table.Body>\r\n                    {\r\n                        this.props.appointments.map(({slot, appointments}, index)=>{\r\n                            return(\r\n                            <Table.Row key={index}>\r\n                                <Table.Cell id='day-all-time-cell'>{slot}</Table.Cell>\r\n                                {\r\n                                    <Table.Cell Name={\"day-all-table-cell\"+index} id={'day-all-table-cell'}>\r\n                                        <div id=\"day-all-div\">\r\n                                            {          \r\n                                                appointments.map((appointment)=>{\r\n                                                    return ( <AppointmentCard\r\n                                                        appointment={appointment}\r\n                                                        handleDayAppointmentUpdate={this.props.handleDayAppointmentUpdate}\r\n                                                        handleDayDocAppointmentUpdate = {this.props.handleDayDocAppointmentUpdate}\r\n                                                            />)\r\n                                            })\r\n                                            }\r\n                                        </div>\r\n                                    </Table.Cell>\r\n                                                        \r\n                                }\r\n                            </Table.Row>\r\n                            )\r\n                        })\r\n                    }\r\n                            \r\n                    </Table.Body>\r\n                </Table>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default day_all_doc\r\n","import React, {Component} from 'react';\r\nimport Navbar from \"../module/secretary-navigationbar\"\r\nimport AddAppointment from \"../module/secretary-add-appointment-modal\"\r\nimport {Grid, Header, Dropdown, Dimmer} from \"semantic-ui-react\"\r\nimport moment from 'moment'\r\nimport axios from 'axios'\r\nimport SecretaryHeader from \"../module/secretary-header\"\r\nimport SecretaryTable from \"../module/secretary-week-all\"\r\nimport DayAll from \"../module/secretary-day-all\"\r\nimport SecretaryAvailable from '../module/secretary-availabilty'\r\nimport SecretaryWeekDoc from \"../module/secretary-week-all-one-doc\"\r\nimport SecretaryDayDoc from \"../module/secretary-day-all-one-doc\"\r\n\r\nimport { SemanticToastContainer} from 'react-semantic-toasts';\r\n\r\n/*CSS FILES*/\r\nimport '../secretary_css/secretary-view.css'\r\nimport 'semantic-ui-css/components/reset.min.css';\r\nimport 'semantic-ui-css/components/site.min.css';\r\nimport 'semantic-ui-css/components/container.min.css';\r\nimport 'semantic-ui-css/components/icon.min.css';\r\nimport 'semantic-ui-css/components/message.min.css';\r\nimport 'semantic-ui-css/components/header.min.css';\r\n\r\nexport default class Secretary extends Component{\r\n\r\n    \r\n\r\n    constructor(props){\r\n        super(props);\r\n        \r\n            let dayStart = moment(moment().toDate()).startOf('week')\r\n            let dayEnd = moment(moment().toDate()).endOf('week')\r\n            let numdays=[]\r\n            let unparsed=[]\r\n            \r\n            while(dayStart <= dayEnd){\r\n                unparsed.push(dayStart.toDate().toString())\r\n                let newDate=Date.parse(dayStart)\r\n                let formatted=moment(newDate).format(\"MMMM D, YYYY\")\r\n                numdays.push(formatted);\r\n                dayStart = dayStart.clone().add(1, 'd');\r\n            }\r\n        \r\n        this.onChangeDate = this.onChangeDate.bind(this)\r\n        this.handleWeekAppointmentUpdate = this.handleWeekAppointmentUpdate.bind(this)\r\n        this.handleDayAppointmentUpdate = this.handleDayAppointmentUpdate.bind(this)\r\n        this.handleWeekAvailable = this.handleWeekAvailable.bind(this)\r\n        this.handleDocWeekAppointmentUpdate = this.handleDocWeekAppointmentUpdate.bind(this)\r\n        this.handleShowDimmer = this.handleShowDimmer.bind(this)\r\n        this.handleHideDimmer = this.handleHideDimmer.bind(this)\r\n        this.handleDayDocAppointmentUpdate = this.handleDayDocAppointmentUpdate.bind(this)\r\n\r\n        this.state = {\r\n            doctors:[],\r\n            weekAppointments:[],\r\n            dayAppointments:[],\r\n            view:'day',\r\n            filter:'appointments',\r\n            date: moment().toDate(), \r\n            startOfWeek: moment(moment().toDate()).startOf('week'),\r\n            endOfWeek: moment(moment().toDate()).endOf('week'),\r\n            days:numdays,\r\n            weekUnparsed:unparsed,\r\n            weekAvailable:[],\r\n            activeDimmer: false,\r\n            weekAppointmentsDoc:[],\r\n            dayAppointmentsDoc:[]\r\n\r\n        }\r\n        this.handleDayAppointmentUpdate()\r\n        this.handleWeekAppointmentUpdate()\r\n        this.handleWeekAvailable()\r\n        this.handleDocWeekAppointmentUpdate()\r\n        this.handleDayDocAppointmentUpdate()\r\n    }\r\n\r\n    handleShowDimmer = () => this.setState({activeDimmer: true});\r\n    handleHideDimmer = () => this.setState({activeDimmer: false})\r\n\r\n\r\n\r\n    componentDidMount(){\r\n        this.handleShowDimmer();\r\n        axios.get('http://localhost:3000/secretary/getDoctors')\r\n            .then(response => {\r\n                if(response.data.length > 0){\r\n                    \r\n                    this.setState({   \r\n                        doctors: [\r\n                            ...response.data.map(doctor =>{\r\n                                return{\r\n                                    key: doctor._id,\r\n                                    text: doctor.firstname+\" \"+doctor.lastname,\r\n                                    value: doctor._id\r\n                                }\r\n                            })\r\n                        ],\r\n                        \r\n                    })\r\n                }\r\n            })\r\n        axios.get('http://localhost:3000/secretary/appointmentlist')\r\n            .then(response=>{\r\n                this.setState({\r\n                    appointments: response.data,\r\n                })\r\n            })\r\n            .catch((error)=>{\r\n                console.log(error)\r\n        })\r\n        this.handleHideDimmer();\r\n           \r\n    }\r\n\r\n    handleWeekAvailable(){\r\n        console.log(\"Updating Availability...\")\r\n        this.handleShowDimmer();\r\n        const week = {\r\n            weeks: this.state.weekUnparsed\r\n        }\r\n        console.log(\"Current week\")\r\n        console.log(this.state.weekUnparsed)\r\n        axios.post(\"http://localhost:3000/secretary/availabilityAll\", week).then(res=>{\r\n            this.setState({\r\n                weekAvailable: res.data.data\r\n            })\r\n            console.log(\"WeekAvailable Data: \")\r\n            console.log(res.data.data)\r\n            this.handleHideDimmer();\r\n        })\r\n        \r\n       \r\n    }\r\n\r\n\r\n    handleWeekAppointmentUpdate(){\r\n        this.handleShowDimmer();\r\n        console.log(\"Updating Week-all...\")\r\n        const week = {\r\n            weeks: this.state.weekUnparsed\r\n        }\r\n        \r\n        axios.post('http://localhost:3000/secretary/week_all', week).then(res =>{\r\n            this.setState({\r\n                weekAppointments: res.data.data.data\r\n            })\r\n            console.log(\"Week-all Data: \")\r\n            console.log(res.data.data.data)\r\n            this.handleHideDimmer()\r\n        })\r\n        \r\n   }\r\n\r\n   handleDayAppointmentUpdate(){\r\n       console.log(\"DayUpdate\")\r\n       this.handleShowDimmer();\r\n        const day = {\r\n            day: this.state.date\r\n        }\r\n        axios.post('http://localhost:3000/secretary/day_all', day).then(res =>{\r\n            \r\n            this.setState({\r\n                dayAppointments: res.data.data.data\r\n            })\r\n            console.log(\"Day-all Data\")\r\n            console.log(res.data.data.data)\r\n            this.handleHideDimmer()\r\n        })\r\n\r\n     }\r\n     handleDayDocAppointmentUpdate(){\r\n        console.log(\"DayDocUpdate\")\r\n        this.handleShowDimmer();\r\n         const day = {\r\n             date: this.state.date,\r\n             doctor: this.state.filter\r\n         }\r\n         axios.post('http://localhost:3000/secretary/day_one', day).then(res =>{\r\n             \r\n             this.setState({\r\n                 dayAppointmentsDoc: res.data.data.data\r\n             })\r\n             console.log(\"Day-all one doc Data\")\r\n             console.log(res.data.data.data)\r\n             this.handleHideDimmer()\r\n         })\r\n \r\n      }\r\n\r\n    handleDocWeekAppointmentUpdate(){\r\n        console.log(\"Week Doctor Update\")\r\n       this.handleShowDimmer();\r\n        const data = {\r\n            weeks: this.state.weekUnparsed,\r\n            doctor: this.state.filter\r\n        }\r\n        axios.post('http://localhost:3000/secretary/week_one', data).then(res =>{\r\n            \r\n            this.setState({\r\n                weekAppointmentsDoc: res.data.data.data\r\n            })\r\n            console.log(\"Week-all-Doc Data: \")\r\n            console.log(res.data.data.data)\r\n            this.handleHideDimmer()\r\n        })\r\n\r\n    }\r\n\r\n\r\n   \r\n\r\n    //Updates week\r\n    onWeek=(date)=>{\r\n            \r\n            let dayStart = moment(date).startOf('week')\r\n            let dayEnd = moment(date).endOf('week')\r\n            let numdays=[]\r\n            let unparsed=[]\r\n            \r\n            while(dayStart <= dayEnd){\r\n                unparsed.push(dayStart.toDate())\r\n                let newDate=Date.parse(dayStart)\r\n                let formatted=moment(newDate).format(\"MMMM D, YYYY\")\r\n                numdays.push(formatted);\r\n                dayStart = dayStart.clone().add(1, 'd');\r\n            }\r\n\r\n            this.setState({\r\n                startOfWeek: dayStart,\r\n                endOfWeek: dayEnd,\r\n                days:numdays,\r\n                weekUnparsed:unparsed\r\n            })\r\n        \r\n            \r\n    }\r\n\r\n    //changes the current date\r\n    onChangeDate(date){\r\n        console.log('changing date to: ', date);\r\n        if(date == null){\r\n            this.setState({\r\n                date: moment().toDate()\r\n            });\r\n        }else{\r\n            this.onWeek(date)\r\n            this.setState({\r\n                date:date,\r\n            })\r\n            \r\n        }\r\n    }\r\n    onChangeFilter=(e, {name, value})=>{\r\n        console.log(\"Selecting Filter...\")\r\n        this.setState({\r\n            [name]:value\r\n        })\r\n        console.log(value)\r\n    }\r\n\r\n    onChangeView=(e, {name, value})=>{\r\n        this.setState({\r\n          [name]:value\r\n        })\r\n        console.log(value)\r\n      }\r\n    onToday= () =>{\r\n        \r\n        console.log('Changing date to today');\r\n        this.setState({\r\n            date: moment().toDate()\r\n        })\r\n        this.onWeek(moment().toDate())\r\n        \r\n    }\r\n    onPrev=()=>{\r\n        \r\n        let prev_date = moment(this.state.date).clone().subtract(1, 'day').toDate()\r\n        console.log('change to: ', prev_date)\r\n        this.setState({\r\n            date: prev_date\r\n        })\r\n        this.onWeek(prev_date)\r\n        \r\n    }\r\n\r\n    onNext=()=>{\r\n        \r\n        let next_date = moment(this.state.date).clone().add(1, 'day').toDate()\r\n        console.log('change to: ', next_date)\r\n        this.setState({\r\n            date: next_date\r\n        })\r\n        this.onWeek(next_date)\r\n        \r\n    }\r\n    render(){\r\n\r\n        const filter =[\r\n            {text:\"APPOINTMENTS\", key:\"appointments\", value:\"appointments\"},\r\n            {text:\"AVAILABILITY\", key:\"availability\", value:\"availability\"},\r\n        ]\r\n        this.state.doctors.map(doc=>{\r\n            filter.push(doc)\r\n        })\r\n        const viewer=[\r\n            {text:\"DAY\", key:\"day\", value:\"day\"},\r\n            {text:\"WEEK\", key:\"week\", value:\"week\"}\r\n        ]\r\n        let currView;\r\n\r\n        if(this.state.view === 'week' && this.state.filter === 'appointments'){\r\n            console.log(\"Changing to week Appointment table...\")\r\n            currView = <SecretaryTable \r\n                            week={this.state.weekUnparsed}\r\n                            appointments={this.state.weekAppointments}\r\n                            handleWeekAppointmentUpdate={this.handleWeekAppointmentUpdate}\r\n                            handleDocWeekAppointmentUpdate={this.handleDocWeekAppointmentUpdate}\r\n                            handleShowDimmer={this.handleShowDimmer}\r\n                            handleHideDimmer={this.handleHideDimmer}\r\n                        >\r\n                        </SecretaryTable>\r\n        }\r\n        else if(this.state.view === 'day' && this.state.filter === 'appointments'){\r\n            currView = <DayAll\r\n                            day={this.state.date}\r\n                            appointments={this.state.dayAppointments}\r\n                            handleDayAppointmentUpdate={this.handleDayAppointmentUpdate}\r\n                            handleDayDocAppointmentUpdate={this.handleDayDocAppointmentUpdate}\r\n                            handleShowDimmer={this.handleShowDimmer}\r\n                            handleHideDimmer={this.handleHideDimmer}\r\n                        > \r\n                        </DayAll>\r\n        }\r\n        else if(this.state.filter === 'availability'){\r\n            console.log(\"Changing to availability table...\")\r\n            \r\n            currView = <SecretaryAvailable\r\n                            week={this.state.weekUnparsed}\r\n                            weekAvailable={this.state.weekAvailable}\r\n                            handleWeekAvailable={this.handleWeekAvailable}\r\n                            handleDayAppointmentUpdate={this.handleDayAppointmentUpdate}\r\n                            handleWeekAppointmentUpdate={this.handleWeekAppointmentUpdate}\r\n                            handleShowDimmer={this.handleShowDimmer}\r\n                            handleHideDimmer={this.handleHideDimmer}\r\n                            \r\n                        />\r\n        }\r\n        else{\r\n            console.log(\"Changing to doctor view...\")\r\n            if(this.state.filter !== 'appointments' && this.state.filter !== 'availability' && this.state.view === 'week'){\r\n                currView =<SecretaryWeekDoc\r\n                            week={this.state.weekUnparsed}\r\n                            appointments={this.state.weekAppointmentsDoc}\r\n                            handleDocWeekAppointmentUpdate={this.handleDocWeekAppointmentUpdate}\r\n                            handleWeekAppointmentUpdate={this.handleWeekAppointmentUpdate}\r\n                            handleShowDimmer={this.handleShowDimmer}\r\n                            handleHideDimmer={this.handleHideDimmer}\r\n                            doc={this.state.filter}\r\n                        />\r\n            }\r\n            else if(this.state.filter !== 'appointments' && this.state.filter !== 'availability' && this.state.view === 'day'){\r\n                currView =<SecretaryDayDoc\r\n                            day={this.state.date}\r\n                            appointments={this.state.dayAppointmentsDoc}\r\n                            handleDayDocAppointmentUpdate={this.handleDayDocAppointmentUpdate}\r\n                            handleDayAppointmentUpdate={this.handleDayAppointmentUpdate}\r\n                            handleShowDimmer={this.handleShowDimmer}\r\n                            handleHideDimmer={this.handleHideDimmer}\r\n                            doc={this.state.filter}\r\n                        />\r\n            }\r\n        }\r\n        return(\r\n            <>\r\n                <Dimmer\r\n                            active={this.state.activeDimmer}\r\n                            inverted\r\n                            id=\"list-dimmer\"\r\n                            style={{ maxHeight: \"100%\" }}\r\n                        >\r\n                            <div className=\"ui elastic huge green loader\"></div>\r\n                </Dimmer>\r\n                <SemanticToastContainer position='top-center'></SemanticToastContainer>\r\n                <Header id='secretary_header_container' content={\r\n                    <Navbar id='secretary_navbar'\r\n                        // doctors={doctors}\r\n                        // views={views}\r\n                        onChangeDate={this.onChangeDate}\r\n                        onPrev={this.onPrev}\r\n                        onNext={this.onNext}\r\n                        onToday={this.onToday}\r\n                        onChangeView={this.onChangeView}\r\n                        date={this.state.date}\r\n                        filter={this.state.filter}\r\n                        filters={filter}\r\n                        viewer={viewer}\r\n                        doctors={this.state.doctors}\r\n                        onChangeFilter={this.onChangeFilter}\r\n                    />\r\n                }\r\n                    style={{height: 65+'px'}}/>\r\n                <SecretaryHeader id='secretary_dateHeader'\r\n                    date={this.state.date}\r\n                    onChangeDate={this.onChangeDate}\r\n                    startOfWeek={this.state.startOfWeek}\r\n                    endOfWeek={this.state.endOfWeek}\r\n                    daysParent={this.state.days}\r\n                    weekUnparsed={this.state.weekUnparsed}\r\n                    weekLength={this.state.days.length}\r\n                    handleWeekAppointmentUpdate={this.handleWeekAppointmentUpdate}\r\n                    handleDayAppointmentUpdate={this.handleDayAppointmentUpdate}\r\n                    handleWeekAvailable={this.handleWeekAvailable}\r\n\r\n                >\r\n\r\n                </SecretaryHeader>\r\n                <div style={{height: 840+'px', margin:0+'px', overflowY:\"auto\"}}>\r\n                {currView}\r\n                </div>\r\n                \r\n                \r\n            </>\r\n        )\r\n            \r\n            \r\n    }\r\n}","import React from \"react\";\r\nimport { Image } from \"semantic-ui-react\";\r\nfunction Logo() {\r\n    return (\r\n        <Image\r\n            centered\r\n            size=\"massive\"\r\n            id=\"image\"\r\n            src=\"img/Access Dental Clinic Trans.png\"\r\n        />\r\n    );\r\n}\r\n\r\nexport default Logo;\r\n","import React from \"react\";\r\nimport Logo from \"./logo.js\";\r\nimport { Menu, Button, Icon, Segment } from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\n\r\nclass AdminSidebar extends React.Component {\r\n    handleItemClick(name) {\r\n        this.props.handleItem(name);\r\n        if (name==='Logout'){\r\n            \r\n            axios.get('/logout').then(window.location.href =\"/\");\r\n            ;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    handleModal(name) {\r\n        this.props.handleModal(name);\r\n    }\r\n\r\n    handleTable(name) {\r\n        this.props.handleTable(name);\r\n    }\r\n\r\n    render() {\r\n        let { activeItem } = this.props;\r\n        const no_padding = { padding: 0 };\r\n\r\n        const item_styling = {\r\n            margin: 0,\r\n            fontWeight: \"bold\",\r\n            padding: \"13px 16px 13px 16px\",\r\n        };\r\n\r\n        const icon_styling = {\r\n            marginRight: 13.5 + \"px\",\r\n        };\r\n\r\n        const menu_styling = {\r\n            width: 15 + \"%\",\r\n            height: 100 + \"%\",\r\n            border: 0 + \"px none\",\r\n            padding: 0 + \"px\",\r\n            backgroundColor: \"#f5f5f5\",\r\n            boxShadow: \"2px 2px 2px 2px #f1f1f1\",\r\n            margin: 0,\r\n        };\r\n\r\n        return (\r\n            <Menu secondary vertical style={menu_styling}>\r\n                <Menu.Item style={no_padding} horizontalalign=\"middle\">\r\n                    <Logo />\r\n                </Menu.Item>\r\n                <Segment basic textAlign=\"center\" style={no_padding}>\r\n                    <Button\r\n                        circular\r\n                        color=\"pink\"\r\n                        id=\"create\"\r\n                        onClick={() => this.handleModal(\"admin-create\")}\r\n                    >\r\n                        CREATE\r\n                    </Button>\r\n                </Segment>\r\n                <Menu.Item\r\n                    active={activeItem === \"Dentist\"}\r\n                    onClick={() => {\r\n                        this.handleItemClick(\"Dentist\");\r\n                        this.handleTable(\"Dentist\");\r\n                    }}\r\n                    id=\"dentistButton\"\r\n                    style={item_styling}\r\n                >\r\n                    <div className=\"ui left\">\r\n                        <Icon\r\n                            name=\"user md\"\r\n                            size=\"large\"\r\n                            style={icon_styling}\r\n                        />\r\n                        Dentist\r\n                    </div>\r\n                </Menu.Item>\r\n                <Menu.Item\r\n                    active={activeItem === \"Procedure\"}\r\n                    onClick={() => {\r\n                        this.handleItemClick(\"Procedure\");\r\n                        this.handleTable(\"Procedure\");\r\n                    }}\r\n                    id=\"procedureButton\"\r\n                    style={item_styling}\r\n                >\r\n                    <div className=\"ui left\">\r\n                        <Icon\r\n                            name=\"clipboard\"\r\n                            size=\"large\"\r\n                            style={icon_styling}\r\n                        />\r\n                        Procedure\r\n                    </div>\r\n                </Menu.Item>\r\n                <Menu.Item\r\n                    active={activeItem === \"Export Data\"}\r\n                    onClick={() => this.handleItemClick(\"Export Data\")}\r\n                    id=\"downloadFile\"\r\n                    style={item_styling}\r\n                >\r\n                    <div className=\"ui left\">\r\n                        <Icon\r\n                            name=\"download\"\r\n                            size=\"large\"\r\n                            style={icon_styling}\r\n                        />\r\n                        Export Data\r\n                    </div>\r\n                </Menu.Item>\r\n                <Menu.Item\r\n                    active={activeItem === \"Reset Admin\"}\r\n                    onClick={() => this.handleModal(\"admin-reset-password\")}\r\n                    id=\"resetAdmin\"\r\n                    style={item_styling}\r\n                >\r\n                    <div className=\"ui left\" id=\"reset-password\">\r\n                        <Icon name=\"lock\" size=\"large\" style={icon_styling} />\r\n                        Reset Admin\r\n                    </div>\r\n                </Menu.Item>\r\n                <Menu.Item\r\n                    active={activeItem === \"Reset Secretary\"}\r\n                    onClick={() => this.handleModal(\"admin-reset-secretary\")}\r\n                    id=\"resetSecretary\"\r\n                    style={item_styling}\r\n                >\r\n                    <div className=\"ui left\" id=\"reset-secretary\">\r\n                        <Icon.Group style={icon_styling}>\r\n                            <Icon name=\"user\" size=\"large\" />\r\n                            <Icon corner name=\"lock\" />\r\n                        </Icon.Group>\r\n                        Reset Secretary\r\n                    </div>\r\n                </Menu.Item>\r\n                <Menu.Item\r\n                    active={activeItem === \"Free-Up Memory\"}\r\n                    onClick={() => this.handleModal(\"admin-free-memory\")}\r\n                    id=\"procedureButton\"\r\n                    style={item_styling}\r\n                >\r\n                    <div className=\"ui left\">\r\n                        <Icon\r\n                            name=\"recycle\"\r\n                            size=\"large\"\r\n                            style={icon_styling}\r\n                        />\r\n                        Free-up Memory\r\n                    </div>\r\n                </Menu.Item>\r\n                <Menu.Item\r\n                    active={activeItem === \"Logout\"}\r\n                    onClick={() => this.handleItemClick(\"Logout\")}\r\n                    id=\"logoutButton\"\r\n                    style={item_styling}\r\n                >\r\n                    <div className=\"ui left\">\r\n                        <Icon\r\n                            name=\"sign out\"\r\n                            size=\"large\"\r\n                            style={icon_styling}\r\n                        />\r\n                        Logout\r\n                    </div>\r\n                </Menu.Item>\r\n            </Menu>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AdminSidebar;\r\n","import React from \"react\";\r\nimport { Table, Button, Icon } from \"semantic-ui-react\";\r\nimport axios from \"axios\";\r\n\r\nclass AdminDentistTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            dentists: [],\r\n        };\r\n    }\r\n\r\n    handleShowDimmer = () => this.props.handleShowDimmer();\r\n    handleHideDimmer = () => this.props.handleHideDimmer();\r\n\r\n    handleModal(name, processname) {\r\n        this.props.handleModal(name, processname);\r\n    }\r\n\r\n    handleUpdateTable = () => this.props.handleUpdateTable();\r\n\r\n    handleStatus = (e, { datakey, status }) => {\r\n        let data;\r\n\r\n        if (status === \"Active\") {\r\n            data = {\r\n                doctorID: datakey,\r\n                status: \"Inactive\",\r\n            };\r\n        } else {\r\n            data = {\r\n                doctorID: datakey,\r\n                status: \"Active\",\r\n            };\r\n        }\r\n        axios.post(\"admin/updateDentistStatus\", data).then((response) => {\r\n            this.handleUpdateTable();\r\n        });\r\n    };\r\n\r\n    render() {\r\n        let { dentists } = this.props;\r\n        return (\r\n            <Table sortable singleLine selectable id=\"table\">\r\n                <Table.Header>\r\n                    <Table.Row>\r\n                        <Table.HeaderCell>First Name</Table.HeaderCell>\r\n                        <Table.HeaderCell>Last Name</Table.HeaderCell>\r\n                        <Table.HeaderCell>Last Login</Table.HeaderCell>\r\n                        <Table.HeaderCell textAlign=\"center\">\r\n                            Status\r\n                        </Table.HeaderCell>\r\n                        <Table.HeaderCell textAlign=\"center\">\r\n                            Schedule\r\n                        </Table.HeaderCell>\r\n                        <Table.HeaderCell textAlign=\"right\"></Table.HeaderCell>\r\n                    </Table.Row>\r\n                </Table.Header>\r\n                <Table.Body>\r\n                    {dentists.map(\r\n                        ({\r\n                            key,\r\n                            firstname,\r\n                            lastname,\r\n                            status,\r\n                            lastLogin,\r\n                            username,\r\n                        }) => (\r\n                            <Table.Row key={key}>\r\n                                <Table.Cell>{firstname}</Table.Cell>\r\n                                <Table.Cell>{lastname}</Table.Cell>\r\n                                <Table.Cell>{lastLogin}</Table.Cell>\r\n                                <Table.Cell textAlign=\"center\">\r\n                                    {status === \"Active\" && (\r\n                                        <Button\r\n                                            color=\"green\"\r\n                                            datakey={key}\r\n                                            status={status}\r\n                                            onClick={this.handleStatus}\r\n                                            id={\r\n                                                firstname.toString() +\r\n                                                \"-\" +\r\n                                                lastname.toString() +\r\n                                                \"-active\"\r\n                                            }\r\n                                        >\r\n                                            Active\r\n                                        </Button>\r\n                                    )}\r\n                                    {status === \"Inactive\" && (\r\n                                        <Button\r\n                                            datakey={key}\r\n                                            status={status}\r\n                                            onClick={this.handleStatus}\r\n                                            id={\r\n                                                firstname.toString() +\r\n                                                \"-\" +\r\n                                                lastname.toString() +\r\n                                                \"-active\"\r\n                                            }\r\n                                        >\r\n                                            Inactive\r\n                                        </Button>\r\n                                    )}\r\n                                </Table.Cell>\r\n                                <Table.Cell textAlign=\"center\">\r\n                                    <Button\r\n                                        color=\"green\"\r\n                                        id={\r\n                                            firstname.toString() +\r\n                                            \"-\" +\r\n                                            lastname.toString() +\r\n                                            \"-view\"\r\n                                        }\r\n                                        onClick={() => {\r\n                                            this.props.handleUpdateScheduleTable(\r\n                                                key\r\n                                            );\r\n                                            this.props.handleUpdateUnavailableTable(\r\n                                                key\r\n                                            );\r\n                                            this.handleModal(\r\n                                                \"admin-view-schedule\",\r\n                                                { key, firstname, lastname }\r\n                                            );\r\n                                        }}\r\n                                    >\r\n                                        View\r\n                                    </Button>\r\n                                </Table.Cell>\r\n                                <Table.Cell textAlign=\"right\">\r\n                                    <Icon\r\n                                        name=\"edit\"\r\n                                        id={\r\n                                            firstname.toString() +\r\n                                            \"-\" +\r\n                                            lastname.toString() +\r\n                                            \"-edit\"\r\n                                        }\r\n                                        size=\"large\"\r\n                                        onClick={() => {\r\n                                            this.props.handleUpdateModalUsername(\r\n                                                key\r\n                                            );\r\n                                            this.handleModal(\r\n                                                \"admin-edit-dentist\",\r\n                                                { key, firstname, lastname }\r\n                                            );\r\n                                        }}\r\n                                    ></Icon>\r\n                                    <Icon\r\n                                        name=\"trash\"\r\n                                        id={\r\n                                            firstname.toString() +\r\n                                            \"-\" +\r\n                                            lastname.toString() +\r\n                                            \"-delete\"\r\n                                        }\r\n                                        size=\"large\"\r\n                                        onClick={() =>\r\n                                            this.handleModal(\r\n                                                \"admin-delete-dentist\",\r\n                                                { key, firstname, lastname }\r\n                                            )\r\n                                        }\r\n                                    ></Icon>\r\n                                </Table.Cell>\r\n                            </Table.Row>\r\n                        )\r\n                    )}\r\n                </Table.Body>\r\n            </Table>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AdminDentistTable;\r\n","import React from \"react\";\r\nimport { Table, Button } from \"semantic-ui-react\";\r\n\r\nclass AdminProcedureTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            procedures: [],\r\n        };\r\n    }\r\n\r\n    handleShowDimmer = () => this.props.handleShowDimmer();\r\n\r\n    handleHideDimmer = () => this.props.handleHideDimmer();\r\n\r\n    handleModal(name, processname) {\r\n        this.props.handleModal(name, processname);\r\n    }\r\n\r\n    render() {\r\n        let { procedures } = this.props;\r\n\r\n        return (\r\n            <Table sortable singleLine selectable id=\"table\">\r\n                <Table.Header>\r\n                    <Table.Row>\r\n                        <Table.HeaderCell>Name</Table.HeaderCell>\r\n                        <Table.HeaderCell textAlign=\"center\"></Table.HeaderCell>\r\n                    </Table.Row>\r\n                </Table.Header>\r\n                <Table.Body>\r\n                    {procedures.map(({ key, processname }) => (\r\n                        <Table.Row key={key}>\r\n                            <Table.Cell>{processname}</Table.Cell>\r\n                            <Table.Cell textAlign=\"right\">\r\n                                <Button\r\n                                    id={processname.toString()+\"-edit\"}\r\n                                    onClick={() =>\r\n                                        this.handleModal(\r\n                                            \"admin-edit-procedure\",\r\n                                            { key, processname }\r\n                                        )\r\n                                    }\r\n                                >\r\n                                    Edit\r\n                                </Button>\r\n                                <Button\r\n                                    negative\r\n                                    id={processname.toString()+\"-delete\"}\r\n                                    onClick={() =>\r\n                                        this.handleModal(\r\n                                            \"admin-delete-procedure\",\r\n                                            { key, processname }\r\n                                        )\r\n                                    }\r\n                                >\r\n                                    Delete\r\n                                </Button>\r\n                            </Table.Cell>\r\n                        </Table.Row>\r\n                    ))}\r\n                </Table.Body>\r\n            </Table>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AdminProcedureTable;\r\n","import React from \"react\";\r\nimport AdminDentistTable from \"./admin-dentist-table\";\r\nimport AdminProcedureTable from \"./admin-procedure-table\";\r\n\r\nclass AdminTable extends React.Component {\r\n    render() {\r\n        let { activeTable, dentists, procedures } = this.props;\r\n        let table;\r\n        if (activeTable === \"Dentist\") {\r\n            table = (\r\n                <AdminDentistTable\r\n                    handleHideDimmer={this.handleHideDimmer}\r\n                    handleShowDimmer={this.handleShowDimmer}\r\n                    handleModal={this.props.handleModal}\r\n                    dentists={dentists}\r\n                    handleUpdateTable={this.props.handleUpdateDentistTable}\r\n                    handleUpdateScheduleTable={\r\n                        this.props.handleUpdateScheduleTable\r\n                    }\r\n                    handleUpdateUnavailableTable={\r\n                        this.props.handleUpdateUnavailableTable\r\n                    }\r\n                    handleUpdateModalUsername={\r\n                        this.props.handleUpdateModalUsername\r\n                    }\r\n                ></AdminDentistTable>\r\n            );\r\n        } else if (activeTable === \"Procedure\") {\r\n            table = (\r\n                <AdminProcedureTable\r\n                    handleHideDimmer={this.handleHideDimmer}\r\n                    handleShowDimmer={this.handleShowDimmer}\r\n                    handleModal={this.props.handleModal}\r\n                    procedures={procedures}\r\n                    handleUpdateTable={this.props.handleUpdateProcedureTable}\r\n                ></AdminProcedureTable>\r\n            );\r\n        }\r\n        return <>{table}</>;\r\n    }\r\n}\r\n\r\nexport default AdminTable;\r\n","import React from \"react\";\r\nimport { Modal, Icon, Grid, Button, Segment } from \"semantic-ui-react\";\r\n\r\nclass AdminCreateModal extends React.Component {\r\n    handleOpen = () => this.props.handleModal(\"admin-create\");\r\n\r\n    handleClose = () => this.props.handleModal(\"none\");\r\n\r\n    handleModal(name) {\r\n        this.props.handleModal(name);\r\n    }\r\n\r\n    render() {\r\n        let open;\r\n\r\n        if (this.props.activeModal === \"admin-create\") {\r\n            open = true;\r\n        } else {\r\n            open = false;\r\n        }\r\n\r\n        const column_style = {\r\n            textAlign: \"center\",\r\n        };\r\n\r\n        const segment_style = {\r\n            padding: \"0 0 14px 0\",\r\n        };\r\n        return (\r\n            <>\r\n                <Modal\r\n                    size=\"tiny\"\r\n                    id=\"create-modal\"\r\n                    onClose={() => this.handleClose()}\r\n                    onOpen={() => this.handleOpen()}\r\n                    open={open}\r\n                >\r\n                    <Icon\r\n                        name=\"close\"\r\n                        onClick={this.handleClose}\r\n                        id=\"close-create-modal\"\r\n                    ></Icon>\r\n                    <Modal.Header className=\"center-header\" as=\"h2\">\r\n                        What would you like to create?\r\n                    </Modal.Header>\r\n\r\n                    <Modal.Actions>\r\n                        <Grid centered columns={2}>\r\n                            <Grid.Column style={column_style}>\r\n                                <Button\r\n                                    id=\"add-dentist-button\"\r\n                                    onClick={() =>\r\n                                        this.handleModal(\"admin-add-dentist\")\r\n                                    }\r\n                                >\r\n                                    <Segment basic style={segment_style}>\r\n                                        <Icon\r\n                                            name=\"user md\"\r\n                                            size=\"large\"\r\n                                        ></Icon>\r\n                                    </Segment>\r\n                                    New Dentist\r\n                                </Button>\r\n                            </Grid.Column>\r\n                            <Grid.Column style={column_style}>\r\n                                <Button\r\n                                    id=\"add-procedure-button\"\r\n                                    onClick={() =>\r\n                                        this.handleModal(\"admin-add-procedure\")\r\n                                    }\r\n                                >\r\n                                    <Segment basic style={segment_style}>\r\n                                        <Icon\r\n                                            name=\"clipboard\"\r\n                                            size=\"large\"\r\n                                        ></Icon>\r\n                                    </Segment>\r\n                                    New Procedure\r\n                                </Button>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AdminCreateModal;\r\n","import React from \"react\";\r\nimport {\r\n    Modal,\r\n    Icon,\r\n    Grid,\r\n    Button,\r\n    Segment,\r\n    Divider,\r\n    Checkbox,\r\n    Header,\r\n    Input,\r\n} from \"semantic-ui-react\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport moment from \"moment\";\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-semantic-toasts\";\r\n\r\nclass AdminCreateScheduleModal extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            start: null,\r\n            end: null,\r\n            start_add: null,\r\n            end_add: null,\r\n            daily: false,\r\n            repeat: false,\r\n            custom: false,\r\n            days: {\r\n                mon: false,\r\n                tue: false,\r\n                wed: false,\r\n                thu: false,\r\n                fri: false,\r\n                sat: false,\r\n            },\r\n            disabled: [],\r\n            error: {\r\n                start: false,\r\n                end: false,\r\n                start_add: false,\r\n                end_add: false,\r\n            },\r\n        };\r\n    }\r\n\r\n    resetState() {\r\n        this.setState({\r\n            start: null,\r\n            end: null,\r\n            start_add: null,\r\n            end_add: null,\r\n            daily: false,\r\n            repeat: false,\r\n            custom: false,\r\n            days: {\r\n                mon: false,\r\n                tue: false,\r\n                wed: false,\r\n                thu: false,\r\n                fri: false,\r\n                sat: false,\r\n            },\r\n            disabled: [],\r\n            error: {\r\n                start: false,\r\n                end: false,\r\n                start_add: false,\r\n                end_add: false,\r\n            },\r\n        });\r\n    }\r\n\r\n    handleSubmit = (event, { datakey, firstname, lastname }) => {\r\n        event.preventDefault();\r\n        if (this.handleValidation()) {\r\n            let days = this.state.days;\r\n            let day_array = {\r\n                mon: [],\r\n                tue: [],\r\n                wed: [],\r\n                thu: [],\r\n                fri: [],\r\n                sat: [],\r\n            };\r\n            let break_array = {\r\n                mon: [],\r\n                tue: [],\r\n                wed: [],\r\n                thu: [],\r\n                fri: [],\r\n                sat: [],\r\n            };\r\n\r\n            let start = moment(this.state.start).format(\"k:mm\");\r\n            let end = moment(this.state.end).format(\"k:mm\");\r\n            let start_add;\r\n            let end_add;\r\n            if (this.state.start_add != null) {\r\n                start_add = moment(this.state.start_add).format(\"k:mm\");\r\n            }\r\n            if (this.state.end_add != null) {\r\n                end_add = moment(this.state.end_add).format(\"k:mm\");\r\n            }\r\n\r\n            for (var day in days) {\r\n                if (this.state.daily && this.state.custom) {\r\n                    day_array[day].push(start);\r\n                    day_array[day].push(end_add);\r\n                    break_array[day].push(end);\r\n                    break_array[day].push(start_add);\r\n                } else if (this.state.daily) {\r\n                    day_array[day].push(start);\r\n                    day_array[day].push(end);\r\n                } else if (this.state.repeat) {\r\n                    if (days[day]) {\r\n                        if (this.state.custom) {\r\n                            day_array[day].push(start);\r\n                            day_array[day].push(end_add);\r\n                            break_array[day].push(end);\r\n                            break_array[day].push(start_add);\r\n                        } else {\r\n                            day_array[day].push(start);\r\n                            day_array[day].push(end);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            const data = {\r\n                \"monday[]\": day_array[\"mon\"],\r\n                \"tuesday[]\": day_array[\"tue\"],\r\n                \"wednesday[]\": day_array[\"wed\"],\r\n                \"thursday[]\": day_array[\"thu\"],\r\n                \"friday[]\": day_array[\"fri\"],\r\n                \"saturday[]\": day_array[\"sat\"],\r\n                \"mondaydifference[]\": break_array[\"mon\"],\r\n                \"tuesdaydifference[]\": break_array[\"tue\"],\r\n                \"wednesdaydifference[]\": break_array[\"wed\"],\r\n                \"thursdaydifference[]\": break_array[\"thu\"],\r\n                \"fridaydifference[]\": break_array[\"fri\"],\r\n                \"saturdaydifference[]\": break_array[\"sat\"],\r\n                doctorID: datakey,\r\n                defaultTime: \"false\",\r\n            };\r\n\r\n            axios.post(\"admin/addSchedule\", data).then((response) => {\r\n                if (response.data) {\r\n                    setTimeout(() => {\r\n                        toast({\r\n                            type: \"success\",\r\n                            title: \"Success\",\r\n                            description: (\r\n                                <p>Dentist schedule successfully added</p>\r\n                            ),\r\n                            icon: \"check\",\r\n                        });\r\n                    }, 1000);\r\n                    this.handleClose(datakey, firstname, lastname);\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    handleValidation() {\r\n        let {\r\n            daily,\r\n            custom,\r\n            repeat,\r\n            days,\r\n            start,\r\n            end,\r\n            start_add,\r\n            end_add,\r\n        } = this.state;\r\n        let formIsValid = true;\r\n        let error = {\r\n            start: false,\r\n            end: false,\r\n            start_add: false,\r\n            end_add: false,\r\n        };\r\n        let empty_time = false;\r\n        let too_short = false;\r\n        let invalid_time_interval = false;\r\n        let invalid_time = false;\r\n\r\n        if (!(daily || repeat)) {\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Please choose an occurence</p>,\r\n                icon: \"cancel\",\r\n            });\r\n            formIsValid = false;\r\n        }\r\n\r\n        if (start === null) {\r\n            error[\"start\"] = true;\r\n            empty_time = true;\r\n            formIsValid = false;\r\n        } else if (!(start.getMinutes() == 30 || start.getMinutes() == 0)) {\r\n            error[\"start\"] = true;\r\n            invalid_time = true;\r\n            formIsValid = false;\r\n        }\r\n\r\n        if (end === null) {\r\n            error[\"end\"] = true;\r\n            empty_time = true;\r\n            formIsValid = false;\r\n        } else if (!(end.getMinutes() == 30 || end.getMinutes() == 0)) {\r\n            error[\"end\"] = true;\r\n            invalid_time = true;\r\n            formIsValid = false;\r\n        }\r\n        if (start != null && end != null && start === end) {\r\n            error[\"start\"] = true;\r\n            error[\"end\"] = true;\r\n            too_short = true;\r\n            formIsValid = false;\r\n        } else if (start != null && end != null && !(start < end)) {\r\n            error[\"start\"] = true;\r\n            error[\"end\"] = true;\r\n            invalid_time_interval = true;\r\n            formIsValid = false;\r\n        }\r\n\r\n        if (custom) {\r\n            if (start_add === null) {\r\n                error[\"start_add\"] = true;\r\n                empty_time = true;\r\n                formIsValid = false;\r\n            } else if (\r\n                !(start_add.getMinutes() == 30 || start_add.getMinutes() == 0)\r\n            ) {\r\n                error[\"start_add\"] = true;\r\n                invalid_time = true;\r\n                formIsValid = false;\r\n            }\r\n            if (end_add === null) {\r\n                error[\"end_add\"] = true;\r\n                empty_time = true;\r\n                formIsValid = false;\r\n            } else if (\r\n                !(end_add.getMinutes() == 30 || end_add.getMinutes() == 0)\r\n            ) {\r\n                error[\"end_add\"] = true;\r\n                invalid_time = true;\r\n                formIsValid = false;\r\n            }\r\n            if (\r\n                start_add != null &&\r\n                end_add != null &&\r\n                (start_add === end_add || end === start_add)\r\n            ) {\r\n                error[\"start_add\"] = true;\r\n                error[\"end_add\"] = true;\r\n                too_short = true;\r\n                formIsValid = false;\r\n            } else if (\r\n                start_add != null &&\r\n                end_add != null &&\r\n                !(start_add < end_add && end < start_add)\r\n            ) {\r\n                error[\"start\"] = true;\r\n                error[\"end\"] = true;\r\n                error[\"start_add\"] = true;\r\n                error[\"end_add\"] = true;\r\n                invalid_time_interval = true;\r\n                formIsValid = false;\r\n            }\r\n        }\r\n\r\n        if (repeat) {\r\n            let check = false;\r\n            for (var day in days) {\r\n                if (days[day]) {\r\n                    check = true;\r\n                }\r\n            }\r\n            if (!check) {\r\n                toast({\r\n                    type: \"error\",\r\n                    title: \"Error\",\r\n                    description: (\r\n                        <p>Please choose a specific day of recurrence</p>\r\n                    ),\r\n                    icon: \"cancel\",\r\n                });\r\n                formIsValid = false;\r\n            }\r\n        }\r\n\r\n        if (empty_time) {\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Please input a valid time</p>,\r\n                icon: \"cancel\",\r\n            });\r\n        }\r\n\r\n        if (too_short) {\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Time interval is too short</p>,\r\n                icon: \"cancel\",\r\n            });\r\n        }\r\n\r\n        if (invalid_time_interval) {\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Invalid time interval</p>,\r\n                icon: \"cancel\",\r\n            });\r\n        }\r\n\r\n        if (invalid_time) {\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Invalid time</p>,\r\n                icon: \"cancel\",\r\n            });\r\n        }\r\n\r\n        this.setState({ error: error });\r\n\r\n        return formIsValid;\r\n    }\r\n\r\n    handleOpen = () => this.props.handleModal(\"admin-create-schedule\");\r\n\r\n    handleClose(datakey, firstname, lastname) {\r\n        this.props.handleModal(\"admin-view-schedule\", {\r\n            key: datakey,\r\n            firstname,\r\n            lastname,\r\n        });\r\n        this.props.handleUpdateScheduleTable(datakey);\r\n        this.resetState();\r\n    }\r\n\r\n    handleModal(name) {\r\n        this.props.handleModal(name);\r\n    }\r\n\r\n    handleChange = (e, { name, value }) => this.setState({ [name]: value });\r\n\r\n    handleStartAdd(time) {\r\n        this.setState({ start_add: time });\r\n    }\r\n\r\n    handleEndAdd(time) {\r\n        this.setState({ end_add: time });\r\n    }\r\n\r\n    handleStart(time) {\r\n        this.setState({ start: time });\r\n    }\r\n\r\n    handleEnd(time) {\r\n        this.setState({ end: time });\r\n    }\r\n\r\n    handleRepeat = () => {\r\n        let disabled = this.state.disabled;\r\n        disabled[\"daily\"] = !this.state.disabled[\"daily\"];\r\n        this.setState((prevState) => ({\r\n            repeat: !prevState.repeat,\r\n            disabled: disabled,\r\n        }));\r\n    };\r\n\r\n    handleDaily = () => {\r\n        let disabled = this.state.disabled;\r\n        disabled[\"repeat\"] = !this.state.disabled[\"repeat\"];\r\n        this.setState((prevState) => ({\r\n            daily: !prevState.daily,\r\n            disabled: disabled,\r\n        }));\r\n    };\r\n\r\n    handleCustom = () => {\r\n        this.setState((prevState) => ({ custom: !prevState.custom }));\r\n    };\r\n\r\n    handleDays = (e, { name }) => {\r\n        let days = this.state.days;\r\n        let active = true;\r\n        if (e.target.classList.contains(\"active\")) {\r\n            active = false;\r\n        }\r\n        days[name] = active;\r\n        this.setState({ days: days });\r\n    };\r\n\r\n    render() {\r\n        let open;\r\n\r\n        if (this.props.activeModal === \"admin-create-schedule\") {\r\n            open = true;\r\n        } else {\r\n            open = false;\r\n        }\r\n\r\n        const column_style = {\r\n            textAlign: \"center\",\r\n        };\r\n\r\n        const checkbox_style = {\r\n            margin: \"20px 0 0 0\",\r\n        };\r\n\r\n        let first_session_style = {\r\n            fontWeight: \"bold\",\r\n            color: \"white\",\r\n        };\r\n        let second_schedule;\r\n        let repeat_buttons;\r\n        var minTime = new Date();\r\n        var maxTime = new Date();\r\n        minTime.setHours(8);\r\n        minTime.setMinutes(0);\r\n        maxTime.setHours(18);\r\n        maxTime.setMinutes(0);\r\n\r\n        if (this.state.custom) {\r\n            second_schedule = (\r\n                <>\r\n                    <Grid centered columns={3}>\r\n                        <Grid.Row style={{ padding: \"0\" }}>\r\n                            <span\r\n                                style={{ fontWeight: \"bold\" }}\r\n                                id=\"second-schedule\"\r\n                            >\r\n                                Second Session\r\n                            </span>\r\n                        </Grid.Row>\r\n                        <Grid.Column>\r\n                            <DatePicker\r\n                                placeholderText=\"Start Time\"\r\n                                required\r\n                                showTimeSelect\r\n                                showTimeSelectOnly\r\n                                selected={this.state.start_add}\r\n                                timeIntervals={30}\r\n                                dateFormat=\"H:mm\"\r\n                                minTime={minTime}\r\n                                maxTime={maxTime}\r\n                                onChange={(time) => this.handleStartAdd(time)}\r\n                                id=\"start-add\"\r\n                                customInput={\r\n                                    <Input\r\n                                        icon=\"time\"\r\n                                        iconPosition=\"left\"\r\n                                        placeholder=\"Start Time\"\r\n                                        autoComplete=\"false\"\r\n                                        name=\"start-add\"\r\n                                        required\r\n                                        error={this.state.error.start_add}\r\n                                    ></Input>\r\n                                }\r\n                            ></DatePicker>\r\n                        </Grid.Column>\r\n                        <Segment\r\n                            basic\r\n                            style={{\r\n                                margin: \"6px 0 0 0\",\r\n                                fontWeight: \"bold\",\r\n                            }}\r\n                        >\r\n                            to\r\n                        </Segment>\r\n                        <Grid.Column>\r\n                            <DatePicker\r\n                                placeholderText=\"End Time\"\r\n                                required\r\n                                showTimeSelect\r\n                                showTimeSelectOnly\r\n                                selected={this.state.end_add}\r\n                                timeIntervals={30}\r\n                                dateFormat=\"H:mm\"\r\n                                minTime={minTime}\r\n                                maxTime={maxTime}\r\n                                onChange={(time) => this.handleEndAdd(time)}\r\n                                id=\"end-add\"\r\n                                customInput={\r\n                                    <Input\r\n                                        icon=\"time\"\r\n                                        iconPosition=\"left\"\r\n                                        placeholder=\"End Time\"\r\n                                        autoComplete=\"false\"\r\n                                        name=\"end-add\"\r\n                                        required\r\n                                        error={this.state.error.end_add}\r\n                                    ></Input>\r\n                                }\r\n                            ></DatePicker>\r\n                        </Grid.Column>\r\n                    </Grid>\r\n                </>\r\n            );\r\n            first_session_style = {\r\n                fontWeight: \"bold\",\r\n            };\r\n        }\r\n        if (this.state.repeat) {\r\n            repeat_buttons = (\r\n                <>\r\n                    <Grid\r\n                        centered\r\n                        columns={1}\r\n                        style={{\r\n                            fontWeight: \"bold\",\r\n                            padding: \"0 0 10px 0\",\r\n                        }}\r\n                    >\r\n                        Repeat on\r\n                    </Grid>\r\n                    <Grid centered columns={6}>\r\n                        <Button\r\n                            circular\r\n                            toggle\r\n                            active={this.state.days.mon}\r\n                            name=\"mon\"\r\n                            id=\"mon\"\r\n                            onClick={this.handleDays}\r\n                        >\r\n                            M\r\n                        </Button>\r\n                        <Button\r\n                            circular\r\n                            toggle\r\n                            active={this.state.days.tue}\r\n                            name=\"tue\"\r\n                            id=\"tue\"\r\n                            onClick={this.handleDays}\r\n                        >\r\n                            T\r\n                        </Button>\r\n                        <Button\r\n                            circular\r\n                            toggle\r\n                            active={this.state.days.wed}\r\n                            name=\"wed\"\r\n                            id=\"wed\"\r\n                            onClick={this.handleDays}\r\n                        >\r\n                            W\r\n                        </Button>\r\n                        <Button\r\n                            circular\r\n                            toggle\r\n                            active={this.state.days.thu}\r\n                            name=\"thu\"\r\n                            id=\"thu\"\r\n                            onClick={this.handleDays}\r\n                        >\r\n                            H\r\n                        </Button>\r\n                        <Button\r\n                            circular\r\n                            toggle\r\n                            active={this.state.days.fri}\r\n                            name=\"fri\"\r\n                            id=\"fri\"\r\n                            onClick={this.handleDays}\r\n                        >\r\n                            F\r\n                        </Button>\r\n                        <Button\r\n                            circular\r\n                            toggle\r\n                            active={this.state.days.sat}\r\n                            name=\"sat\"\r\n                            id=\"sat\"\r\n                            onClick={this.handleDays}\r\n                        >\r\n                            S\r\n                        </Button>\r\n                    </Grid>\r\n                </>\r\n            );\r\n        }\r\n\r\n        let firstname;\r\n        let lastname;\r\n        let key;\r\n        if (\r\n            this.props.data != null &&\r\n            this.props.data.firstname != null &&\r\n            this.props.data.lastname != null\r\n        ) {\r\n            key = this.props.data.key;\r\n            firstname = this.props.data.firstname;\r\n            lastname = this.props.data.lastname;\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <Modal\r\n                    size=\"small\"\r\n                    id=\"adding-schedule-modal\"\r\n                    onClose={() => this.handleClose(key, firstname, lastname)}\r\n                    onOpen={() => this.handleOpen()}\r\n                    open={open}\r\n                >\r\n                    <Icon\r\n                        name=\"close\"\r\n                        onClick={() =>\r\n                            this.handleClose(key, firstname, lastname)\r\n                        }\r\n                        id=\"close-adding-schedule-modal\"\r\n                    ></Icon>\r\n                    <Modal.Header as=\"h2\">\r\n                        <Icon name=\"calendar\" />\r\n                        Set Schedule\r\n                    </Modal.Header>\r\n\r\n                    <Modal.Content>\r\n                        <Grid centered columns={1}>\r\n                            <Grid.Column style={column_style}>\r\n                                <Grid.Row>\r\n                                    <Icon size=\"huge\" name=\"user md\"></Icon>\r\n                                </Grid.Row>\r\n                                <Grid.Row>\r\n                                    <span\r\n                                        id=\"doctor-name\"\r\n                                        style={{\r\n                                            fontWeight: \"bold\",\r\n                                            fontSize: 25 + \"px\",\r\n                                        }}\r\n                                    >\r\n                                        {firstname} {lastname}\r\n                                    </span>\r\n                                </Grid.Row>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n\r\n                        <Divider horizontal> Customize Your Schedule</Divider>\r\n                        <Grid centered columns={2}>\r\n                            <Checkbox\r\n                                disabled={this.state.disabled.daily}\r\n                                style={checkbox_style}\r\n                                label={(checked) => (\r\n                                    <label\r\n                                        id=\"daily\"\r\n                                        htmlFor=\"daily\"\r\n                                        checked={checked}\r\n                                    >\r\n                                        Repeat Daily\r\n                                    </label>\r\n                                )}\r\n                                name=\"daily\"\r\n                                onChange={this.handleDaily}\r\n                                checked={this.state.daily}\r\n                            ></Checkbox>\r\n                            <Checkbox\r\n                                disabled={this.state.disabled.repeat}\r\n                                style={checkbox_style}\r\n                                label={(checked) => (\r\n                                    <label\r\n                                        id=\"repeat\"\r\n                                        htmlFor=\"repeat\"\r\n                                        checked={checked}\r\n                                    >\r\n                                        Customized Recurrence\r\n                                    </label>\r\n                                )}\r\n                                name=\"repeat\"\r\n                                onChange={this.handleRepeat}\r\n                                checked={this.state.repeat}\r\n                            ></Checkbox>\r\n                        </Grid>\r\n                        <Grid centered columns={1}>\r\n                            <Checkbox\r\n                                style={checkbox_style}\r\n                                label={(checked) => (\r\n                                    <label\r\n                                        id=\"custom\"\r\n                                        htmlFor=\"custom\"\r\n                                        checked={checked}\r\n                                    >\r\n                                        Customized Working Hours\r\n                                    </label>\r\n                                )}\r\n                                name=\"custom\"\r\n                                onChange={this.handleCustom}\r\n                                checked={this.state.custom}\r\n                            ></Checkbox>\r\n                        </Grid>\r\n\r\n                        <Grid centered columns={1}>\r\n                            <Grid.Column\r\n                                style={{\r\n                                    textAlign: \"center\",\r\n                                    margin: \"15px 0 0 0\",\r\n                                }}\r\n                            >\r\n                                <Grid.Row>\r\n                                    <Header as=\"h3\">Working Hours</Header>\r\n                                </Grid.Row>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                        <Grid centered columns={3}>\r\n                            <Grid.Row style={{ padding: \"0\" }}>\r\n                                <span\r\n                                    style={first_session_style}\r\n                                    id=\"first-schedule\"\r\n                                >\r\n                                    First Session\r\n                                </span>\r\n                            </Grid.Row>\r\n                            <Grid.Column>\r\n                                <DatePicker\r\n                                    placeholderText=\"Start Time\"\r\n                                    required\r\n                                    showTimeSelect\r\n                                    showTimeSelectOnly\r\n                                    selected={this.state.start}\r\n                                    timeIntervals={30}\r\n                                    dateFormat=\"H:mm\"\r\n                                    minTime={minTime}\r\n                                    maxTime={maxTime}\r\n                                    onChange={(time) => this.handleStart(time)}\r\n                                    id=\"start\"\r\n                                    customInput={\r\n                                        <Input\r\n                                            icon=\"time\"\r\n                                            iconPosition=\"left\"\r\n                                            placeholder=\"Start Time\"\r\n                                            autoComplete=\"false\"\r\n                                            name=\"start\"\r\n                                            required\r\n                                            error={this.state.error.start}\r\n                                        ></Input>\r\n                                    }\r\n                                ></DatePicker>\r\n                            </Grid.Column>\r\n                            <Segment\r\n                                basic\r\n                                style={{\r\n                                    margin: \"6px 0 0 0\",\r\n                                    fontWeight: \"bold\",\r\n                                }}\r\n                            >\r\n                                to\r\n                            </Segment>\r\n                            <Grid.Column>\r\n                                <DatePicker\r\n                                    placeholderText=\"End Time\"\r\n                                    required\r\n                                    showTimeSelect\r\n                                    showTimeSelectOnly\r\n                                    selected={this.state.end}\r\n                                    timeIntervals={30}\r\n                                    dateFormat=\"H:mm\"\r\n                                    minTime={minTime}\r\n                                    maxTime={maxTime}\r\n                                    onChange={(time) => this.handleEnd(time)}\r\n                                    id=\"end\"\r\n                                    customInput={\r\n                                        <Input\r\n                                            icon=\"time\"\r\n                                            iconPosition=\"left\"\r\n                                            placeholder=\"End Time\"\r\n                                            autoComplete=\"false\"\r\n                                            name=\"end\"\r\n                                            required\r\n                                            error={this.state.error.end}\r\n                                        ></Input>\r\n                                    }\r\n                                ></DatePicker>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                        {second_schedule}\r\n                        {repeat_buttons}\r\n                    </Modal.Content>\r\n\r\n                    <Modal.Actions>\r\n                        <Button\r\n                            icon\r\n                            labelPosition=\"left\"\r\n                            color=\"green\"\r\n                            id=\"add-schedule-button\"\r\n                            onClick={this.handleSubmit}\r\n                            datakey={key}\r\n                            firstname={firstname}\r\n                            lastname={lastname}\r\n                        >\r\n                            <Icon name=\"check\" />\r\n                            FINISH\r\n                        </Button>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AdminCreateScheduleModal;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { Modal, Icon, Popup, Button, Form, Input } from \"semantic-ui-react\";\r\nimport { toast } from \"react-semantic-toasts\";\r\n\r\nclass AdminAddDentistModal extends React.Component {\r\n    state = {\r\n        firstname: \"\",\r\n        lastname: \"\",\r\n        username: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\",\r\n        error: {\r\n            firstname: false,\r\n            lastname: false,\r\n            username: false,\r\n            password: false,\r\n            confirmPassword: false,\r\n        },\r\n    };\r\n\r\n    handleOpen = () => this.props.handleModal(\"admin-add-dentist\");\r\n\r\n    handleClose = () => {\r\n        this.resetState();\r\n        this.props.handleModal(\"none\");\r\n    };\r\n\r\n    resetState() {\r\n        this.setState({\r\n            firstname: \"\",\r\n            lastname: \"\",\r\n            username: \"\",\r\n            password: \"\",\r\n            confirmPassword: \"\",\r\n            error: {\r\n                firstname: false,\r\n                lastname: false,\r\n                username: false,\r\n                password: false,\r\n                confirmPassword: false,\r\n            },\r\n        });\r\n    }\r\n    handleChange = (e, { name, value }) => this.setState({ [name]: value });\r\n\r\n    handleUpdateTable = () => this.props.handleUpdateTable();\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (this.handleValidation()) {\r\n            let firstname = this.state.firstname.trim();\r\n            let lastname = this.state.lastname.trim();\r\n            const data = {\r\n                firstname: this.state.firstname.trim(),\r\n                lastname: this.state.lastname.trim(),\r\n                username: this.state.username.trim(),\r\n                password: this.state.password.trim(),\r\n                type: \"dentist\",\r\n                status: \"Active\",\r\n            };\r\n            axios.post(\"admin/addDentist\", data).then((res) => {\r\n                if (res.data.message === true) {\r\n                    // this.handleClose();\r\n                    setTimeout(() => {\r\n                        toast({\r\n                            type: \"success\",\r\n                            title: \"Success\",\r\n                            description: <p>New dentist successfully added</p>,\r\n                            icon: \"check\",\r\n                        });\r\n                    }, 1000);\r\n                    this.props.handleModal(\"admin-create-schedule\", {\r\n                        key: res.data.doctor._id,\r\n                        firstname,\r\n                        lastname,\r\n                    });\r\n                    this.resetState();\r\n                    this.handleUpdateTable();\r\n                } else {\r\n                    toast({\r\n                        type: \"error\",\r\n                        title: \"Error\",\r\n                        description: <p>Username already exists</p>,\r\n                        icon: \"cancel\",\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    handleValidation() {\r\n        const checkfirst = /^[a-z A-Z]+$/; //regex for valid firstname\r\n        const checklast = /^[a-z A-Z.\\-_]+$/; //regex for valid lastname\r\n        const checkusername = /^[0-9a-zA-Z]+$/; //regex to check for valid username\r\n        const checkPassword = /^[0-9a-zA-Z]+$/;\r\n\r\n        let firstname = this.state.firstname.trim();\r\n        let lastname = this.state.lastname.trim();\r\n        let username = this.state.username.trim();\r\n        let password = this.state.password.trim();\r\n        let confirmPassword = this.state.confirmPassword.trim();\r\n        let error = {\r\n            firstname: false,\r\n            lastname: false,\r\n            username: false,\r\n            password: false,\r\n            confirmPassword: false,\r\n        };\r\n        let formIsValid = true;\r\n\r\n        if (firstname === \"\" || !firstname.match(checkfirst)) {\r\n            error[\"firstname\"] = true;\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Please input a valid firstname</p>,\r\n                icon: \"cancel\",\r\n            });\r\n            formIsValid = false;\r\n        } else if (firstname.length < 2) {\r\n            error[\"firstname\"] = true;\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Firstname is too short</p>,\r\n                icon: \"cancel\",\r\n            });\r\n            formIsValid = false;\r\n        } else if (!firstname.match(checkfirst)) {\r\n            error[\"firstname\"] = true;\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Invalid firstname format</p>,\r\n                icon: \"cancel\",\r\n            });\r\n            formIsValid = false;\r\n        }\r\n\r\n        if (lastname === \"\" || !lastname.match(checklast)) {\r\n            error[\"lastname\"] = true;\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Please input a valid lastname</p>,\r\n                icon: \"cancel\",\r\n            });\r\n            formIsValid = false;\r\n        } else if (lastname.length < 2) {\r\n            error[\"lastname\"] = true;\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Lastname is too short</p>,\r\n                icon: \"cancel\",\r\n            });\r\n            formIsValid = false;\r\n        } else if (!lastname.match(checklast)) {\r\n            error[\"lastname\"] = true;\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Invalid lastname format</p>,\r\n                icon: \"cancel\",\r\n            });\r\n            formIsValid = false;\r\n        }\r\n\r\n        if (password === \"\") {\r\n            error[\"password\"] = true;\r\n            error[\"confirmPassword\"] = true;\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Please input a valid password</p>,\r\n                icon: \"cancel\",\r\n            });\r\n            formIsValid = false;\r\n        } else if (password !== confirmPassword) {\r\n            error[\"password\"] = true;\r\n            error[\"confirmPassword\"] = true;\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Passwords do not match</p>,\r\n                icon: \"cancel\",\r\n            });\r\n            formIsValid = false;\r\n        } else if (!password.match(checkPassword)) {\r\n            error[\"password\"] = true;\r\n            error[\"confirmPassword\"] = true;\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Incorrect password format</p>,\r\n                icon: \"cancel\",\r\n            });\r\n            formIsValid = false;\r\n        } else if (password.length < 10) {\r\n            error[\"password\"] = true;\r\n            error[\"confirmPassword\"] = true;\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Password is too short</p>,\r\n                icon: \"cancel\",\r\n            });\r\n            formIsValid = false;\r\n        } else if (password.length > 32) {\r\n            error[\"password\"] = true;\r\n            error[\"confirmPassword\"] = true;\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Password is too long</p>,\r\n                icon: \"cancel\",\r\n            });\r\n            formIsValid = false;\r\n        }\r\n\r\n        if (username === \"\") {\r\n            error[\"username\"] = true;\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Please input a valid username</p>,\r\n                icon: \"cancel\",\r\n            });\r\n            formIsValid = false;\r\n        } else if (username.length < 6) {\r\n            error[\"username\"] = true;\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Username is too short</p>,\r\n                icon: \"cancel\",\r\n            });\r\n            formIsValid = false;\r\n        } else if (username.length > 32) {\r\n            error[\"username\"] = true;\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Username is too long</p>,\r\n                icon: \"cancel\",\r\n            });\r\n            formIsValid = false;\r\n        } else if (!username.match(checkusername)) {\r\n            error[\"username\"] = true;\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Incorrect username format</p>,\r\n                icon: \"cancel\",\r\n            });\r\n            formIsValid = false;\r\n        }\r\n\r\n        this.setState({ error: error });\r\n\r\n        return formIsValid;\r\n    }\r\n\r\n    render() {\r\n        let open;\r\n\r\n        if (this.props.activeModal === \"admin-add-dentist\") {\r\n            open = true;\r\n        } else {\r\n            open = false;\r\n        }\r\n        return (\r\n            <Modal\r\n                size=\"mini\"\r\n                id=\"add-dentist-modal\"\r\n                onClose={() => this.handleClose()}\r\n                onOpen={() => this.handleOpen()}\r\n                open={open}\r\n            >\r\n                <Icon\r\n                    name=\"close\"\r\n                    onClick={this.handleClose}\r\n                    id=\"close-add-dentist-modal\"\r\n                ></Icon>\r\n                <Modal.Header as=\"h2\">\r\n                    <Icon name=\"user md\"></Icon>\r\n                    New Dentist\r\n                </Modal.Header>\r\n\r\n                <Modal.Content>\r\n                    <Form onSubmit={this.handleSubmit}>\r\n                        <Form.Field required id=\"firstname-field-dentist\">\r\n                            <label>First Name</label>\r\n                            <Popup\r\n                                trigger={\r\n                                    <Input\r\n                                        error={this.state.error.firstname}\r\n                                        name=\"firstname\"\r\n                                        id=\"add-firstname-dentist\"\r\n                                        autoComplete=\"false\"\r\n                                        placeholder=\"First Name\"\r\n                                        onChange={this.handleChange}\r\n                                    />\r\n                                }\r\n                                content=\"Name should contain at least 2 characters\"\r\n                                position=\"right center\"\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field required id=\"lastname-field-dentist\">\r\n                            <label>Last Name</label>\r\n                            <Popup\r\n                                trigger={\r\n                                    <Input\r\n                                        error={this.state.error.lastname}\r\n                                        name=\"lastname\"\r\n                                        id=\"add-lastname-dentist\"\r\n                                        autoComplete=\"false\"\r\n                                        placeholder=\"Last Name\"\r\n                                        onChange={this.handleChange}\r\n                                    />\r\n                                }\r\n                                content=\"Name should contain at least 2 characters\"\r\n                                position=\"right center\"\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field required id=\"username-field-dentist\">\r\n                            <label>Username</label>\r\n                            <Popup\r\n                                trigger={\r\n                                    <Input\r\n                                        error={this.state.error.username}\r\n                                        name=\"username\"\r\n                                        id=\"add-username-dentist\"\r\n                                        autoComplete=\"false\"\r\n                                        placeholder=\"Username\"\r\n                                        onChange={this.handleChange}\r\n                                    />\r\n                                }\r\n                                content=\"You will not be able to change your username once created\"\r\n                                position=\"right center\"\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field required id=\"password-field-dentist\">\r\n                            <label>Password</label>\r\n                            <Popup\r\n                                trigger={\r\n                                    <Input\r\n                                        error={this.state.error.password}\r\n                                        name=\"password\"\r\n                                        type=\"password\"\r\n                                        id=\"add-password-dentist\"\r\n                                        autoComplete=\"false\"\r\n                                        placeholder=\"Password\"\r\n                                        onChange={this.handleChange}\r\n                                    />\r\n                                }\r\n                                content=\"Password should contain 10 to 32 alphanumeric characters\"\r\n                                position=\"right center\"\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field\r\n                            required\r\n                            id=\"confirm-password-field-dentist\"\r\n                        >\r\n                            <label>Confirm Password</label>\r\n                            <Popup\r\n                                trigger={\r\n                                    <Input\r\n                                        error={this.state.error.confirmPassword}\r\n                                        name=\"confirmPassword\"\r\n                                        type=\"password\"\r\n                                        id=\"confirm-password-dentist\"\r\n                                        autoComplete=\"false\"\r\n                                        placeholder=\"Password\"\r\n                                        onChange={this.handleChange}\r\n                                    />\r\n                                }\r\n                                content=\"Password should contain 10 to 32 alphanumeric characters\"\r\n                                position=\"right center\"\r\n                            />\r\n                        </Form.Field>\r\n                    </Form>\r\n                </Modal.Content>\r\n\r\n                <Modal.Actions>\r\n                    <Button\r\n                        icon\r\n                        labelPosition=\"left\"\r\n                        color=\"green\"\r\n                        id=\"create-dentist-button\"\r\n                        onClick={this.handleSubmit}\r\n                    >\r\n                        <Icon name=\"check\" />\r\n                        CREATE\r\n                    </Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AdminAddDentistModal;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { Modal, Icon, Button, Form, Input } from \"semantic-ui-react\";\r\nimport { toast } from \"react-semantic-toasts\";\r\n\r\nclass AdminAddProcedureModal extends React.Component {\r\n    state = {\r\n        procedure: \"\",\r\n        error: {\r\n            procedure: false,\r\n        },\r\n    };\r\n\r\n    handleOpen = () => this.props.handleModal(\"admin-add-procedure\");\r\n\r\n    handleClose = () => {\r\n        this.resetState();\r\n        this.props.handleModal(\"none\");\r\n    };\r\n\r\n    resetState() {\r\n        this.setState({\r\n            procedure: \"\",\r\n            error: {\r\n                procedure: false,\r\n            },\r\n        });\r\n    }\r\n\r\n    handleChange = (e, { name, value }) => this.setState({ [name]: value });\r\n\r\n    handleUpdateTable = () => this.props.handleUpdateTable();\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (this.handleValidation()) {\r\n            const data = {\r\n                name: this.state.procedure.trim(),\r\n            };\r\n            axios.post(\"admin/addProcess\", data).then((res) => {\r\n                if (res.data.message === true) {\r\n                    this.handleClose();\r\n                    this.resetState();\r\n                    setTimeout(() => {\r\n                        toast({\r\n                            type: \"success\",\r\n                            title: \"Success\",\r\n                            description: (\r\n                                <p>New procedure successfully added</p>\r\n                            ),\r\n                            icon: \"check\",\r\n                        });\r\n                    }, 1000);\r\n                    this.handleUpdateTable();\r\n                } else {\r\n                    toast({\r\n                        type: \"error\",\r\n                        title: \"Error\",\r\n                        description: <p>Procedure already exists</p>,\r\n                        icon: \"cancel\",\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    handleValidation() {\r\n        const check = /^[a-z A-Z]+$/; // regex for invalid characters\r\n        let procedure = this.state.procedure.trim();\r\n        let error = {\r\n            procedure: false,\r\n        };\r\n        let formIsValid = true;\r\n        if (procedure === \"\" || !procedure.match(check)) {\r\n            error[\"procedure\"] = true;\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Please input a valid procedure name</p>,\r\n                icon: \"cancel\",\r\n            });\r\n            formIsValid = false;\r\n        }\r\n        this.setState({ error: error });\r\n\r\n        return formIsValid;\r\n    }\r\n    render() {\r\n        let open;\r\n\r\n        if (this.props.activeModal === \"admin-add-procedure\") {\r\n            open = true;\r\n        } else {\r\n            open = false;\r\n        }\r\n\r\n        return (\r\n            <Modal\r\n                size=\"mini\"\r\n                id=\"procedure-modal\"\r\n                onClose={() => this.handleClose()}\r\n                onOpen={() => this.handleOpen()}\r\n                open={open}\r\n            >\r\n                <Icon\r\n                    name=\"close\"\r\n                    onClick={this.handleClose}\r\n                    id=\"close-procedure-modal\"\r\n                ></Icon>\r\n                <Modal.Header as=\"h2\">\r\n                    <Icon name=\"clipboard\"></Icon>\r\n                    New Procedure\r\n                </Modal.Header>\r\n\r\n                <Modal.Content>\r\n                    <Form onSubmit={this.handleSubmit}>\r\n                        <Form.Field required id=\"procedure-field\">\r\n                            <label>Procedure Name</label>\r\n                            <Input\r\n                                error={this.state.error.procedure}\r\n                                name=\"procedure\"\r\n                                id=\"procedure-name\"\r\n                                autoComplete=\"false\"\r\n                                placeholder=\"Procedure Name\"\r\n                                onChange={this.handleChange}\r\n                            />\r\n                        </Form.Field>\r\n                    </Form>\r\n                </Modal.Content>\r\n\r\n                <Modal.Actions>\r\n                    <Button\r\n                        icon\r\n                        labelPosition=\"left\"\r\n                        color=\"green\"\r\n                        id=\"create-procedure-button\"\r\n                        onClick={this.handleSubmit}\r\n                    >\r\n                        <Icon name=\"check\" />\r\n                        CREATE\r\n                    </Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AdminAddProcedureModal;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { Modal, Icon, Popup, Button, Form, Input } from \"semantic-ui-react\";\r\nimport { toast } from \"react-semantic-toasts\";\r\n\r\nclass AdminResetSecretaryModal extends React.Component {\r\n    state = {\r\n        currentPassword: \"\",\r\n        newPassword: \"\",\r\n        confirmNewPassword: \"\",\r\n        error: {\r\n            currentPassword: false,\r\n            newPassword: false,\r\n            confirmNewPassword: false,\r\n        },\r\n    };\r\n\r\n    handleOpen = () => this.props.handleModal(\"admin-reset-secretary\");\r\n\r\n    handleClose = () => {\r\n        this.resetState();\r\n        this.props.handleModal(\"none\");\r\n    };\r\n\r\n    handleModal(name) {\r\n        this.props.handleModal(name);\r\n    }\r\n\r\n    handleChange = (e, { name, value }) => this.setState({ [name]: value });\r\n\r\n    resetState() {\r\n        this.setState({\r\n            currentPassword: \"\",\r\n            newPassword: \"\",\r\n            confirmNewPassword: \"\",\r\n            error: {\r\n                currentPassword: false,\r\n                newPassword: false,\r\n                confirmNewPassword: false,\r\n            },\r\n        });\r\n    }\r\n\r\n    handleValidation = (event) => {\r\n        event.preventDefault();\r\n        let currentPassword = this.state.currentPassword.trim();\r\n        let error = {\r\n            currentPassword: false,\r\n            newPassword: false,\r\n            confirmNewPassword: false,\r\n        };\r\n        let formIsValid = true;\r\n\r\n        if (currentPassword === \"\") {\r\n            error[\"currentPassword\"] = true;\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Please input your current password</p>,\r\n                icon: \"cancel\",\r\n            });\r\n            formIsValid = false;\r\n            this.setState({ error: error });\r\n            this.handleNewPasswordValidation();\r\n        } else {\r\n            let data = {\r\n                newPassword: currentPassword,\r\n            };\r\n            axios\r\n                .post(\"admin/checkCurrentSecretaryPassword\", data)\r\n                .then((response) => {\r\n                    if (response.data === false) {\r\n                        error[\"currentPassword\"] = true;\r\n                        toast({\r\n                            type: \"error\",\r\n                            title: \"Error\",\r\n                            description: <p>Incorrect current password</p>,\r\n                            icon: \"cancel\",\r\n                        });\r\n                        this.setState({ error: error });\r\n                        this.handleNewPasswordValidation();\r\n                        return false;\r\n                    } else {\r\n                        if (this.handleNewPasswordValidation()) {\r\n                            const data = {\r\n                                username: \"secretary\",\r\n                                newPassword: this.state.newPassword,\r\n                            };\r\n                            axios\r\n                                .post(\"admin/updateAccountPassword\", data)\r\n                                .then((res) => {\r\n                                    this.handleClose();\r\n                                    this.resetState();\r\n                                    setTimeout(() => {\r\n                                        toast({\r\n                                            type: \"success\",\r\n                                            title: \"Success\",\r\n                                            description: (\r\n                                                <p>\r\n                                                    Password successfully reset\r\n                                                </p>\r\n                                            ),\r\n                                            icon: \"check\",\r\n                                        });\r\n                                    }, 1000);\r\n                                });\r\n                        }\r\n                    }\r\n                });\r\n        }\r\n    };\r\n\r\n    handleNewPasswordValidation() {\r\n        const checkPassword = /^[0-9a-zA-Z]+$/;\r\n        let newPassword = this.state.newPassword.trim();\r\n        let confirmNewPassword = this.state.confirmNewPassword.trim();\r\n        let error = this.state.error;\r\n        let formIsValid = true;\r\n\r\n        if (newPassword === \"\") {\r\n            error[\"newPassword\"] = true;\r\n            error[\"confirmNewPassword\"] = true;\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Please input a valid password</p>,\r\n                icon: \"cancel\",\r\n            });\r\n            formIsValid = false;\r\n        } else if (newPassword !== confirmNewPassword) {\r\n            error[\"newPassword\"] = true;\r\n            error[\"confirmNewPassword\"] = true;\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Passwords do not match</p>,\r\n                icon: \"cancel\",\r\n            });\r\n            formIsValid = false;\r\n        } else if (!newPassword.match(checkPassword)) {\r\n            error[\"newPassword\"] = true;\r\n            error[\"confirmNewPassword\"] = true;\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Incorrect password format</p>,\r\n                icon: \"cancel\",\r\n            });\r\n            formIsValid = false;\r\n        } else if (newPassword.length < 10) {\r\n            error[\"newPassword\"] = true;\r\n            error[\"confirmNewPassword\"] = true;\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Password is too short</p>,\r\n                icon: \"cancel\",\r\n            });\r\n            formIsValid = false;\r\n        } else if (newPassword.length > 32) {\r\n            error[\"newPassword\"] = true;\r\n            error[\"confirmNewPassword\"] = true;\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Password is too long</p>,\r\n                icon: \"cancel\",\r\n            });\r\n            formIsValid = false;\r\n        }\r\n\r\n        this.setState({ error: error });\r\n\r\n        return formIsValid;\r\n    }\r\n\r\n    render() {\r\n        let open;\r\n\r\n        if (this.props.activeModal === \"admin-reset-secretary\") {\r\n            open = true;\r\n        } else {\r\n            open = false;\r\n        }\r\n        return (\r\n            <Modal\r\n                closeIcon\r\n                size=\"mini\"\r\n                id=\"reset-secretary-modal\"\r\n                onClose={() => {\r\n                    this.handleClose();\r\n                }}\r\n                onOpen={() => this.handleOpen()}\r\n                open={open}\r\n            >\r\n                <Icon\r\n                    name=\"close\"\r\n                    onClick={this.handleClose}\r\n                    id=\"close-reset-secretary-modal\"\r\n                ></Icon>\r\n                <Modal.Header as=\"h2\">\r\n                    <Icon name=\"edit\"></Icon>\r\n                    Edit Secretary Password\r\n                </Modal.Header>\r\n\r\n                <Modal.Content>\r\n                    <Form onSubmit={this.handleSubmit}>\r\n                        <Form.Field required id=\"sec-current-password-field\">\r\n                            <label>Current Password</label>\r\n                            <Input\r\n                                name=\"currentPassword\"\r\n                                type=\"password\"\r\n                                id=\"sec-current-password\"\r\n                                autoComplete=\"false\"\r\n                                placeholder=\"Current Password\"\r\n                                onChange={this.handleChange}\r\n                                error={this.state.error.currentPassword}\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field required id=\"sec-new-password-field\">\r\n                            <label>New Password</label>\r\n                            <Popup\r\n                                trigger={\r\n                                    <Input\r\n                                        name=\"newPassword\"\r\n                                        type=\"password\"\r\n                                        id=\"sec-new-password\"\r\n                                        autoComplete=\"false\"\r\n                                        placeholder=\"New Password\"\r\n                                        onChange={this.handleChange}\r\n                                        error={this.state.error.newPassword}\r\n                                    />\r\n                                }\r\n                                content=\"Password should contain 10 to 32 alphanumeric characters\"\r\n                                position=\"right center\"\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field\r\n                            required\r\n                            id=\"sec-confirm-new-password-field\"\r\n                        >\r\n                            <label>Confirm New Password</label>\r\n                            <Popup\r\n                                trigger={\r\n                                    <Input\r\n                                        name=\"confirmNewPassword\"\r\n                                        type=\"password\"\r\n                                        id=\"sec-confirm-new-password\"\r\n                                        autoComplete=\"false\"\r\n                                        placeholder=\"Confirm New Password\"\r\n                                        onChange={this.handleChange}\r\n                                        error={\r\n                                            this.state.error.confirmNewPassword\r\n                                        }\r\n                                    />\r\n                                }\r\n                                content=\"Password should contain 10 to 32 alphanumeric characters\"\r\n                                position=\"right center\"\r\n                            />\r\n                        </Form.Field>\r\n                    </Form>\r\n                </Modal.Content>\r\n\r\n                <Modal.Actions>\r\n                    <Button\r\n                        icon\r\n                        labelPosition=\"left\"\r\n                        color=\"green\"\r\n                        id=\"sec-save-password\"\r\n                        onClick={this.handleValidation}\r\n                    >\r\n                        <Icon name=\"check\" />\r\n                        CONFIRM\r\n                    </Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AdminResetSecretaryModal;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { Modal, Icon, Popup, Button, Form, Input } from \"semantic-ui-react\";\r\nimport { toast } from \"react-semantic-toasts\";\r\n\r\nclass AdminResetPasswordModal extends React.Component {\r\n    state = {\r\n        currentPassword: \"\",\r\n        newPassword: \"\",\r\n        confirmNewPassword: \"\",\r\n        error: {\r\n            currentPassword: false,\r\n            newPassword: false,\r\n            confirmNewPassword: false,\r\n        },\r\n    };\r\n\r\n    handleOpen = () => this.props.handleModal(\"admin-reset-password\");\r\n\r\n    handleClose = () => {\r\n        this.resetState();\r\n        this.props.handleModal(\"none\");\r\n    };\r\n\r\n    handleModal(name) {\r\n        this.props.handleModal(name);\r\n    }\r\n\r\n    handleChange = (e, { name, value }) => this.setState({ [name]: value });\r\n\r\n    resetState() {\r\n        this.setState({\r\n            currentPassword: \"\",\r\n            newPassword: \"\",\r\n            confirmNewPassword: \"\",\r\n            error: {\r\n                currentPassword: false,\r\n                newPassword: false,\r\n                confirmNewPassword: false,\r\n            },\r\n        });\r\n    }\r\n\r\n    handleValidation = (event) => {\r\n        event.preventDefault();\r\n        let currentPassword = this.state.currentPassword.trim();\r\n        let error = {\r\n            currentPassword: false,\r\n            newPassword: false,\r\n            confirmNewPassword: false,\r\n        };\r\n        let formIsValid = true;\r\n\r\n        if (currentPassword === \"\") {\r\n            error[\"currentPassword\"] = true;\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Please input your current password</p>,\r\n                icon: \"cancel\",\r\n            });\r\n            this.setState({ error: error });\r\n            formIsValid = false;\r\n            this.handleNewPasswordValidation();\r\n        } else {\r\n            let data = {\r\n                newPassword: currentPassword,\r\n            };\r\n            axios\r\n                .post(\"admin/checkCurrentAdminPassword\", data)\r\n                .then((response) => {\r\n                    if (response.data === false) {\r\n                        error[\"currentPassword\"] = true;\r\n                        toast({\r\n                            type: \"error\",\r\n                            title: \"Error\",\r\n                            description: <p>Incorrect current password</p>,\r\n                            icon: \"cancel\",\r\n                        });\r\n                        this.setState({ error: error });\r\n                        this.handleNewPasswordValidation();\r\n                        return false;\r\n                    } else {\r\n                        if (this.handleNewPasswordValidation()) {\r\n                            const data = {\r\n                                username: \"admin\",\r\n                                newPassword: this.state.newPassword,\r\n                            };\r\n                            axios\r\n                                .post(\"admin/updateAccountPassword\", data)\r\n                                .then((res) => {\r\n                                    this.handleClose();\r\n                                    this.resetState();\r\n                                    setTimeout(() => {\r\n                                        toast({\r\n                                            type: \"success\",\r\n                                            title: \"Success\",\r\n                                            description: (\r\n                                                <p>\r\n                                                    Password successfully reset\r\n                                                </p>\r\n                                            ),\r\n                                            icon: \"check\",\r\n                                        });\r\n                                    }, 1000);\r\n                                });\r\n                        }\r\n                    }\r\n                });\r\n        }\r\n    };\r\n\r\n    handleNewPasswordValidation() {\r\n        const checkPassword = /^[0-9a-zA-Z]+$/;\r\n        let newPassword = this.state.newPassword.trim();\r\n        let confirmNewPassword = this.state.confirmNewPassword.trim();\r\n        let error = this.state.error;\r\n        let formIsValid = true;\r\n\r\n        if (newPassword === \"\") {\r\n            error[\"newPassword\"] = true;\r\n            error[\"confirmNewPassword\"] = true;\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Please input a valid password</p>,\r\n                icon: \"cancel\",\r\n            });\r\n            formIsValid = false;\r\n        } else if (newPassword !== confirmNewPassword) {\r\n            error[\"newPassword\"] = true;\r\n            error[\"confirmNewPassword\"] = true;\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Passwords do not match</p>,\r\n                icon: \"cancel\",\r\n            });\r\n            formIsValid = false;\r\n        } else if (!newPassword.match(checkPassword)) {\r\n            error[\"newPassword\"] = true;\r\n            error[\"confirmNewPassword\"] = true;\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Incorrect password format</p>,\r\n                icon: \"cancel\",\r\n            });\r\n            formIsValid = false;\r\n        } else if (newPassword.length < 10) {\r\n            error[\"newPassword\"] = true;\r\n            error[\"confirmNewPassword\"] = true;\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Password is too short</p>,\r\n                icon: \"cancel\",\r\n            });\r\n            formIsValid = false;\r\n        } else if (newPassword.length > 32) {\r\n            error[\"newPassword\"] = true;\r\n            error[\"confirmNewPassword\"] = true;\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Password is too long</p>,\r\n                icon: \"cancel\",\r\n            });\r\n            formIsValid = false;\r\n        }\r\n\r\n        this.setState({ error: error });\r\n\r\n        return formIsValid;\r\n    }\r\n\r\n    render() {\r\n        let open;\r\n\r\n        if (this.props.activeModal === \"admin-reset-password\") {\r\n            open = true;\r\n        } else {\r\n            open = false;\r\n        }\r\n        return (\r\n            <Modal\r\n                size=\"mini\"\r\n                id=\"reset-password-modal\"\r\n                onClose={() => {\r\n                    this.handleClose();\r\n                }}\r\n                onOpen={() => this.handleOpen()}\r\n                open={open}\r\n            >\r\n                <Icon\r\n                    name=\"close\"\r\n                    onClick={this.handleClose}\r\n                    id=\"close-reset-password-modal\"\r\n                ></Icon>\r\n                <Modal.Header as=\"h2\">\r\n                    <Icon name=\"edit\"></Icon>\r\n                    Edit Admin Password\r\n                </Modal.Header>\r\n\r\n                <Modal.Content>\r\n                    <Form onSubmit={this.handleSubmit}>\r\n                        <Form.Field required id=\"current-password-field\">\r\n                            <label>Current Password</label>\r\n                            <Input\r\n                                name=\"currentPassword\"\r\n                                type=\"password\"\r\n                                id=\"current-password\"\r\n                                autoComplete=\"false\"\r\n                                placeholder=\"Current Password\"\r\n                                onChange={this.handleChange}\r\n                                error={this.state.error.currentPassword}\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field required id=\"new-password-field\">\r\n                            <label>New Password</label>\r\n                            <Popup\r\n                                trigger={\r\n                                    <Input\r\n                                        name=\"newPassword\"\r\n                                        type=\"password\"\r\n                                        id=\"new-password\"\r\n                                        autoComplete=\"false\"\r\n                                        placeholder=\"New Password\"\r\n                                        onChange={this.handleChange}\r\n                                        error={this.state.error.newPassword}\r\n                                    />\r\n                                }\r\n                                content=\"Password should contain 10 to 32 alphanumeric characters\"\r\n                                position=\"right center\"\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field required id=\"confirm-new-password-field\">\r\n                            <label>Confirm New Password</label>\r\n                            <Popup\r\n                                trigger={\r\n                                    <Input\r\n                                        name=\"confirmNewPassword\"\r\n                                        type=\"password\"\r\n                                        id=\"confirm-new-password\"\r\n                                        autoComplete=\"false\"\r\n                                        placeholder=\"Confirm New Password\"\r\n                                        onChange={this.handleChange}\r\n                                        error={\r\n                                            this.state.error.confirmNewPassword\r\n                                        }\r\n                                    />\r\n                                }\r\n                                content=\"Password should contain 10 to 32 alphanumeric characters\"\r\n                                position=\"right center\"\r\n                            />\r\n                        </Form.Field>\r\n                    </Form>\r\n                </Modal.Content>\r\n\r\n                <Modal.Actions>\r\n                    <Button\r\n                        icon\r\n                        labelPosition=\"left\"\r\n                        color=\"green\"\r\n                        id=\"save-password\"\r\n                        onClick={this.handleValidation}\r\n                    >\r\n                        <Icon name=\"check\" />\r\n                        CONFIRM\r\n                    </Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AdminResetPasswordModal;\r\n","import React from \"react\";\r\nimport { Modal, Icon, Button, Segment } from \"semantic-ui-react\";\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-semantic-toasts\";\r\n\r\nclass AdminFreeMemoryModal extends React.Component {\r\n    handleOpen = () => this.props.handleModal(\"admin-free-memory\");\r\n\r\n    handleClose = () => this.props.handleModal(\"none\");\r\n\r\n    handleDeleteOld = () => {\r\n        axios.post(\"secretary/deleteXYearsApp\").then((res) => {\r\n            this.handleClose();\r\n            setTimeout(() => {\r\n                toast({\r\n                    type: \"success\",\r\n                    title: \"Success\",\r\n                    description: <p>Old appointments successfully deleted</p>,\r\n                    icon: \"check\",\r\n                });\r\n            }, 1000);\r\n        });\r\n    };\r\n\r\n    render() {\r\n        let open;\r\n        if (this.props.activeModal === \"admin-free-memory\") {\r\n            open = true;\r\n        } else {\r\n            open = false;\r\n        }\r\n\r\n        const segment_style = {\r\n            textAlign: \"center\",\r\n        };\r\n\r\n        const paragraph_style = {\r\n            textAlign: \"center\",\r\n            fontWeight: \"bold\",\r\n        };\r\n\r\n        return (\r\n            <>\r\n                <Modal\r\n                    size=\"tiny\"\r\n                    id=\"old-modal\"\r\n                    onClose={() => this.handleClose()}\r\n                    onOpen={() => this.handleOpen()}\r\n                    open={open}\r\n                >\r\n                    <Icon\r\n                        name=\"close\"\r\n                        onClick={this.handleClose}\r\n                        id=\"close-old-modal\"\r\n                    ></Icon>\r\n                    <Modal.Header as=\"h2\">\r\n                        <Icon name=\"recycle\"></Icon>\r\n                        Free-up Memory\r\n                    </Modal.Header>\r\n\r\n                    <Modal.Content>\r\n                        <Segment basic style={segment_style}>\r\n                            <Icon size=\"big\" name=\"exclamation triangle\"></Icon>\r\n                        </Segment>\r\n                        <p style={paragraph_style}>\r\n                            This program was designed to handle 512MB to\r\n                            maintain the free service. We will warn every year\r\n                            to delete past appointments made 5 years ago and\r\n                            beyond. We strongly recommend to continue this\r\n                            action.\r\n                        </p>\r\n                    </Modal.Content>\r\n\r\n                    <Modal.Actions>\r\n                        <Button\r\n                            icon\r\n                            labelPosition=\"left\"\r\n                            color=\"red\"\r\n                            id=\"delete-old\"\r\n                            onClick={this.handleDeleteOld}\r\n                        >\r\n                            <Icon name=\"trash\" />\r\n                            DELETE\r\n                        </Button>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AdminFreeMemoryModal;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { Modal, Icon, Button, Form, Input, Message } from \"semantic-ui-react\";\r\nimport { toast } from \"react-semantic-toasts\";\r\n\r\nclass AdminEditProcedureModal extends React.Component {\r\n    state = {\r\n        procedure: \"\",\r\n        error: {\r\n            procedure: false,\r\n        },\r\n    };\r\n\r\n    handleOpen = () => this.props.handleModal(\"admin-edit-procedure\");\r\n\r\n    handleClose = () => {\r\n        this.resetState();\r\n        this.props.handleModal(\"none\");\r\n    };\r\n\r\n    handleChange = (e, { name, value }) => this.setState({ [name]: value });\r\n\r\n    handleUpdateTable = () => this.props.handleUpdateTable();\r\n\r\n    resetState() {\r\n        this.setState({\r\n            procedure: \"\",\r\n            error: {\r\n                procedure: false,\r\n            },\r\n        });\r\n    }\r\n\r\n    handleSubmit = (event, { datakey }) => {\r\n        event.preventDefault();\r\n        if (this.handleValidation()) {\r\n            const data = {\r\n                procedureID: datakey,\r\n                name: this.state.procedure.trim(),\r\n            };\r\n            axios.post(\"admin/editProcess\", data).then((res) => {\r\n                if (res.data.message === true) {\r\n                    this.handleClose();\r\n                    this.resetState();\r\n                    setTimeout(() => {\r\n                        toast({\r\n                            type: \"success\",\r\n                            title: \"Success\",\r\n                            description: <p>Procedure successfully edited</p>,\r\n                            icon: \"check\",\r\n                        });\r\n                    }, 1000);\r\n                    this.handleUpdateTable();\r\n                } else {\r\n                    console.log(res);\r\n                    toast({\r\n                        type: \"error\",\r\n                        title: \"Error\",\r\n                        description: <p>Procedure already exists</p>,\r\n                        icon: \"cancel\",\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    handleValidation() {\r\n        const check = /^[a-z A-Z]+$/; // regex for invalid characters\r\n        let procedure = this.state.procedure.trim();\r\n        let error = {\r\n            procedure: false,\r\n        };\r\n        let formIsValid = true;\r\n        if (procedure === \"\" || !procedure.match(check)) {\r\n            error[\"procedure\"] = true;\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Please input a valid procedure name</p>,\r\n                icon: \"cancel\",\r\n            });\r\n            formIsValid = false;\r\n        }\r\n        this.setState({ error: error });\r\n\r\n        return formIsValid;\r\n    }\r\n\r\n    render() {\r\n        let open;\r\n\r\n        if (this.props.activeModal === \"admin-edit-procedure\") {\r\n            open = true;\r\n        } else {\r\n            open = false;\r\n        }\r\n        let oldprocedure;\r\n        let key;\r\n        if (this.props.data != null && this.props.data.processname != null) {\r\n            oldprocedure = Object.values(this.props.data.processname);\r\n            key = this.props.data.key;\r\n        }\r\n\r\n        return (\r\n            <Modal\r\n                size=\"mini\"\r\n                id=\"edit-procedure-modal\"\r\n                onClose={() => this.handleClose()}\r\n                onOpen={() => this.handleOpen()}\r\n                open={open}\r\n            >\r\n                <Icon\r\n                    name=\"close\"\r\n                    onClick={this.handleClose}\r\n                    id=\"close-edit-procedure-modal\"\r\n                ></Icon>\r\n                <Modal.Header as=\"h2\">\r\n                    <Icon name=\"edit\"></Icon>\r\n                    Edit Procedure\r\n                </Modal.Header>\r\n\r\n                <Modal.Content>\r\n                    <Form onSubmit={this.handleSubmit}>\r\n                        <Form.Field id=\"old-procedure-field\">\r\n                            <label>Old Procedure Name</label>\r\n                            <Message id=\"old-procedure-name\">\r\n                                {oldprocedure}\r\n                            </Message>\r\n                        </Form.Field>\r\n                        <Form.Field required id=\"edit-procedure-field\">\r\n                            <label>New Procedure Name</label>\r\n                            <Input\r\n                                error={this.state.error.procedure}\r\n                                name=\"procedure\"\r\n                                id=\"edit-procedure-name\"\r\n                                autoComplete=\"false\"\r\n                                placeholder=\"Procedure Name\"\r\n                                onChange={this.handleChange}\r\n                            />\r\n                        </Form.Field>\r\n                    </Form>\r\n                </Modal.Content>\r\n\r\n                <Modal.Actions>\r\n                    <Button\r\n                        datakey={key}\r\n                        icon\r\n                        labelPosition=\"left\"\r\n                        color=\"green\"\r\n                        id=\"edit-procedure-button\"\r\n                        onClick={this.handleSubmit}\r\n                    >\r\n                        <Icon name=\"check\" />\r\n                        SAVE CHANGES\r\n                    </Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AdminEditProcedureModal;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { Modal, Icon, Button } from \"semantic-ui-react\";\r\nimport { toast } from \"react-semantic-toasts\";\r\n\r\nclass AdminDeleteProcedureModal extends React.Component {\r\n    handleOpen = () => this.props.handleModal(\"admin-delete-procedure\");\r\n\r\n    handleClose = () => this.props.handleModal(\"none\");\r\n\r\n    handleUpdateTable = () => this.props.handleUpdateTable();\r\n\r\n    handleDelete = (event, { datakey }) => {\r\n        event.preventDefault();\r\n        const data = {\r\n            procedureID: datakey,\r\n        };\r\n        axios.post(\"admin/deleteProcess\", data).then((res) => {\r\n            this.handleClose();\r\n            toast({\r\n                type: \"success\",\r\n                title: \"Success\",\r\n                description: <p>Procedure successfully deleted</p>,\r\n                icon: \"check\",\r\n            });\r\n            this.handleUpdateTable();\r\n        });\r\n    };\r\n\r\n    render() {\r\n        let open;\r\n\r\n        if (this.props.activeModal === \"admin-delete-procedure\") {\r\n            open = true;\r\n        } else {\r\n            open = false;\r\n        }\r\n\r\n        let procedurename;\r\n        let key;\r\n        if (this.props.data != null && this.props.data.processname != null) {\r\n            procedurename = Object.values(this.props.data.processname);\r\n            key = this.props.data.key;\r\n        }\r\n\r\n        return (\r\n            <Modal\r\n                size=\"mini\"\r\n                id=\"delete-procedure-modal\"\r\n                onClose={() => this.handleClose()}\r\n                onOpen={() => this.handleOpen()}\r\n                open={open}\r\n            >\r\n                <Icon\r\n                    name=\"close\"\r\n                    onClick={this.handleClose}\r\n                    id=\"close-delete-procedure-modal\"\r\n                ></Icon>\r\n                <Modal.Header as=\"h2\">\r\n                    <Icon name=\"trash\"></Icon>\r\n                    Delete Procedure\r\n                </Modal.Header>\r\n\r\n                <Modal.Content>\r\n                    <span style={{ fontSize: 15 + \"px\" }}>\r\n                        Are you sure you want to delete\r\n                    </span>\r\n                    &nbsp;\r\n                    <span\r\n                        id=\"modal-text-delete-procedure\"\r\n                        style={{ fontSize: 15 + \"px\", fontWeight: \"bold\" }}\r\n                    >\r\n                        {procedurename}\r\n                    </span>\r\n                    <span style={{ fontSize: 15 + \"px\" }}>?</span>\r\n                    <br />\r\n                    <br />\r\n                    <div style={{ display: \"flex\" }} id=\"warning\">\r\n                        <Icon name=\"info\" style={{ color: \"red\" }}></Icon>\r\n                        <span style={{ color: \"red\", fontSize: 13 + \"px\" }}>\r\n                            All appointments with this procedure will be\r\n                            deleted.\r\n                        </span>\r\n                    </div>\r\n                </Modal.Content>\r\n\r\n                <Modal.Actions>\r\n                    <Button\r\n                        datakey={key}\r\n                        icon\r\n                        labelPosition=\"left\"\r\n                        onClick={this.handleClose}\r\n                    >\r\n                        <Icon name=\"cancel\" />\r\n                        CANCEL\r\n                    </Button>\r\n                    <Button\r\n                        datakey={key}\r\n                        icon\r\n                        labelPosition=\"left\"\r\n                        color=\"red\"\r\n                        id=\"delete-procedure-button\"\r\n                        onClick={this.handleDelete}\r\n                    >\r\n                        <Icon name=\"check\" />\r\n                        CONFIRM\r\n                    </Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AdminDeleteProcedureModal;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport {\r\n    Modal,\r\n    Icon,\r\n    Popup,\r\n    Button,\r\n    Form,\r\n    Input,\r\n    Message,\r\n    Dimmer,\r\n} from \"semantic-ui-react\";\r\nimport { toast } from \"react-semantic-toasts\";\r\n\r\nclass AdminEditDentistModal extends React.Component {\r\n    state = {\r\n        firstname: undefined,\r\n        lastname: undefined,\r\n        username: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\",\r\n        error: {\r\n            firstname: false,\r\n            lastname: false,\r\n            username: false,\r\n            password: false,\r\n            confirmPassword: false,\r\n        },\r\n    };\r\n\r\n    handleOpen = () => this.props.handleModal(\"admin-edit-dentist\");\r\n\r\n    handleClose = () => {\r\n        this.resetState();\r\n        this.props.handleModal(\"none\");\r\n    };\r\n\r\n    resetState() {\r\n        this.setState({\r\n            firstname: undefined,\r\n            lastname: undefined,\r\n            username: \"\",\r\n            password: \"\",\r\n            confirmPassword: \"\",\r\n            error: {\r\n                firstname: false,\r\n                lastname: false,\r\n                username: false,\r\n                password: false,\r\n                confirmPassword: false,\r\n            },\r\n        });\r\n    }\r\n\r\n    handleChange = (e, { name, value }) => this.setState({ [name]: value });\r\n\r\n    handleUpdateTable = () => this.props.handleUpdateTable();\r\n\r\n    handleSubmit = (event, { datakey, firstname, lastname }) => {\r\n        event.preventDefault();\r\n        if (this.handleValidation(firstname, lastname)) {\r\n            const data = {\r\n                doctorID: datakey,\r\n                firstname: firstname.trim(),\r\n                lastname: lastname.trim(),\r\n                password: this.state.password.trim(),\r\n            };\r\n            axios.post(\"admin/editDentist\", data).then((res) => {\r\n                this.handleClose();\r\n                setTimeout(() => {\r\n                    toast({\r\n                        type: \"success\",\r\n                        title: \"Success\",\r\n                        description: <p>Dentist successfully edited</p>,\r\n                        icon: \"check\",\r\n                    });\r\n                }, 1000);\r\n                this.handleUpdateTable();\r\n            });\r\n        }\r\n    };\r\n\r\n    handleValidation(firstname, lastname) {\r\n        const checkfirst = /^[a-z A-Z]+$/; //regex for valid firstname\r\n        const checklast = /^[a-z A-Z.\\-_]+$/; //regex for valid lastname\r\n        const checkPassword = /^[0-9a-zA-Z]+$/;\r\n\r\n        firstname = firstname.trim();\r\n        lastname = lastname.trim();\r\n        let password = this.state.password.trim();\r\n        let confirmPassword = this.state.confirmPassword.trim();\r\n        let error = {\r\n            firstname: false,\r\n            lastname: false,\r\n            username: false,\r\n            password: false,\r\n            confirmPassword: false,\r\n        };\r\n        let formIsValid = true;\r\n\r\n        if (firstname === \"\" || !firstname.match(checkfirst)) {\r\n            error[\"firstname\"] = true;\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Please input a valid firstname</p>,\r\n                icon: \"cancel\",\r\n            });\r\n            formIsValid = false;\r\n        } else if (firstname.length < 2) {\r\n            error[\"firstname\"] = true;\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Firstname is too short</p>,\r\n                icon: \"cancel\",\r\n            });\r\n            formIsValid = false;\r\n        } else if (!firstname.match(checkfirst)) {\r\n            error[\"firstname\"] = true;\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Invalid firstname format</p>,\r\n                icon: \"cancel\",\r\n            });\r\n            formIsValid = false;\r\n        }\r\n\r\n        if (lastname === \"\" || !lastname.match(checklast)) {\r\n            error[\"lastname\"] = true;\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Please input a valid lastname</p>,\r\n                icon: \"cancel\",\r\n            });\r\n            formIsValid = false;\r\n        } else if (lastname.length < 2) {\r\n            error[\"lastname\"] = true;\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Lastname is too short</p>,\r\n                icon: \"cancel\",\r\n            });\r\n            formIsValid = false;\r\n        } else if (!lastname.match(checklast)) {\r\n            error[\"lastname\"] = true;\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Invalid lastname format</p>,\r\n                icon: \"cancel\",\r\n            });\r\n            formIsValid = false;\r\n        }\r\n\r\n        if (password === \"\") {\r\n            error[\"password\"] = true;\r\n            error[\"confirmPassword\"] = true;\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Please input a valid password</p>,\r\n                icon: \"cancel\",\r\n            });\r\n            formIsValid = false;\r\n        } else if (password !== confirmPassword) {\r\n            error[\"password\"] = true;\r\n            error[\"confirmPassword\"] = true;\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Passwords do not match</p>,\r\n                icon: \"cancel\",\r\n            });\r\n            formIsValid = false;\r\n        } else if (!password.match(checkPassword)) {\r\n            error[\"password\"] = true;\r\n            error[\"confirmPassword\"] = true;\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Incorrect password format</p>,\r\n                icon: \"cancel\",\r\n            });\r\n            formIsValid = false;\r\n        } else if (password.length < 10) {\r\n            error[\"password\"] = true;\r\n            error[\"confirmPassword\"] = true;\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Password is too short</p>,\r\n                icon: \"cancel\",\r\n            });\r\n            formIsValid = false;\r\n        } else if (password.length > 32) {\r\n            error[\"password\"] = true;\r\n            error[\"confirmPassword\"] = true;\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Password is too long</p>,\r\n                icon: \"cancel\",\r\n            });\r\n            formIsValid = false;\r\n        }\r\n\r\n        this.setState({ error: error });\r\n\r\n        return formIsValid;\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.data != null) {\r\n            let datakey = this.props.data.key;\r\n            axios.post(\"admin/getUser\", { doctorID: datakey }).then((res) => {\r\n                if (res.data.user != null) {\r\n                    this.setState({\r\n                        username: res.data.user.username,\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n    render() {\r\n        let open;\r\n\r\n        const icon_styling = {\r\n            marginRight: 13.5 + \"px\",\r\n        };\r\n\r\n        const username_style = {\r\n            fontSize: \"1em\",\r\n            padding: \"9.5px 14px 9.5px 14px\",\r\n            margin: 0,\r\n        };\r\n\r\n        if (this.props.activeModal === \"admin-edit-dentist\") {\r\n            open = true;\r\n        } else {\r\n            open = false;\r\n        }\r\n\r\n        let firstname;\r\n        let lastname;\r\n        let key;\r\n        if (\r\n            this.state.firstname != undefined ||\r\n            this.state.lastname != undefined\r\n        ) {\r\n            if (this.state.firstname != undefined) {\r\n                firstname = this.state.firstname;\r\n            } else if (\r\n                this.props.data != null &&\r\n                this.props.data.firstname != null\r\n            ) {\r\n                firstname = this.props.data.firstname;\r\n            }\r\n            if (this.state.lastname != undefined) {\r\n                lastname = this.state.lastname;\r\n            } else if (\r\n                this.props.data != null &&\r\n                this.props.data.lastname != null\r\n            ) {\r\n                lastname = this.props.data.lastname;\r\n            }\r\n        } else if (\r\n            this.props.data != null &&\r\n            this.props.data.firstname != null &&\r\n            this.props.data.lastname != null\r\n        ) {\r\n            firstname = this.props.data.firstname;\r\n            lastname = this.props.data.lastname;\r\n        }\r\n\r\n        if (this.props.data != null) {\r\n            key = this.props.data.key;\r\n        }\r\n\r\n        return (\r\n            <Modal\r\n                size=\"mini\"\r\n                id=\"edit-dentist-modal\"\r\n                onClose={() => this.handleClose()}\r\n                onOpen={() => this.handleOpen()}\r\n                open={open}\r\n            >\r\n                <Icon\r\n                    name=\"close\"\r\n                    onClick={this.handleClose}\r\n                    id=\"close-edit-dentist-modal\"\r\n                ></Icon>\r\n                <Modal.Header as=\"h2\">\r\n                    <Icon name=\"edit\"></Icon>\r\n                    Edit Dentist\r\n                </Modal.Header>\r\n\r\n                <Modal.Content>\r\n                    <Form onSubmit={this.handleSubmit}>\r\n                        <Form.Field required id=\"edit-firstname-field-dentist\">\r\n                            <label>First Name</label>\r\n                            <Popup\r\n                                trigger={\r\n                                    <Input\r\n                                        error={this.state.error.firstname}\r\n                                        name=\"firstname\"\r\n                                        id=\"edit-firstname-dentist\"\r\n                                        autoComplete=\"false\"\r\n                                        placeholder=\"First Name\"\r\n                                        onChange={this.handleChange}\r\n                                        value={firstname || \"\"}\r\n                                    />\r\n                                }\r\n                                content=\"Name should contain at least 2 characters\"\r\n                                position=\"right center\"\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field required id=\"edit-lastname-field-dentist\">\r\n                            <label>Last Name</label>\r\n                            <Popup\r\n                                trigger={\r\n                                    <Input\r\n                                        error={this.state.error.lastname}\r\n                                        name=\"lastname\"\r\n                                        id=\"edit-lastname-dentist\"\r\n                                        autoComplete=\"false\"\r\n                                        placeholder=\"Last Name\"\r\n                                        onChange={this.handleChange}\r\n                                        value={lastname || \"\"}\r\n                                    />\r\n                                }\r\n                                content=\"Name should contain at least 2 characters\"\r\n                                position=\"right center\"\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field required id=\"edit-username-field-dentist\">\r\n                            <label>Username</label>\r\n                            <Message\r\n                                id=\"edit-username-dentist\"\r\n                                size=\"mini\"\r\n                                style={username_style}\r\n                            >\r\n                                {this.props.username}\r\n                            </Message>\r\n                        </Form.Field>\r\n                        <Form.Field required id=\"edit-password-field-dentist\">\r\n                            <label>Password</label>\r\n                            <Popup\r\n                                trigger={\r\n                                    <Input\r\n                                        error={this.state.error.password}\r\n                                        name=\"password\"\r\n                                        type=\"password\"\r\n                                        id=\"edit-password-dentist\"\r\n                                        autoComplete=\"false\"\r\n                                        placeholder=\"Password\"\r\n                                        onChange={this.handleChange}\r\n                                    />\r\n                                }\r\n                                content=\"Password should contain 10 to 32 alphanumeric characters\"\r\n                                position=\"right center\"\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field\r\n                            required\r\n                            id=\"edit-confirm-password-field-dentist\"\r\n                        >\r\n                            <label>Confirm Password</label>\r\n                            <Popup\r\n                                trigger={\r\n                                    <Input\r\n                                        error={this.state.error.confirmPassword}\r\n                                        name=\"confirmPassword\"\r\n                                        type=\"password\"\r\n                                        id=\"edit-confirm-password-dentist\"\r\n                                        autoComplete=\"false\"\r\n                                        placeholder=\"Password\"\r\n                                        onChange={this.handleChange}\r\n                                    />\r\n                                }\r\n                                content=\"Password should contain 10 to 32 alphanumeric characters\"\r\n                                position=\"right center\"\r\n                            />\r\n                        </Form.Field>\r\n                    </Form>\r\n                </Modal.Content>\r\n                <Dimmer\r\n                    active={this.props.activeDimmer}\r\n                    inverted\r\n                    id=\"edit-dentist-dimmer\"\r\n                    style={{ maxHeight: \"100%\" }}\r\n                >\r\n                    <div className=\"ui elastic huge green loader\"></div>\r\n                </Dimmer>\r\n\r\n                <Modal.Actions>\r\n                    <Button\r\n                        icon\r\n                        labelPosition=\"left\"\r\n                        color=\"green\"\r\n                        id=\"edit-dentist-button\"\r\n                        onClick={this.handleSubmit}\r\n                        datakey={key}\r\n                        firstname={firstname}\r\n                        lastname={lastname}\r\n                    >\r\n                        <Icon name=\"check\" />\r\n                        SAVE CHANGES\r\n                    </Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AdminEditDentistModal;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { Modal, Icon, Button } from \"semantic-ui-react\";\r\nimport { toast } from \"react-semantic-toasts\";\r\n\r\nclass AdminDeleteDentistModal extends React.Component {\r\n    handleOpen = () => this.props.handleModal(\"admin-delete-dentist\");\r\n\r\n    handleClose = () => this.props.handleModal(\"none\");\r\n\r\n    handleUpdateTable = () => this.props.handleUpdateTable();\r\n\r\n    handleDelete = (event, { datakey }) => {\r\n        event.preventDefault();\r\n        const data = {\r\n            doctorID: datakey,\r\n        };\r\n        axios.post(\"admin/deleteAccount\", data).then((res) => {\r\n            this.handleClose();\r\n            setTimeout(() => {\r\n                toast({\r\n                    type: \"success\",\r\n                    title: \"Success\",\r\n                    description: <p>User successfully deleted</p>,\r\n                    icon: \"check\",\r\n                });\r\n            }, 1000);\r\n            this.handleUpdateTable();\r\n        });\r\n    };\r\n\r\n    render() {\r\n        let open;\r\n\r\n        if (this.props.activeModal === \"admin-delete-dentist\") {\r\n            open = true;\r\n        } else {\r\n            open = false;\r\n        }\r\n\r\n        let firstname;\r\n        let lastname;\r\n        let key;\r\n        if (\r\n            this.props.data != null &&\r\n            this.props.data.firstname != null &&\r\n            this.props.data.lastname != null\r\n        ) {\r\n            key = this.props.data.key;\r\n            firstname = this.props.data.firstname;\r\n            lastname = this.props.data.lastname;\r\n        }\r\n\r\n        return (\r\n            <Modal\r\n                size=\"mini\"\r\n                id=\"delete-dentist-modal\"\r\n                onClose={() => this.handleClose()}\r\n                onOpen={() => this.handleOpen()}\r\n                open={open}\r\n            >\r\n                <Icon\r\n                    name=\"close\"\r\n                    onClick={this.handleClose}\r\n                    id=\"close-delete-dentist-modal\"\r\n                ></Icon>\r\n                <Modal.Header as=\"h2\">\r\n                    <Icon name=\"trash\"></Icon>\r\n                    Delete Dentist\r\n                </Modal.Header>\r\n\r\n                <Modal.Content>\r\n                    <span style={{ fontSize: 15 + \"px\" }}>\r\n                        Are you sure you want to delete\r\n                    </span>\r\n                    &nbsp;\r\n                    <span\r\n                        id=\"modal-text-delete-user\"\r\n                        style={{ fontSize: 15 + \"px\", fontWeight: \"bold\" }}\r\n                    >\r\n                        {lastname}, {firstname}\r\n                    </span>\r\n                    <span style={{ fontSize: 15 + \"px\" }}>?</span>\r\n                    <br />\r\n                    <br />\r\n                    <div style={{ display: \"flex\" }} id=\"warning\">\r\n                        <Icon name=\"info\" style={{ color: \"red\" }}></Icon>\r\n                        <span style={{ color: \"red\", fontSize: 13 + \"px\" }}>\r\n                            All appointments by this dentist will be deleted.\r\n                        </span>\r\n                    </div>\r\n                </Modal.Content>\r\n\r\n                <Modal.Actions>\r\n                    <Button\r\n                        datakey={key}\r\n                        icon\r\n                        labelPosition=\"left\"\r\n                        onClick={this.handleClose}\r\n                    >\r\n                        <Icon name=\"cancel\" />\r\n                        CANCEL\r\n                    </Button>\r\n                    <Button\r\n                        datakey={key}\r\n                        icon\r\n                        labelPosition=\"left\"\r\n                        color=\"red\"\r\n                        id=\"delete-dentist-button\"\r\n                        onClick={this.handleDelete}\r\n                    >\r\n                        <Icon name=\"check\" />\r\n                        CONFIRM\r\n                    </Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AdminDeleteDentistModal;\r\n","import React from \"react\";\r\nimport {\r\n    Modal,\r\n    Icon,\r\n    Grid,\r\n    Button,\r\n    Segment,\r\n    Divider,\r\n    Checkbox,\r\n    Header,\r\n    Input,\r\n} from \"semantic-ui-react\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport moment from \"moment\";\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-semantic-toasts\";\r\n\r\nclass AdminEditScheduleModal extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            start: null,\r\n            end: null,\r\n            start_add: null,\r\n            end_add: null,\r\n            custom: false,\r\n            error: {\r\n                start: false,\r\n                end: false,\r\n                start_add: false,\r\n                end_add: false,\r\n            },\r\n        };\r\n    }\r\n\r\n    resetState() {\r\n        this.setState({\r\n            start: null,\r\n            end: null,\r\n            start_add: null,\r\n            end_add: null,\r\n            custom: false,\r\n            error: {\r\n                start: false,\r\n                end: false,\r\n                start_add: false,\r\n                end_add: false,\r\n            },\r\n        });\r\n    }\r\n\r\n    handleSubmit = (\r\n        event,\r\n        { datakey, firstname, lastname, day, schedule, breaktime }\r\n    ) => {\r\n        event.preventDefault();\r\n        if (this.handleValidation()) {\r\n            let custom = this.state.custom;\r\n            let start = moment(this.state.start).format(\"k:mm\");\r\n            let end = moment(this.state.end).format(\"k:mm\");\r\n            let start_add;\r\n            let end_add;\r\n            day = day.toLowerCase();\r\n            if (this.state.start_add != null) {\r\n                start_add = moment(this.state.start_add).format(\"k:mm\");\r\n            }\r\n            if (this.state.end_add != null) {\r\n                end_add = moment(this.state.end_add).format(\"k:mm\");\r\n            }\r\n\r\n            if (!custom) {\r\n                schedule[day][0] = start;\r\n                schedule[day][1] = end;\r\n                breaktime[day] = [];\r\n            } else {\r\n                schedule[day][0] = start;\r\n                breaktime[day][0] = end;\r\n                breaktime[day][1] = start_add;\r\n                schedule[day][1] = end_add;\r\n            }\r\n\r\n            const data = {\r\n                \"monday[]\": schedule[\"monday\"],\r\n                \"tuesday[]\": schedule[\"tuesday\"],\r\n                \"wednesday[]\": schedule[\"wednesday\"],\r\n                \"thursday[]\": schedule[\"thursday\"],\r\n                \"friday[]\": schedule[\"friday\"],\r\n                \"saturday[]\": schedule[\"saturday\"],\r\n                \"mondaydifference[]\": breaktime[\"monday\"],\r\n                \"tuesdaydifference[]\": breaktime[\"tuesday\"],\r\n                \"wednesdaydifference[]\": breaktime[\"wednesday\"],\r\n                \"thursdaydifference[]\": breaktime[\"thursday\"],\r\n                \"fridaydifference[]\": breaktime[\"friday\"],\r\n                \"saturdaydifference[]\": breaktime[\"saturday\"],\r\n                doctorID: datakey,\r\n                defaultTime: \"false\",\r\n            };\r\n\r\n            axios.post(\"admin/editSchedule\", data).then((response) => {\r\n                if (response.data) {\r\n                    setTimeout(() => {\r\n                        toast({\r\n                            type: \"success\",\r\n                            title: \"Success\",\r\n                            description: (\r\n                                <p>Dentist schedule successfully edited</p>\r\n                            ),\r\n                            icon: \"check\",\r\n                        });\r\n                    }, 1000);\r\n                    this.handleClose(datakey, firstname, lastname);\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    handleValidation() {\r\n        let { custom, start, end, start_add, end_add } = this.state;\r\n        let formIsValid = true;\r\n        let error = {\r\n            start: false,\r\n            end: false,\r\n            start_add: false,\r\n            end_add: false,\r\n        };\r\n        let empty_time = false;\r\n        let too_short = false;\r\n        let invalid_time_interval = false;\r\n        let invalid_time = false;\r\n\r\n        if (start === null) {\r\n            error[\"start\"] = true;\r\n            empty_time = true;\r\n            formIsValid = false;\r\n        } else if (!(start.getMinutes() == 30 || start.getMinutes() == 0)) {\r\n            error[\"start\"] = true;\r\n            invalid_time = true;\r\n            formIsValid = false;\r\n        }\r\n\r\n        if (end === null) {\r\n            error[\"end\"] = true;\r\n            empty_time = true;\r\n            formIsValid = false;\r\n        } else if (!(end.getMinutes() == 30 || end.getMinutes() == 0)) {\r\n            error[\"end\"] = true;\r\n            invalid_time = true;\r\n            formIsValid = false;\r\n        }\r\n        if (start != null && end != null && start === end) {\r\n            error[\"start\"] = true;\r\n            error[\"end\"] = true;\r\n            too_short = true;\r\n            formIsValid = false;\r\n        } else if (start != null && end != null && !(start < end)) {\r\n            error[\"start\"] = true;\r\n            error[\"end\"] = true;\r\n            invalid_time_interval = true;\r\n            formIsValid = false;\r\n        }\r\n\r\n        if (custom) {\r\n            if (start_add === null) {\r\n                error[\"start_add\"] = true;\r\n                empty_time = true;\r\n                formIsValid = false;\r\n            } else if (\r\n                !(start_add.getMinutes() == 30 || start_add.getMinutes() == 0)\r\n            ) {\r\n                error[\"start_add\"] = true;\r\n                invalid_time = true;\r\n                formIsValid = false;\r\n            }\r\n            if (end_add === null) {\r\n                error[\"end_add\"] = true;\r\n                empty_time = true;\r\n                formIsValid = false;\r\n            } else if (\r\n                !(end_add.getMinutes() == 30 || end_add.getMinutes() == 0)\r\n            ) {\r\n                error[\"end_add\"] = true;\r\n                invalid_time = true;\r\n                formIsValid = false;\r\n            }\r\n            if (\r\n                start_add != null &&\r\n                end_add != null &&\r\n                (start_add === end_add || end === start_add)\r\n            ) {\r\n                error[\"start_add\"] = true;\r\n                error[\"end_add\"] = true;\r\n                too_short = true;\r\n                formIsValid = false;\r\n            } else if (\r\n                start_add != null &&\r\n                end_add != null &&\r\n                !(start_add < end_add && end < start_add)\r\n            ) {\r\n                error[\"start\"] = true;\r\n                error[\"end\"] = true;\r\n                error[\"start_add\"] = true;\r\n                error[\"end_add\"] = true;\r\n                invalid_time_interval = true;\r\n                formIsValid = false;\r\n            }\r\n        }\r\n\r\n        if (empty_time) {\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Please input a valid time</p>,\r\n                icon: \"cancel\",\r\n            });\r\n        }\r\n\r\n        if (too_short) {\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Time interval is too short</p>,\r\n                icon: \"cancel\",\r\n            });\r\n        }\r\n\r\n        if (invalid_time_interval) {\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Invalid time interval</p>,\r\n                icon: \"cancel\",\r\n            });\r\n        }\r\n\r\n        if (invalid_time) {\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Invalid time</p>,\r\n                icon: \"cancel\",\r\n            });\r\n        }\r\n\r\n        this.setState({ error: error });\r\n\r\n        return formIsValid;\r\n    }\r\n\r\n    handleOpen = () => this.props.handleModal(\"admin-edit-schedule\");\r\n\r\n    handleClose(doctorID, firstname, lastname) {\r\n        this.props.handleModal(\"admin-view-schedule\", {\r\n            key: doctorID,\r\n            firstname,\r\n            lastname,\r\n        });\r\n        this.props.handleUpdateTable(doctorID);\r\n        this.resetState();\r\n    }\r\n\r\n    handleModal(name) {\r\n        this.props.handleModal(name);\r\n    }\r\n\r\n    handleChange = (e, { name, value }) => this.setState({ [name]: value });\r\n\r\n    handleStartAdd(time) {\r\n        this.setState({ start_add: time });\r\n    }\r\n\r\n    handleEndAdd(time) {\r\n        this.setState({ end_add: time });\r\n    }\r\n\r\n    handleStart(time) {\r\n        this.setState({ start: time });\r\n    }\r\n\r\n    handleEnd(time) {\r\n        this.setState({ end: time });\r\n    }\r\n\r\n    handleCustom = () => {\r\n        this.setState((prevState) => ({ custom: !prevState.custom }));\r\n    };\r\n\r\n    handleDays = (e, { name }) => {\r\n        let days = this.state.days;\r\n        let active = true;\r\n        if (e.target.classList.contains(\"active\")) {\r\n            active = false;\r\n        }\r\n        days[name] = active;\r\n        this.setState({ days: days });\r\n    };\r\n\r\n    render() {\r\n        let open;\r\n\r\n        if (this.props.activeModal === \"admin-edit-schedule\") {\r\n            open = true;\r\n        } else {\r\n            open = false;\r\n        }\r\n\r\n        const column_style = {\r\n            textAlign: \"center\",\r\n        };\r\n\r\n        const checkbox_style = {\r\n            margin: \"20px 0 20px 0\",\r\n        };\r\n\r\n        let first_session_style = {\r\n            fontWeight: \"bold\",\r\n            color: \"white\",\r\n        };\r\n        let second_schedule;\r\n        var minTime = new Date();\r\n        var maxTime = new Date();\r\n        minTime.setHours(8);\r\n        minTime.setMinutes(0);\r\n        maxTime.setHours(18);\r\n        maxTime.setMinutes(0);\r\n\r\n        if (this.state.custom) {\r\n            second_schedule = (\r\n                <>\r\n                    <Grid centered columns={3}>\r\n                        <Grid.Row style={{ padding: \"0\" }}>\r\n                            <span\r\n                                style={{ fontWeight: \"bold\" }}\r\n                                id=\"second-schedule\"\r\n                            >\r\n                                Second Session\r\n                            </span>\r\n                        </Grid.Row>\r\n                        <Grid.Column>\r\n                            <DatePicker\r\n                                placeholderText=\"Start Time\"\r\n                                required\r\n                                showTimeSelect\r\n                                showTimeSelectOnly\r\n                                selected={this.state.start_add}\r\n                                timeIntervals={30}\r\n                                dateFormat=\"H:mm\"\r\n                                minTime={minTime}\r\n                                maxTime={maxTime}\r\n                                onChange={(time) => this.handleStartAdd(time)}\r\n                                id=\"edit-start-add\"\r\n                                customInput={\r\n                                    <Input\r\n                                        icon=\"time\"\r\n                                        iconPosition=\"left\"\r\n                                        placeholder=\"Start Time\"\r\n                                        autoComplete=\"false\"\r\n                                        name=\"start-add\"\r\n                                        required\r\n                                        error={this.state.error.start_add}\r\n                                    ></Input>\r\n                                }\r\n                            ></DatePicker>\r\n                        </Grid.Column>\r\n                        <Segment\r\n                            basic\r\n                            style={{\r\n                                margin: \"6px 0 0 0\",\r\n                                fontWeight: \"bold\",\r\n                            }}\r\n                        >\r\n                            to\r\n                        </Segment>\r\n                        <Grid.Column>\r\n                            <DatePicker\r\n                                placeholderText=\"End Time\"\r\n                                required\r\n                                showTimeSelect\r\n                                showTimeSelectOnly\r\n                                selected={this.state.end_add}\r\n                                timeIntervals={30}\r\n                                dateFormat=\"H:mm\"\r\n                                minTime={minTime}\r\n                                maxTime={maxTime}\r\n                                onChange={(time) => this.handleEndAdd(time)}\r\n                                id=\"end-add\"\r\n                                customInput={\r\n                                    <Input\r\n                                        icon=\"time\"\r\n                                        iconPosition=\"left\"\r\n                                        placeholder=\"End Time\"\r\n                                        autoComplete=\"false\"\r\n                                        name=\"edit-end-add\"\r\n                                        required\r\n                                        error={this.state.error.end_add}\r\n                                    ></Input>\r\n                                }\r\n                            ></DatePicker>\r\n                        </Grid.Column>\r\n                    </Grid>\r\n                </>\r\n            );\r\n            first_session_style = {\r\n                fontWeight: \"bold\",\r\n            };\r\n        }\r\n\r\n        let firstname;\r\n        let lastname;\r\n        let doctorID;\r\n        let day;\r\n        let schedule = this.props.schedule;\r\n        let breaktime = this.props.breaktime;\r\n        let index;\r\n        if (\r\n            this.props.data != null &&\r\n            this.props.data.firstname != null &&\r\n            this.props.data.lastname != null\r\n        ) {\r\n            firstname = this.props.data.firstname;\r\n            lastname = this.props.data.lastname;\r\n            doctorID = this.props.data.doctorID;\r\n            day = this.props.data.name;\r\n            index = this.props.data.index;\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <Modal\r\n                    size=\"small\"\r\n                    id=\"editing-schedule-modal\"\r\n                    onClose={() =>\r\n                        this.handleClose(doctorID, firstname, lastname)\r\n                    }\r\n                    onOpen={() => this.handleOpen()}\r\n                    open={open}\r\n                >\r\n                    <Icon\r\n                        name=\"close\"\r\n                        onClick={() =>\r\n                            this.handleClose(doctorID, firstname, lastname)\r\n                        }\r\n                        id=\"close-editing-schedule-modal\"\r\n                    ></Icon>\r\n                    <Modal.Header as=\"h2\">\r\n                        <Icon name=\"edit\" />\r\n                        Edit Schedule\r\n                    </Modal.Header>\r\n\r\n                    <Modal.Content>\r\n                        <Grid centered columns={1}>\r\n                            <Grid.Column\r\n                                style={{\r\n                                    textAlign: \"center\",\r\n                                    margin: \"15px 0 0 0\",\r\n                                }}\r\n                            >\r\n                                <Grid.Row>\r\n                                    <Header as=\"h3\">Working Hours</Header>\r\n                                </Grid.Row>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                        <Grid centered columns={1}>\r\n                            <Checkbox\r\n                                style={checkbox_style}\r\n                                label={(checked) => (\r\n                                    <label\r\n                                        id=\"custom\"\r\n                                        htmlFor=\"custom\"\r\n                                        checked={checked}\r\n                                    >\r\n                                        Customized Working Hours\r\n                                    </label>\r\n                                )}\r\n                                name=\"custom\"\r\n                                onChange={this.handleCustom}\r\n                                checked={this.state.custom}\r\n                            ></Checkbox>\r\n                        </Grid>\r\n\r\n                        <Grid centered columns={3}>\r\n                            <Grid.Row style={{ padding: \"0\" }}>\r\n                                <span\r\n                                    style={first_session_style}\r\n                                    id=\"first-schedule\"\r\n                                >\r\n                                    First Session\r\n                                </span>\r\n                            </Grid.Row>\r\n                            <Grid.Column>\r\n                                <DatePicker\r\n                                    placeholderText=\"Start Time\"\r\n                                    required\r\n                                    showTimeSelect\r\n                                    showTimeSelectOnly\r\n                                    selected={this.state.start}\r\n                                    timeIntervals={30}\r\n                                    dateFormat=\"H:mm\"\r\n                                    minTime={minTime}\r\n                                    maxTime={maxTime}\r\n                                    onChange={(time) => this.handleStart(time)}\r\n                                    id=\"edit-start\"\r\n                                    customInput={\r\n                                        <Input\r\n                                            icon=\"time\"\r\n                                            iconPosition=\"left\"\r\n                                            placeholder=\"Start Time\"\r\n                                            autoComplete=\"false\"\r\n                                            name=\"start\"\r\n                                            required\r\n                                            error={this.state.error.start}\r\n                                        ></Input>\r\n                                    }\r\n                                ></DatePicker>\r\n                            </Grid.Column>\r\n                            <Segment\r\n                                basic\r\n                                style={{\r\n                                    margin: \"6px 0 0 0\",\r\n                                    fontWeight: \"bold\",\r\n                                }}\r\n                            >\r\n                                to\r\n                            </Segment>\r\n                            <Grid.Column>\r\n                                <DatePicker\r\n                                    placeholderText=\"End Time\"\r\n                                    required\r\n                                    showTimeSelect\r\n                                    showTimeSelectOnly\r\n                                    selected={this.state.end}\r\n                                    timeIntervals={30}\r\n                                    dateFormat=\"H:mm\"\r\n                                    minTime={minTime}\r\n                                    maxTime={maxTime}\r\n                                    onChange={(time) => this.handleEnd(time)}\r\n                                    id=\"edit-end\"\r\n                                    customInput={\r\n                                        <Input\r\n                                            icon=\"time\"\r\n                                            iconPosition=\"left\"\r\n                                            placeholder=\"End Time\"\r\n                                            autoComplete=\"false\"\r\n                                            name=\"end\"\r\n                                            required\r\n                                            error={this.state.error.end}\r\n                                        ></Input>\r\n                                    }\r\n                                ></DatePicker>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                        {second_schedule}\r\n                    </Modal.Content>\r\n\r\n                    <Modal.Actions>\r\n                        <Button\r\n                            icon\r\n                            labelPosition=\"left\"\r\n                            color=\"green\"\r\n                            id=\"save-changes-schedule\"\r\n                            onClick={this.handleSubmit}\r\n                            datakey={doctorID}\r\n                            firstname={firstname}\r\n                            lastname={lastname}\r\n                            day={day}\r\n                            schedule={schedule}\r\n                            breaktime={breaktime}\r\n                        >\r\n                            <Icon name=\"check\" />\r\n                            SAVE CHANGES\r\n                        </Button>\r\n                        {day != undefined && schedule[day.toLowerCase()][0] !== undefined && (\r\n                            <Icon\r\n                                name=\"trash\"\r\n                                id=\"save-changes-schedule\"\r\n                                size=\"big\"\r\n                                style={{ margin: \"0 3.5px 0 3.5px\" }}\r\n                                onClick={() => {\r\n                                    this.resetState();\r\n                                    this.props.handleModal(\r\n                                        \"admin-delete-schedule\",\r\n                                        {\r\n                                            day,\r\n                                            firstname,\r\n                                            lastname,\r\n                                            doctorID,\r\n                                            index,\r\n                                        }\r\n                                    );\r\n                                }}\r\n                            ></Icon>\r\n                        )}\r\n                    </Modal.Actions>\r\n                </Modal>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AdminEditScheduleModal;\r\n","import React from \"react\";\r\nimport {\r\n    Modal,\r\n    Icon,\r\n    Grid,\r\n    Button,\r\n    Segment,\r\n    Table,\r\n    Dimmer,\r\n} from \"semantic-ui-react\";\r\nclass AdminViewScheduleModal extends React.Component {\r\n    state = {\r\n        activeTable: \"weekly\",\r\n    };\r\n\r\n    handleOpen = () => this.props.handleModal(\"admin-view-schedule\");\r\n\r\n    handleClose = () => {\r\n        this.resetState();\r\n        this.props.handleModal(\"none\");\r\n    };\r\n\r\n    handleModal(name) {\r\n        this.props.handleModal(name);\r\n    }\r\n\r\n    resetState() {\r\n        this.setState({\r\n            activeTable: \"weekly\",\r\n        });\r\n    }\r\n\r\n    handleTable = () => {\r\n        let { activeTable } = this.state;\r\n        if (activeTable === \"weekly\") {\r\n            this.setState({ activeTable: \"unavailable\" });\r\n        } else {\r\n            this.setState({ activeTable: \"weekly\" });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        let open;\r\n\r\n        if (this.props.activeModal === \"admin-view-schedule\") {\r\n            open = true;\r\n        } else {\r\n            open = false;\r\n        }\r\n\r\n        let firstname;\r\n        let lastname;\r\n        let doctorID;\r\n        if (\r\n            this.props.data != null &&\r\n            this.props.data.firstname != null &&\r\n            this.props.data.lastname != null\r\n        ) {\r\n            doctorID = this.props.data.key;\r\n            firstname = this.props.data.firstname;\r\n            lastname = this.props.data.lastname;\r\n        }\r\n        const icon_styling = {\r\n            marginRight: 13.5 + \"px\",\r\n        };\r\n\r\n        let schedule = this.props.schedule;\r\n        let unavailable = this.props.unavailable;\r\n        let schedule_table;\r\n        let table_buttons;\r\n        let add_button;\r\n        let table_celled;\r\n        if (this.state.activeTable == \"weekly\") {\r\n            table_celled = true;\r\n            table_buttons = (\r\n                <>\r\n                    <Button id=\"weekly\" color=\"green\">\r\n                        Weekly Schedule\r\n                    </Button>\r\n                    <Button id=\"unavailable\" onClick={this.handleTable}>\r\n                        Unavailable Date\r\n                    </Button>\r\n                </>\r\n            );\r\n            add_button = (\r\n                <Button\r\n                    id=\"add-schedule\"\r\n                    color=\"green\"\r\n                    onClick={() => {\r\n                        this.props.handleModal(\"admin-create-schedule\");\r\n                    }}\r\n                >\r\n                    Reset\r\n                </Button>\r\n            );\r\n            if (schedule != null) {\r\n                schedule_table = (\r\n                    <>\r\n                        {schedule.map(({ name, time }, index) => (\r\n                            <Table.Row>\r\n                                <Table.Cell\r\n                                    style={{\r\n                                        textAlign: \"center\",\r\n                                        fontWeight: \"bold\",\r\n                                        width: \"46%\",\r\n                                    }}\r\n                                >\r\n                                    {name}\r\n                                </Table.Cell>\r\n                                <Table.Cell\r\n                                    style={{\r\n                                        textAlign: \"center\",\r\n                                        width: \"46%\",\r\n                                    }}\r\n                                >\r\n                                    {time.map(({ range }) => (\r\n                                        <>\r\n                                            {range} <br />\r\n                                        </>\r\n                                    ))}\r\n                                </Table.Cell>\r\n                                <Table.Cell\r\n                                    textAlign=\"right\"\r\n                                    style={{ width: \"8%\" }}\r\n                                >\r\n                                    <Icon\r\n                                        name=\"edit\"\r\n                                        id={name.toString() + \"-edit\"}\r\n                                        size=\"large\"\r\n                                        onClick={()=>this.props.handleModal(\"admin-edit-schedule\", {firstname, lastname, doctorID, name, index})}\r\n                                    ></Icon>\r\n                                </Table.Cell>\r\n                            </Table.Row>\r\n                        ))}\r\n                    </>\r\n                );\r\n            }\r\n        } else {\r\n            table_celled = false;\r\n            add_button = (\r\n                <Button\r\n                    id=\"add-unavailable\"\r\n                    color=\"green\"\r\n                    onClick={() => {\r\n                        this.props.handleModal(\"admin-add-unavailable\");\r\n                    }}\r\n                >\r\n                    Add\r\n                </Button>\r\n            );\r\n            table_buttons = (\r\n                <>\r\n                    <Button id=\"weekly\" onClick={this.handleTable}>\r\n                        Weekly Schedule\r\n                    </Button>\r\n                    <Button id=\"unavailable\" color=\"green\">\r\n                        Unavailable Date\r\n                    </Button>\r\n                </>\r\n            );\r\n            if (unavailable != null && unavailable.length >= 1) {\r\n                schedule_table = (\r\n                    <>\r\n                        {unavailable.map(({ _id, time}, index) => (\r\n                            <Table.Row>\r\n                                <Table.Cell\r\n                                    style={{\r\n                                        fontWeight: \"bold\",\r\n                                    }}\r\n                                >\r\n                                    {time}\r\n                                </Table.Cell>\r\n                                <Table.Cell textAlign=\"right\">\r\n                                    <Icon\r\n                                        name=\"trash\"\r\n                                        id={\"delete-unavailable-button-\" + index}\r\n                                        size=\"large\"\r\n                                        onClick={()=> {this.props.handleModal(\"admin-delete-unavailable\", {doctorID, unavailableDateID: _id, time, firstname, lastname})}}\r\n                                    ></Icon>\r\n                                </Table.Cell>\r\n                            </Table.Row>\r\n                        ))}\r\n                    </>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <Modal\r\n                    size=\"small\"\r\n                    id=\"schedule-modal\"\r\n                    onClose={() => this.handleClose()}\r\n                    onOpen={() => this.handleOpen()}\r\n                    open={open}\r\n                >\r\n                    <Icon\r\n                        name=\"close\"\r\n                        onClick={this.handleClose}\r\n                        id=\"close-schedule-modal\"\r\n                    ></Icon>\r\n                    <Modal.Header as=\"h2\">\r\n                        <Icon name=\"calendar\" />\r\n                        Schedule\r\n                    </Modal.Header>\r\n\r\n                    <Modal.Content scrolling>\r\n                        <Grid>\r\n                            <Grid.Row>\r\n                                <Grid.Column width={13}>\r\n                                    <Icon\r\n                                        name=\"user md\"\r\n                                        size=\"big\"\r\n                                        style={icon_styling}\r\n                                    />\r\n                                    <span\r\n                                        id=\"doctor-name-schedule\"\r\n                                        style={{\r\n                                            fontWeight: \"bold\",\r\n                                            fontSize: 20 + \"px\",\r\n                                        }}\r\n                                    >\r\n                                        {firstname}&nbsp;\r\n                                        {lastname}\r\n                                    </span>\r\n                                </Grid.Column>\r\n                                <Grid.Column width={3} textAlign=\"right\">\r\n                                    {add_button}\r\n                                </Grid.Column>\r\n                            </Grid.Row>\r\n                            <Grid.Row centered={true}>{table_buttons}</Grid.Row>\r\n                            <Table\r\n                                celled={table_celled}\r\n                                striped\r\n                                selectable\r\n                                id=\"schedule-table\"\r\n                            >\r\n                                <Table.Body id=\"table-schedule\">\r\n                                    {schedule_table}\r\n                                </Table.Body>\r\n                            </Table>\r\n                            <Dimmer\r\n                                active={this.props.activeDimmer}\r\n                                inverted\r\n                                id=\"table-dimmer\"\r\n                            >\r\n                                <div className=\"ui elastic huge green loader\"></div>\r\n                            </Dimmer>\r\n                            {unavailable.length <= 0 &&\r\n                                this.state.activeTable == \"unavailable\" && (\r\n                                    <Grid.Row centered>\r\n                                        <span>No unavailable dates yet</span>\r\n                                    </Grid.Row>\r\n                                )}\r\n                        </Grid>\r\n                    </Modal.Content>\r\n                    <Modal.Actions></Modal.Actions>\r\n                </Modal>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AdminViewScheduleModal;\r\n","import React from \"react\";\r\nimport { Modal, Icon, Grid, Button, Input } from \"semantic-ui-react\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport moment from \"moment\";\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-semantic-toasts\";\r\n\r\nclass AdminAddUnavailableModal extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            start: null,\r\n            end: null,\r\n            error: {\r\n                start: false,\r\n                end: false,\r\n            },\r\n        };\r\n    }\r\n\r\n    resetState() {\r\n        this.setState({\r\n            start: null,\r\n            end: null,\r\n            error: {\r\n                start: false,\r\n                end: false,\r\n            },\r\n        });\r\n    }\r\n\r\n    handleSubmit = (event, { datakey }) => {\r\n        event.preventDefault();\r\n        let { start, end } = this.state;\r\n        let error = {\r\n            start: false,\r\n            end: false,\r\n        };\r\n        let empty_date = false;\r\n        let invalid_date = false;\r\n        let formIsValid = true;\r\n        if (start === null) {\r\n            error[\"start\"] = true;\r\n            empty_date = true;\r\n            formIsValid = false;\r\n        } else if (start <= new Date()) {\r\n            error[\"start\"] = true;\r\n            invalid_date = true;\r\n            formIsValid = false;\r\n        }\r\n        if (end === null) {\r\n            error[\"end\"] = true;\r\n            empty_date = true;\r\n            formIsValid = false;\r\n        } else if (end <= new Date()) {\r\n            error[\"end\"] = true;\r\n            invalid_date = true;\r\n            formIsValid = false;\r\n        }\r\n        if (start != null && end != null && !(start <= end)) {\r\n            error[\"start\"] = true;\r\n            error[\"end\"] = true;\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Invalid date interval</p>,\r\n                icon: \"cancel\",\r\n            });\r\n            formIsValid = false;\r\n        }\r\n        if (empty_date) {\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Please input a valid date</p>,\r\n                icon: \"cancel\",\r\n            });\r\n        }\r\n\r\n        if (invalid_date) {\r\n            toast({\r\n                type: \"error\",\r\n                title: \"Error\",\r\n                description: <p>Invalid date</p>,\r\n                icon: \"cancel\",\r\n            });\r\n        }\r\n\r\n        this.setState({ error: error });\r\n\r\n        if (formIsValid) {\r\n            start = moment(start).format(\"MMMM D, yyyy\");\r\n            end = moment(end).format(\"MMMM D, yyyy\");\r\n            let data = {\r\n                doctorID: datakey,\r\n                startDate: start,\r\n                endDate: end,\r\n            };\r\n            axios.post(\"admin/doctorHasAppointment\", data).then((response) => {\r\n                if (response.data === true) {\r\n                    error[\"start\"] = true;\r\n                    error[\"end\"] = true;\r\n                    toast({\r\n                        type: \"error\",\r\n                        title: \"Error\",\r\n                        description: <p>The chosen date has appointment/s</p>,\r\n                        icon: \"cancel\",\r\n                    });\r\n                } else {\r\n                    axios\r\n                        .post(\"admin/addUnavailableDates\", data)\r\n                        .then((response) => {\r\n                            if (response.data === true) {\r\n                                this.handleClose(datakey);\r\n                                toast({\r\n                                    type: \"success\",\r\n                                    title: \"Success\",\r\n                                    description: (\r\n                                        <p>\r\n                                            Unavailable dates successfully added\r\n                                        </p>\r\n                                    ),\r\n                                    icon: \"check\",\r\n                                });\r\n                            }\r\n                        });\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    handleOpen = () => this.props.handleModal(\"admin-add-unavailable\");\r\n\r\n    handleClose(datakey) {\r\n        this.props.handleModal(\"admin-view-schedule\");\r\n        this.props.handleUpdateTable(datakey);\r\n        this.resetState();\r\n    }\r\n\r\n    handleModal(name) {\r\n        this.props.handleModal(name);\r\n    }\r\n\r\n    handleChange = (e, { name, value }) => this.setState({ [name]: value });\r\n\r\n    handleStart(day) {\r\n        this.setState({ start: day });\r\n    }\r\n\r\n    handleEnd(day) {\r\n        this.setState({ end: day });\r\n    }\r\n\r\n    render() {\r\n        let open;\r\n\r\n        if (this.props.activeModal === \"admin-add-unavailable\") {\r\n            open = true;\r\n        } else {\r\n            open = false;\r\n        }\r\n\r\n        var minDate = new Date();\r\n        minDate.setDate(new Date().getDate() + 1);\r\n\r\n        let key;\r\n        if (this.props.data != null) {\r\n            key = this.props.data.key;\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <Modal\r\n                    size=\"tiny\"\r\n                    id=\"add-unavailable-modal\"\r\n                    onClose={() => this.handleClose(key)}\r\n                    onOpen={() => this.handleOpen()}\r\n                    open={open}\r\n                >\r\n                    <Icon\r\n                        name=\"close\"\r\n                        onClick={() => this.handleClose(key)}\r\n                        id=\"close-add-unavailable-modal\"\r\n                    ></Icon>\r\n                    <Modal.Header as=\"h2\">\r\n                        <Icon name=\"calendar\" />\r\n                        Add Unavailable Date\r\n                    </Modal.Header>\r\n\r\n                    <Modal.Content>\r\n                        <Grid columns={3}>\r\n                            <Grid.Row>\r\n                                <Grid.Column floated=\"left\">\r\n                                    <DatePicker\r\n                                        placeholderText=\"Start Date\"\r\n                                        required\r\n                                        selected={this.state.start}\r\n                                        dateFormat=\"MMMM d, yyyy\"\r\n                                        minDate={minDate}\r\n                                        onChange={(date) =>\r\n                                            this.handleStart(date)\r\n                                        }\r\n                                        id=\"start-date-input\"\r\n                                        customInput={\r\n                                            <Input\r\n                                                icon=\"calendar\"\r\n                                                iconPosition=\"left\"\r\n                                                placeholder=\"Start Date\"\r\n                                                autoComplete=\"false\"\r\n                                                name=\"start\"\r\n                                                required\r\n                                                error={this.state.error.start}\r\n                                            ></Input>\r\n                                        }\r\n                                    ></DatePicker>\r\n                                </Grid.Column>\r\n                                <span\r\n                                    style={{\r\n                                        margin: \"10px 0 0 0\",\r\n                                        fontWeight: \"bold\",\r\n                                    }}\r\n                                >\r\n                                    to\r\n                                </span>\r\n                                <Grid.Column floated=\"left\">\r\n                                    <DatePicker\r\n                                        placeholderText=\"End Date\"\r\n                                        required\r\n                                        selected={this.state.end}\r\n                                        dateFormat=\"MMMM d, yyyy\"\r\n                                        minDate={minDate}\r\n                                        onChange={(date) =>\r\n                                            this.handleEnd(date)\r\n                                        }\r\n                                        id=\"end-date-input\"\r\n                                        customInput={\r\n                                            <Input\r\n                                                icon=\"calendar\"\r\n                                                iconPosition=\"left\"\r\n                                                placeholder=\"End Date\"\r\n                                                autoComplete=\"false\"\r\n                                                name=\"end\"\r\n                                                required\r\n                                                error={this.state.error.start}\r\n                                            ></Input>\r\n                                        }\r\n                                    ></DatePicker>\r\n                                </Grid.Column>\r\n                            </Grid.Row>\r\n                        </Grid>\r\n                    </Modal.Content>\r\n\r\n                    <Modal.Actions>\r\n                        <Button\r\n                            icon\r\n                            labelPosition=\"left\"\r\n                            color=\"green\"\r\n                            id=\"add-unavailable-button\"\r\n                            onClick={this.handleSubmit}\r\n                            datakey={key}\r\n                        >\r\n                            <Icon name=\"check\" />\r\n                            FINISH\r\n                        </Button>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AdminAddUnavailableModal;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { Modal, Icon, Button } from \"semantic-ui-react\";\r\nimport { toast } from \"react-semantic-toasts\";\r\nimport { faRubleSign } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nclass AdminDeleteUnavailableModal extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleOpen = this.handleOpen.bind(this);\r\n        this.handleClose = this.handleClose.bind(this);\r\n    }\r\n    handleOpen = () => this.props.handleModal(\"admin-delete-unavailable\");\r\n\r\n\r\n    handleClose(doctorID, firstname, lastname) {\r\n        this.props.handleModal(\"admin-view-schedule\", {\r\n            key: doctorID,\r\n            firstname,\r\n            lastname,\r\n        });\r\n        this.props.handleUpdateTable(doctorID);\r\n    }\r\n\r\n\r\n    handleDelete = (\r\n        event,\r\n        { unavailabledateid, doctorid, firstname, lastname }\r\n    ) => {\r\n        event.preventDefault();\r\n        const data = {\r\n            unavailableDateID: unavailabledateid,\r\n        };\r\n        axios.post(\"admin/deleteUnavailableDates\", data).then((res) => {\r\n            this.handleClose(doctorid, firstname, lastname);\r\n            setTimeout(() => {\r\n                toast({\r\n                    type: \"success\",\r\n                    title: \"Success\",\r\n                    description: <p>Unavailable date successfully deleted</p>,\r\n                    icon: \"check\",\r\n                });\r\n            }, 1000);\r\n        });\r\n    };\r\n\r\n    render() {\r\n        let open;\r\n\r\n        if (this.props.activeModal === \"admin-delete-unavailable\") {\r\n            open = true;\r\n        } else {\r\n            open = false;\r\n        }\r\n\r\n        let time;\r\n        let key;\r\n        let firstname;\r\n        let lastname;\r\n        let doctorID;\r\n        let unavailableDateID;\r\n        if (this.props.data != null && this.props.data.time != null) {\r\n            unavailableDateID = this.props.data.unavailableDateID;\r\n            time = this.props.data.time;\r\n            firstname = this.props.data.firstname;\r\n            lastname = this.props.data.lastname;\r\n            doctorID = this.props.data.doctorID;\r\n        }\r\n\r\n        return (\r\n            <Modal\r\n                size=\"mini\"\r\n                id=\"confirmation-modal\"\r\n                onClose={() => this.handleClose(doctorID, firstname, lastname)}\r\n                onOpen={() => this.handleOpen()}\r\n                open={open}\r\n            >\r\n                <Icon\r\n                    name=\"close\"\r\n                    onClick={() => this.handleClose(doctorID, firstname, lastname)}\r\n                    id=\"close-confirmation-modal\"\r\n                ></Icon>\r\n                <Modal.Header as=\"h2\">\r\n                    <Icon name=\"trash\"></Icon>\r\n                    Delete Unavailable Date\r\n                </Modal.Header>\r\n\r\n                <Modal.Content>\r\n                    <span\r\n                        id=\"modal-text-delete-unavailable\"\r\n                        style={{ fontSize: 15 + \"px\", fontWeight: \"bold\" }}\r\n                    >\r\n                        {time}\r\n                    </span>\r\n                    <br />\r\n                    <span style={{ fontSize: 15 + \"px\" }}>\r\n                        Are you sure you want to delete this Date\r\n                    </span>\r\n                </Modal.Content>\r\n\r\n                <Modal.Actions>\r\n                    <Button\r\n                        datakey={key}\r\n                        icon\r\n                        labelPosition=\"left\"\r\n                        onClick={()=>this.handleClose(doctorID, firstname, lastname)}\r\n                    >\r\n                        <Icon name=\"cancel\" />\r\n                        CANCEL\r\n                    </Button>\r\n                    <Button\r\n                        icon\r\n                        labelPosition=\"left\"\r\n                        color=\"red\"\r\n                        id=\"remove-unavailable-button\"\r\n                        unavailabledateid={unavailableDateID}\r\n                        doctorid={doctorID}\r\n                        firstname={firstname}\r\n                        lastname={lastname}\r\n                        onClick={this.handleDelete}\r\n                    >\r\n                        <Icon name=\"check\" />\r\n                        CONFIRM\r\n                    </Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AdminDeleteUnavailableModal;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { Modal, Icon, Button } from \"semantic-ui-react\";\r\nimport { toast } from \"react-semantic-toasts\";\r\n\r\nclass AdminDeleteScheduleModal extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleOpen = this.handleOpen.bind(this);\r\n        this.handleClose = this.handleClose.bind(this);\r\n    }\r\n    handleOpen = () => this.props.handleModal(\"admin-delete-schedule\");\r\n\r\n    handleClose(doctorID, firstname, lastname) {\r\n        this.props.handleModal(\"admin-view-schedule\", {\r\n            key: doctorID,\r\n            firstname,\r\n            lastname,\r\n        });\r\n        this.props.handleUpdateTable(doctorID);\r\n    }\r\n\r\n    handleDelete = (\r\n        event,\r\n        { datakey, firstname, lastname, day, schedule, breaktime }\r\n    ) => {\r\n        event.preventDefault();\r\n\r\n        day = day.toLowerCase();\r\n        schedule[day] = [];\r\n        breaktime[day] = [];\r\n\r\n        const data = {\r\n            \"monday[]\": schedule[\"monday\"],\r\n            \"tuesday[]\": schedule[\"tuesday\"],\r\n            \"wednesday[]\": schedule[\"wednesday\"],\r\n            \"thursday[]\": schedule[\"thursday\"],\r\n            \"friday[]\": schedule[\"friday\"],\r\n            \"saturday[]\": schedule[\"saturday\"],\r\n            \"mondaydifference[]\": breaktime[\"monday\"],\r\n            \"tuesdaydifference[]\": breaktime[\"tuesday\"],\r\n            \"wednesdaydifference[]\": breaktime[\"wednesday\"],\r\n            \"thursdaydifference[]\": breaktime[\"thursday\"],\r\n            \"fridaydifference[]\": breaktime[\"friday\"],\r\n            \"saturdaydifference[]\": breaktime[\"saturday\"],\r\n            doctorID: datakey,\r\n            defaultTime: \"false\",\r\n        };\r\n\r\n        axios.post(\"admin/editSchedule\", data).then((response) => {\r\n            if (response.data) {\r\n                setTimeout(() => {\r\n                    toast({\r\n                        type: \"success\",\r\n                        title: \"Success\",\r\n                        description: (\r\n                            <p>Dentist schedule successfully deleted</p>\r\n                        ),\r\n                        icon: \"check\",\r\n                    });\r\n                }, 1000);\r\n                this.handleClose(datakey, firstname, lastname);\r\n            }\r\n        });\r\n    };\r\n    render() {\r\n        let open;\r\n\r\n        if (this.props.activeModal === \"admin-delete-schedule\") {\r\n            open = true;\r\n        } else {\r\n            open = false;\r\n        }\r\n\r\n        let firstname;\r\n        let lastname;\r\n        let doctorID;\r\n        let schedule = this.props.schedule;\r\n        let breaktime = this.props.breaktime;\r\n        let day;\r\n        let sched_time;\r\n        let add_time;\r\n        if (this.props.data != null) {\r\n            day = this.props.data.day;\r\n            firstname = this.props.data.firstname;\r\n            lastname = this.props.data.lastname;\r\n            doctorID = this.props.data.doctorID;\r\n            if (\r\n                this.props.sched_time[this.props.data.index] != null &&\r\n                this.props.sched_time[this.props.data.index][\"time\"][0] != null\r\n            ) {\r\n                sched_time = this.props.sched_time[this.props.data.index][\r\n                    \"time\"\r\n                ][0][\"range\"];\r\n            }\r\n            if (\r\n                this.props.sched_time[this.props.data.index] != null &&\r\n                this.props.sched_time[this.props.data.index][\"time\"][1] != null\r\n            ) {\r\n                add_time = this.props.sched_time[this.props.data.index][\r\n                    \"time\"\r\n                ][1][\"range\"];\r\n            }\r\n        }\r\n\r\n        return (\r\n            <Modal\r\n                size=\"mini\"\r\n                id=\"remove-schedule-modal\"\r\n                onClose={() => this.handleClose(doctorID, firstname, lastname)}\r\n                onOpen={() => this.handleOpen()}\r\n                open={open}\r\n            >\r\n                <Icon\r\n                    name=\"close\"\r\n                    onClick={() =>\r\n                        this.handleClose(doctorID, firstname, lastname)\r\n                    }\r\n                    id=\"close-remove-schedule-modal\"\r\n                ></Icon>\r\n                <Modal.Header as=\"h2\">\r\n                    <Icon name=\"trash\"></Icon>\r\n                    Remove Schedule\r\n                </Modal.Header>\r\n\r\n                <Modal.Content>\r\n                    <span style={{ fontSize: 15 + \"px\", fontWeight: \"bold\" }}>\r\n                        {day}\r\n                        <br />\r\n                    </span>\r\n                    <span style={{ fontSize: 15 + \"px\", fontWeight: \"bold\" }}>\r\n                        {sched_time}\r\n                        <br />\r\n                        {add_time}\r\n                    </span>\r\n                    <br />\r\n                    <span style={{ fontSize: 15 + \"px\" }}>\r\n                        Are you sure you want to delete this schedule?\r\n                    </span>\r\n                </Modal.Content>\r\n\r\n                <Modal.Actions>\r\n                    <Button\r\n                        icon\r\n                        labelPosition=\"left\"\r\n                        onClick={() =>\r\n                            this.handleClose(doctorID, firstname, lastname)\r\n                        }\r\n                    >\r\n                        <Icon name=\"cancel\" />\r\n                        CANCEL\r\n                    </Button>\r\n                    <Button\r\n                        icon\r\n                        labelPosition=\"left\"\r\n                        color=\"red\"\r\n                        id=\"remove-unavailable-button\"\r\n                        schedule={schedule}\r\n                        breaktime={breaktime}\r\n                        datakey={doctorID}\r\n                        firstname={firstname}\r\n                        lastname={lastname}\r\n                        day={day}\r\n                        onClick={this.handleDelete}\r\n                    >\r\n                        <Icon name=\"check\" />\r\n                        CONFIRM\r\n                    </Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AdminDeleteScheduleModal;\r\n","import React from \"react\";\r\nimport AdminSidebar from \"../module/admin-sidebar\";\r\nimport AdminTable from \"../module/admin-table\";\r\nimport AdminCreateModal from \"../module/admin-create-modal\";\r\nimport AdminCreateScheduleModal from \"../module/admin-create-schedule-modal\";\r\nimport AdminAddDentistModal from \"../module/admin-add-dentist-modal\";\r\nimport AdminAddProcedureModal from \"../module/admin-add-procedure-modal\";\r\nimport AdminResetSecretaryModal from \"../module/admin-reset-secretary-modal\";\r\nimport AdminResetPasswordModal from \"../module/admin-reset-password-modal\";\r\nimport AdminFreeMemoryModal from \"../module/admin-free-memory-modal\";\r\nimport AdminEditProcedureModal from \"../module/admin-edit-procedure-modal\";\r\nimport \"../../../css/admin.css\";\r\nimport { Grid, Dimmer } from \"semantic-ui-react\";\r\nimport \"semantic-ui-css/components/reset.min.css\";\r\nimport \"semantic-ui-css/components/site.min.css\";\r\nimport \"semantic-ui-css/components/container.min.css\";\r\nimport \"semantic-ui-css/components/icon.min.css\";\r\nimport \"semantic-ui-css/components/message.min.css\";\r\nimport \"semantic-ui-css/components/header.min.css\";\r\nimport { SemanticToastContainer, toast } from \"react-semantic-toasts\";\r\nimport AdminDeleteProcedureModal from \"../module/admin-delete-procedure-modal\";\r\nimport AdminEditDentistModal from \"../module/admin-edit-dentist-modal\";\r\nimport AdminDeleteDentistModal from \"../module/admin-delete-dentist-modal\";\r\nimport AdminEditScheduleModal from \"../module/admin-edit-schedule-modal\";\r\nimport axios from \"axios\";\r\nimport AdminViewScheduleModal from \"../module/admin-view-schedule-modal\";\r\nimport AdminAddUnavailableModal from \"../module/admin-add-unavailable-modal\";\r\nimport AdminDeleteUnavailableModal from \"../module/admin-delete-unavailable-modal\";\r\nimport AdminDeleteScheduleModal from \"../module/admin-delete-schedule-modal\";\r\nclass Admin extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleItem = this.handleItem.bind(this);\r\n        this.handleModal = this.handleModal.bind(this);\r\n        this.handleTable = this.handleTable.bind(this);\r\n        this.handleUpdateDentistTable = this.handleUpdateDentistTable.bind(\r\n            this\r\n        );\r\n        this.handleUpdateProcedureTable = this.handleUpdateProcedureTable.bind(\r\n            this\r\n        );\r\n        this.handleUpdateScheduleTable = this.handleUpdateScheduleTable.bind(\r\n            this\r\n        );\r\n        this.handleUpdateUnavailableTable = this.handleUpdateUnavailableTable.bind(\r\n            this\r\n        );\r\n        this.handleUpdateModalUsername = this.handleUpdateModalUsername.bind(\r\n            this\r\n        );\r\n        this.handleShowDimmer = this.handleShowDimmer.bind(this);\r\n        this.handleHideDimmer = this.handleHideDimmer.bind(this);\r\n        this.state = {\r\n            activeItem: \"Dentist\",\r\n            activeModal: \"none\",\r\n            activeTable: \"Dentist\",\r\n            dentists: [],\r\n            procedures: [],\r\n            schedule: [],\r\n            unavailable: [],\r\n            activeDimmer: false,\r\n            activeScheduleDimmer: false,\r\n            activeEditDentistDimmer: false,\r\n            username: \"\",\r\n        };\r\n\r\n        this.handleUpdateDentistTable();\r\n        this.handleUpdateProcedureTable();\r\n    }\r\n\r\n    handleItem(name) {\r\n        this.setState({\r\n            activeItem: name,\r\n        });\r\n    }\r\n\r\n    handleModal(name, data) {\r\n        if (data != undefined) {\r\n            this.setState({\r\n                activeModal: name,\r\n                data: data,\r\n            });\r\n        } else {\r\n            this.setState({\r\n                activeModal: name,\r\n            });\r\n        }\r\n    }\r\n\r\n    handleTable(name) {\r\n        this.setState({\r\n            activeTable: name,\r\n        });\r\n    }\r\n\r\n    handleUpdateDentistTable() {\r\n        this.handleShowDimmer();\r\n        axios.get(\"admin/getAllDentists\").then((response) => {\r\n            this.setState({\r\n                dentists: [\r\n                    ...response.data.dentists.map((dentist) => {\r\n                        return {\r\n                            key: dentist._id,\r\n                            firstname: dentist.firstname,\r\n                            lastname: dentist.lastname,\r\n                            status: dentist.status,\r\n                            lastLogin: dentist.lastLogin,\r\n                            username: dentist.username,\r\n                        };\r\n                    }),\r\n                ],\r\n            });\r\n            this.handleHideDimmer();\r\n        });\r\n    }\r\n\r\n    handleUpdateProcedureTable() {\r\n        this.handleShowDimmer();\r\n        axios.get(\"admin/getAllProcedures\").then((response) => {\r\n            this.setState({\r\n                procedures: [\r\n                    ...response.data.procedures.map((procedure) => {\r\n                        return {\r\n                            key: procedure._id,\r\n                            processname: procedure.processname,\r\n                        };\r\n                    }),\r\n                ],\r\n            });\r\n            this.handleHideDimmer();\r\n        });\r\n    }\r\n\r\n    handleUpdateScheduleTable(datakey) {\r\n        this.handleShowScheduleDimmer();\r\n        axios\r\n            .post(\"admin/getDentistSchedule\", { doctorID: datakey })\r\n            .then((res) => {\r\n                this.setState({\r\n                    schedule: res.data.sched,\r\n                });\r\n                this.handleHideScheduleDimmer();\r\n            });\r\n        axios.post(\"admin/getDoctorSchedule\", {doctorID: datakey})\r\n            .then((res)=>{\r\n                this.setState({\r\n                    editSchedule: res.data.docSched,\r\n                    editBreaktime: res.data.breakTime,\r\n                })\r\n            })\r\n    }\r\n\r\n    handleUpdateUnavailableTable(datakey) {\r\n        this.handleShowScheduleDimmer();\r\n        axios\r\n            .post(\"admin/getAllUnavailableDates\", { doctorID: datakey })\r\n            .then((res) => {\r\n                this.setState({\r\n                    unavailable: res.data.sched,\r\n                });\r\n                this.handleHideScheduleDimmer();\r\n            });\r\n    }\r\n\r\n    handleUpdateModalUsername(datakey) {\r\n        this.handleShowEditDentistDimmer();\r\n        axios.post(\"admin/getUser\", { doctorID: datakey }).then((res) => {\r\n            this.setState({ username: res.data.user.username });\r\n            this.handleHideEditDentistDimmer();\r\n        });\r\n    }\r\n\r\n    handleShowDimmer = () => this.setState({ activeDimmer: true });\r\n    handleHideDimmer = () => this.setState({ activeDimmer: false });\r\n\r\n    handleShowScheduleDimmer = () =>\r\n        this.setState({ activeScheduleDimmer: true });\r\n    handleHideScheduleDimmer = () =>\r\n        this.setState({ activeScheduleDimmer: false });\r\n\r\n    handleShowEditDentistDimmer = () =>\r\n        this.setState({ activeEditDentistDimmer: true });\r\n    handleHideEditDentistDimmer = () =>\r\n        this.setState({ activeEditDentistDimmer: false });\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <SemanticToastContainer position=\"top-center\"></SemanticToastContainer>\r\n                <Grid\r\n                    columns={2}\r\n                    id=\"container\"\r\n                    style={{ padding: 0 + \"px\", margin: 0 + \"px\" }}\r\n                >\r\n                    <AdminSidebar\r\n                        handleItem={this.handleItem}\r\n                        handleTable={this.handleTable}\r\n                        handleModal={this.handleModal}\r\n                        activeItem={this.state.activeItem}\r\n                    />\r\n                    <Grid.Column\r\n                        style={{\r\n                            width: \"85%\",\r\n                            overflowY: \"scroll\",\r\n                            maxHeight: \"100vh\",\r\n                        }}\r\n                    >\r\n                        <Dimmer\r\n                            active={this.state.activeDimmer}\r\n                            inverted\r\n                            id=\"list-dimmer\"\r\n                            style={{ maxHeight: \"100%\" }}\r\n                        >\r\n                            <div className=\"ui elastic huge green loader\"></div>\r\n                        </Dimmer>\r\n                        <AdminTable\r\n                            activeTable={this.state.activeTable}\r\n                            handleModal={this.handleModal}\r\n                            dentists={this.state.dentists}\r\n                            procedures={this.state.procedures}\r\n                            handleUpdateDentistTable={\r\n                                this.handleUpdateDentistTable\r\n                            }\r\n                            handleUpdateProcedureTable={\r\n                                this.handleUpdateProcedureTable\r\n                            }\r\n                            handleUpdateScheduleTable={\r\n                                this.handleUpdateScheduleTable\r\n                            }\r\n                            handleUpdateUnavailableTable={\r\n                                this.handleUpdateUnavailableTable\r\n                            }\r\n                            handleUpdateModalUsername={\r\n                                this.handleUpdateModalUsername\r\n                            }\r\n                        />\r\n                    </Grid.Column>\r\n                </Grid>\r\n                <AdminCreateModal\r\n                    handleModal={this.handleModal}\r\n                    activeModal={this.state.activeModal}\r\n                ></AdminCreateModal>\r\n                <AdminAddDentistModal\r\n                    handleModal={this.handleModal}\r\n                    activeModal={this.state.activeModal}\r\n                    handleUpdateTable={this.handleUpdateDentistTable}\r\n                ></AdminAddDentistModal>\r\n                <AdminCreateScheduleModal\r\n                    handleModal={this.handleModal}\r\n                    activeModal={this.state.activeModal}\r\n                    data={this.state.data}\r\n                    handleUpdateScheduleTable={this.handleUpdateScheduleTable}\r\n                ></AdminCreateScheduleModal>\r\n                <AdminAddProcedureModal\r\n                    handleModal={this.handleModal}\r\n                    activeModal={this.state.activeModal}\r\n                    handleUpdateTable={this.handleUpdateProcedureTable}\r\n                ></AdminAddProcedureModal>\r\n                <AdminAddUnavailableModal\r\n                    handleModal={this.handleModal}\r\n                    activeModal={this.state.activeModal}\r\n                    data={this.state.data}\r\n                    handleUpdateTable={\r\n                        this.handleUpdateUnavailableTable\r\n                    }\r\n                ></AdminAddUnavailableModal>\r\n                <AdminResetSecretaryModal\r\n                    handleModal={this.handleModal}\r\n                    activeModal={this.state.activeModal}\r\n                ></AdminResetSecretaryModal>\r\n                <AdminResetPasswordModal\r\n                    handleModal={this.handleModal}\r\n                    activeModal={this.state.activeModal}\r\n                ></AdminResetPasswordModal>\r\n                <AdminFreeMemoryModal\r\n                    handleModal={this.handleModal}\r\n                    activeModal={this.state.activeModal}\r\n                ></AdminFreeMemoryModal>\r\n                <AdminEditProcedureModal\r\n                    handleModal={this.handleModal}\r\n                    activeModal={this.state.activeModal}\r\n                    data={this.state.data}\r\n                    handleUpdateTable={this.handleUpdateProcedureTable}\r\n                ></AdminEditProcedureModal>\r\n                <AdminEditDentistModal\r\n                    handleModal={this.handleModal}\r\n                    activeModal={this.state.activeModal}\r\n                    data={this.state.data}\r\n                    handleUpdateTable={this.handleUpdateDentistTable}\r\n                    username={this.state.username}\r\n                    activeDimmer={this.state.activeEditDentistDimmer}\r\n                ></AdminEditDentistModal>\r\n                <AdminEditScheduleModal\r\n                    handleModal={this.handleModal}\r\n                    activeModal={this.state.activeModal}\r\n                    data={this.state.data}\r\n                    handleUpdateTable={this.handleUpdateScheduleTable}\r\n                    schedule={this.state.editSchedule}\r\n                    breaktime={this.state.editBreaktime}\r\n                ></AdminEditScheduleModal>\r\n                <AdminDeleteProcedureModal\r\n                    handleModal={this.handleModal}\r\n                    activeModal={this.state.activeModal}\r\n                    data={this.state.data}\r\n                    handleUpdateTable={this.handleUpdateProcedureTable}\r\n                ></AdminDeleteProcedureModal>\r\n                <AdminDeleteDentistModal\r\n                    handleModal={this.handleModal}\r\n                    activeModal={this.state.activeModal}\r\n                    data={this.state.data}\r\n                    handleUpdateTable={this.handleUpdateDentistTable}\r\n                ></AdminDeleteDentistModal>\r\n                <AdminDeleteUnavailableModal\r\n                    handleModal={this.handleModal}\r\n                    activeModal={this.state.activeModal}\r\n                    data={this.state.data}\r\n                    handleUpdateTable={this.handleUpdateUnavailableTable}\r\n                ></AdminDeleteUnavailableModal>\r\n                <AdminViewScheduleModal\r\n                    handleModal={this.handleModal}\r\n                    activeModal={this.state.activeModal}\r\n                    data={this.state.data}\r\n                    handleUpdateTable={this.handleUpdateDentistTable}\r\n                    schedule={this.state.schedule}\r\n                    unavailable={this.state.unavailable}\r\n                    activeDimmer={this.state.activeScheduleDimmer}\r\n                ></AdminViewScheduleModal>\r\n                <AdminDeleteScheduleModal\r\n                    handleModal={this.handleModal}\r\n                    activeModal={this.state.activeModal}\r\n                    data={this.state.data}\r\n                    handleUpdateTable={this.handleUpdateScheduleTable}\r\n                    sched_time={this.state.schedule}\r\n                    schedule={this.state.editSchedule}\r\n                    breaktime={this.state.editBreaktime}\r\n                ></AdminDeleteScheduleModal>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Admin;\r\n","import React, { Component } from 'react';\r\nimport Logo from './logo.png';\r\nimport loginStyles from './loginCSS.css';\r\nimport axios from 'axios';\r\n//import Modal from 'react-modal';\r\nimport ResetPasswordModalComponent from './ResetPasswordModalComponent';\r\nimport {BrowserRouter as Router, Route, Switch, Redirect} from \"react-router-dom\"\r\nimport { Button, Header, Image, Modal, Form, Select, Step } from 'semantic-ui-react'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Dentist from '../dentist/page/DentistPageComponent';\r\nimport Secretary from \"../secretary/pages/secretary-view\";\r\nimport Admin from \"../admin/pages/admin\";\r\nimport { SemanticToastContainer, toast } from 'react-semantic-toasts';\r\nimport 'react-semantic-toasts/styles/react-semantic-alert.css';\r\n\r\nclass LoginComponent extends Component {\r\n\r\n    constructor (props){\r\n        super(props);\r\n        this.onChangeUserName = this.onChangeUserName.bind(this);\r\n        this.onChangePassword = this.onChangePassword.bind(this);\r\n        this.getSession = this.getSession.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n        this.state={\r\n            username: '',\r\n            password: '',\r\n        }\r\n        \r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getSession();\r\n\r\n    }\r\n\r\n    getSession(){\r\n        axios.get(\"/login\").then(res=>{\r\n           // alert(res.data.message);\r\n            console.log(\"login: \"+res.data.message);\r\n            this.redirecToPage(res.data.message);\r\n        })\r\n\r\n    }\r\n   \r\n\r\n    onChangeUserName(e){\r\n        this.setState({\r\n            username: e.target.value\r\n        });\r\n    }\r\n\r\n    onChangePassword(e){\r\n        this.setState({\r\n            password: e.target.value\r\n        });\r\n    }\r\n\r\n    redirecToPage=(type)=>{\r\n        const {history} = this.props;\r\n        switch(type){\r\n            case 1:\r\n                window.location.href =\"/secretary\";\r\n                console.log('sec');\r\n                break;\r\n            case 2:\r\n                axios.get('dentist//getCurrentDentist').then(res=>{\r\n                    if (res.data.status===\"Active\")\r\n                        //console.log(\"ACTIVE\");\r\n                        window.location.href =\"/dentist\";\r\n                })\r\n               \r\n                break;\r\n            case 3:\r\n                window.location.href =\"/admin\";\r\n                break;\r\n\r\n        }\r\n    }\r\n\r\n    redirectToDentist = () => {\r\n        //alert(\"Home\");\r\n        const { history } = this.props;\r\n        window.location.href = \"/dentist\"\r\n       }\r\n\r\n       redirectToSecretary = () => {\r\n        //alert(\"Home\");\r\n        const { history } = this.props;\r\n        window.location.href = \"/dentist\"\r\n       }\r\n\r\n\r\n       redirectToAdmin = () => {\r\n        //alert(\"Admin\");\r\n       // const { history } = this.props;\r\n       // history.push('/admin');\r\n       window.location.href = \"/admin\";\r\n       }\r\n\r\n    onSubmit (e){\r\n\r\n        //this.redirectToHome();\r\n        e.preventDefault();\r\n\r\n        const user ={\r\n            username: this.state.username,\r\n            password: this.state.password\r\n        }\r\n\r\n\r\n\r\n        console.log(user);\r\n        axios.post('validateLogin', user).then\r\n        (res=>{\r\n\r\n            if (res.data.message===2){\r\n                toast({\r\n                    type: \"error\",\r\n                    title: \"Error\",\r\n                    description: <p>Invalid Password. Try again.</p>,\r\n                    icon: \"cancel\",\r\n                  });\r\n            }\r\n\r\n            else if (res.data.message===0){\r\n                toast({\r\n                    type: \"error\",\r\n                    title: \"Error\",\r\n                    description: <p>This account does not exist.</p>,\r\n                    icon: \"cancel\",\r\n                  });\r\n            }\r\n\r\n            \r\n            console.log(res.data)\r\n            this.getSession();\r\n        \r\n        }).catch((error)=>{\r\n            console.log(\"Error: \"+ error);\r\n            console.log(\"Error Status:\"+error.status);\r\n            console.log(\"Error Code: \"+error.code);\r\n            //history.pushState(\"/dentist\");\r\n        });\r\n\r\n      //  window.location = '/';\r\n    }\r\n\r\n    render(){\r\n        return (\r\n        \r\n           <div style={loginStyles}>\r\n               <Router>\r\n                    <Route path=\"/dentist\" component={Dentist}/>\r\n                    <Route path = \"/secretary\" component={Secretary}/>\r\n                    <Route path = \"/admin\" component={Admin}/>\r\n               </Router>\r\n             <head>\r\n              <title>Access Dental Clinic | Login</title>\r\n              <script src=\"javascript/jquery.js\"></script>\r\n    \r\n            </head>\r\n           \r\n\r\n<div className=\"ui middle aligned center aligned very padded grid\">\r\n<div className = \"column\" style ={{maxWidth: \"300px\"}}>\r\n            {/*ADD LOGO*/}\r\n            <div className=\"row\" style ={{marginTop: \"50px\"}}><img src = {Logo} alt=\"pic\" className=\"ui image\" /></div>\r\n            <SemanticToastContainer></SemanticToastContainer>\r\n            \r\n            {/*FORM*/}\r\n            <form className=\"ui large form\" id=\"form\" onSubmit={this.onSubmit}>\r\n                <div className=\"ui stacked segment\">\r\n                     <div className=\"field\" id=\"username-input\">\r\n                         <div className=\"ui left icon input\">\r\n                             <i className=\"user icon\"></i>\r\n                             <input type=\"text\" \r\n                                    name=\"username\" \r\n                                    id=\"username\" \r\n                                    placeholder=\"Username\"\r\n                                    value={this.state.username}\r\n                                    onChange ={this.onChangeUserName}></input>\r\n                         </div>\r\n                     </div> \r\n                     <div className=\"field\" id=\"password-input\">\r\n                         <div className=\"ui left icon input\">\r\n                             <i className=\"lock icon\"></i>\r\n                             <input type=\"password\" \r\n                                    name=\"password\" \r\n                                    id=\"password\" \r\n                                    placeholder=\"Password\"\r\n                                    value={this.state.password}\r\n                                    onChange={this.onChangePassword}></input>\r\n                         </div>\r\n                     </div>\r\n                     \r\n                   {/*  <div className=\"ui button\" id=\"forgot\" style={{paddingBottom: \"15px\", textDecoration: \"underline\", backgroundColor: \"transparent\"}}>Forgot password?</div>*/}\r\n                   <ResetPasswordModalComponent></ResetPasswordModalComponent>\r\n                         <button type=\"button\" id=\"submit\" className=\"ui fluid large pink submit button\" onClick = {this.onSubmit}>Login</button>\r\n                        \r\n                </div>\r\n            </form>\r\n            \r\n            </div>\r\n            \r\n            </div>\r\n\r\n           </div>\r\n           \r\n\r\n           \r\n\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default LoginComponent;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\"\r\n\r\nimport LoginComponent from '../src/components/sign-in/LoginComponent';\r\n//import DentistPage from '../src/components/dentist/DentistPageComponent';\r\n/*\r\nimport Navbar from \"./components/secretary/small_components/Navbar.component\";\r\nimport addProcMainForm from \"./components/secretary/AddApp/addProcMainForm.component\"\r\nimport week_all from \"../src/components/secretary/views/week_all.component\";\r\nimport week_avail from \"../src/components/secretary/views/week_avail.component\";\r\nimport day_one from \"../src/components/secretary/views/day_one.component\";\r\nimport day_all from \"../src/components/secretary/views/day_all.component\";\r\nimport week_unavailable from \"../src/components/secretary/views/week_unavailable.component\";\r\nimport loginComponent from \"../src/components/sign-in/LoginComponent\"\r\nimport Example from \"./components/secretary/small_components/appointment_modal.component\";\r\nimport LoginComponent from '../src/components/sign-in/LoginComponent';\r\nimport resetPassword from '../src/components/sign-in/ResetPasswordModalComponent'\r\nimport ResetPasswordModalComponent from '../src/components/sign-in/ResetPasswordModalComponent';\r\nimport LoginClarification from '../src/components/sign-in/LoginClarification';\r\nimport DentistPage from '../src/components/dentist/DentistPageComponent';\r\n*/\r\n//This gets called by index.js\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      {/* <Navbar /> */}\r\n      {/* <Example/> */}\r\n      {/* <addProcMainForm/> */}\r\n     {/*} <LoginComponent></LoginComponent>*/}\r\n    {/*} <DentistPage></DentistPage>*/}\r\n    <Route path ='/' exact component = {LoginComponent} />\r\n    {/*}  <Route path=\"/week_all\" component={week_all} />\r\n      <Route path=\"/week_avail\" component={week_avail} />\r\n      <Route path=\"/day_all\" component={day_all} />\r\n      <Route path=\"/week_unavailable\" component={week_unavailable} />\r\n  <Route path=\"/day_one\" component={day_one} /> */}\r\n      \r\n    </Router>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom';\r\nimport App from './App';\r\nimport Secretary from \"./components/secretary/pages/secretary-view\";\r\nimport Admin from \"./components/admin/pages/admin\"\r\nimport Dentist from \"./components/dentist/page/DentistPageComponent\"\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'semantic-ui-css/semantic.min.css';\r\n\r\nconst routing = (\r\n  <Router>\r\n    <div className=\"App\">      \r\n      <Route path = \"/\" component={App}/>\r\n      <Route path = \"/secretary\" component={Secretary}/>\r\n      <Route path = \"/admin\" component={Admin}/>\r\n      <Route path = \"/dentist\" component={Dentist}/>\r\n    </div>\r\n  </Router>\r\n)\r\nReactDOM.render(\r\n  routing,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}